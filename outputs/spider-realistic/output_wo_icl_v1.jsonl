{"db_id": "concert_singer", "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "query_toks": ["SELECT", "name", ",", "country", ",", "age", "FROM", "singer", "ORDER", "BY", "age", "DESC"], "query_toks_no_value": ["select", "name", ",", "country", ",", "age", "from", "singer", "order", "by", "age", "desc"], "question": "Show name, country, age for all singers from the oldest to the youngest.", "question_toks": ["Show", "name,", "country,", "age", "for", "all", "singers", "from", "the", "oldest", "to", "the", "youngest."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]], [0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 13, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name, Country, Age FROM singer ORDER BY Age ASC;"}
{"db_id": "concert_singer", "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "max", "(", "age", ")", "FROM", "singer", "WHERE", "country", "=", "'France", "'"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "max", "(", "age", ")", "from", "singer", "where", "country", "=", "value"], "question": "What is the average, minimum, and maximum age of all singers from France?", "question_toks": ["What", "is", "the", "average,", "minimum,", "and", "maximum", "age", "of", "all", "singers", "from", "France?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 13, false], null]], [2, [0, [0, 13, false], null]], [1, [0, [0, 13, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"France\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France';"}
{"db_id": "concert_singer", "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "max", "(", "age", ")", "FROM", "singer", "WHERE", "country", "=", "'France", "'"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "max", "(", "age", ")", "from", "singer", "where", "country", "=", "value"], "question": "What is the average, minimum, and maximum age for all French singers?", "question_toks": ["What", "is", "the", "average,", "minimum,", "and", "maximum", "age", "for", "all", "French", "singers?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 13, false], null]], [2, [0, [0, 13, false], null]], [1, [0, [0, 13, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"France\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country='France';"}
{"db_id": "concert_singer", "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "query_toks": ["SELECT", "song_name", ",", "song_release_year", "FROM", "singer", "ORDER", "BY", "age", "LIMIT", "1"], "query_toks_no_value": ["select", "song_name", ",", "song_release_year", "from", "singer", "order", "by", "age", "limit", "value"], "question": "Show the name and the release year of the song by the youngest singer.", "question_toks": ["Show", "the", "name", "and", "the", "release", "year", "of", "the", "song", "by", "the", "youngest", "singer."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Song_Name, Song_release_year \n FROM singer \n WHERE Age = (SELECT MIN(Age) FROM singer);"}
{"db_id": "concert_singer", "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "query_toks": ["SELECT", "song_name", ",", "song_release_year", "FROM", "singer", "ORDER", "BY", "age", "LIMIT", "1"], "query_toks_no_value": ["select", "song_name", ",", "song_release_year", "from", "singer", "order", "by", "age", "limit", "value"], "question": "What are the names and release years for all the songs of the youngest singer?", "question_toks": ["What", "are", "the", "names", "and", "release", "years", "for", "all", "the", "songs", "of", "the", "youngest", "singer?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"}
{"db_id": "concert_singer", "query": "SELECT DISTINCT country FROM singer WHERE age  >  20", "query_toks": ["SELECT", "DISTINCT", "country", "FROM", "singer", "WHERE", "age", ">", "20"], "query_toks_no_value": ["select", "distinct", "country", "from", "singer", "where", "age", ">", "value"], "question": "What are all distinct countries where singers older than 20 are from?", "question_toks": ["What", "are", "all", "distinct", "countries", "where", "singers", "older", "than", "20", "are", "from?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [true, [[0, [0, [0, 10, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 20.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "DISTINCT Country FROM singer WHERE Age > 20;"}
{"db_id": "concert_singer", "query": "SELECT DISTINCT country FROM singer WHERE age  >  20", "query_toks": ["SELECT", "DISTINCT", "country", "FROM", "singer", "WHERE", "age", ">", "20"], "query_toks_no_value": ["select", "distinct", "country", "from", "singer", "where", "age", ">", "value"], "question": "What are  the different countries with singers  older than 20?", "question_toks": ["What", "are", "the", "different", "countries", "with", "singers", "older", "than", "20?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [true, [[0, [0, [0, 10, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 20.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "DISTINCT Country FROM singer WHERE Age > 20;"}
{"db_id": "concert_singer", "query": "SELECT country ,  count(*) FROM singer GROUP BY country", "query_toks": ["SELECT", "country", ",", "count", "(", "*", ")", "FROM", "singer", "GROUP", "BY", "country"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "country"], "question": "Show all countries and the number of singers in each nation.", "question_toks": ["Show", "all", "countries", "and", "the", "number", "of", "singers", "in", "each", "nation."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Country, COUNT(Singer_ID) FROM singer GROUP BY Country;"}
{"db_id": "concert_singer", "query": "SELECT country ,  count(*) FROM singer GROUP BY country", "query_toks": ["SELECT", "country", ",", "count", "(", "*", ")", "FROM", "singer", "GROUP", "BY", "country"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "country"], "question": "How many singers are from each nation?", "question_toks": ["How", "many", "singers", "are", "from", "each", "nation?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Country, COUNT(*) FROM singer GROUP BY Country;"}
{"db_id": "concert_singer", "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "query_toks": ["SELECT", "song_name", "FROM", "singer", "WHERE", "age", ">", "(", "SELECT", "avg", "(", "age", ")", "FROM", "singer", ")"], "query_toks_no_value": ["select", "song_name", "from", "singer", "where", "age", ">", "(", "select", "avg", "(", "age", ")", "from", "singer", ")"], "question": "List all song names by singers older than average .", "question_toks": ["List", "all", "song", "names", "by", "singers", "older", "than", "average", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Song_Name \nFROM singer \nWHERE Age > (SELECT AVG(Age) FROM singer);"}
{"db_id": "concert_singer", "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "query_toks": ["SELECT", "song_name", "FROM", "singer", "WHERE", "age", ">", "(", "SELECT", "avg", "(", "age", ")", "FROM", "singer", ")"], "query_toks_no_value": ["select", "song_name", "from", "singer", "where", "age", ">", "(", "select", "avg", "(", "age", ")", "from", "singer", ")"], "question": "What are all the song names by singers who are older than average?", "question_toks": ["What", "are", "all", "the", "song", "names", "by", "singers", "who", "are", "older", "than", "average?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Song_Name \nFROM singer \nWHERE Age > (SELECT AVG(Age) FROM singer);"}
{"db_id": "concert_singer", "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "query_toks": ["SELECT", "LOCATION", ",", "name", "FROM", "stadium", "WHERE", "capacity", "BETWEEN", "5000", "AND", "10000"], "query_toks_no_value": ["select", "location", ",", "name", "from", "stadium", "where", "capacity", "between", "value", "and", "value"], "question": "Show location and name for all stadiums that can fit between 5000 and 10000 people.", "question_toks": ["Show", "location", "and", "name", "for", "all", "stadiums", "that", "can", "fit", "between", "5000", "and", "10000", "people."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 1, [0, [0, 4, false], null], 5000.0, 10000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Location, Name \n FROM stadium \n WHERE Capacity BETWEEN 5000 AND 10000;"}
{"db_id": "concert_singer", "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "query_toks": ["SELECT", "LOCATION", ",", "name", "FROM", "stadium", "WHERE", "capacity", "BETWEEN", "5000", "AND", "10000"], "query_toks_no_value": ["select", "location", ",", "name", "from", "stadium", "where", "capacity", "between", "value", "and", "value"], "question": "What are the locations and names of all stations that can accommodate between 5000 and 10000 fans?", "question_toks": ["What", "are", "the", "locations", "and", "names", "of", "all", "stations", "that", "can", "accommodate", "between", "5000", "and", "10000", "fans?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 1, [0, [0, 4, false], null], 5000.0, 10000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Location, Name \n FROM stadium \n WHERE Capacity BETWEEN 5000 AND 10000;"}
{"db_id": "concert_singer", "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "concert", "WHERE", "YEAR", "=", "2014", "OR", "YEAR", "=", "2015"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "concert", "where", "year", "=", "value", "or", "year", "=", "value"], "question": "How many concerts are there in  2014 or 2015?", "question_toks": ["How", "many", "concerts", "are", "there", "in", "2014", "or", "2015?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null], "or", [false, 2, [0, [0, 19, false], null], 2015.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015;"}
{"db_id": "concert_singer", "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "concert", "WHERE", "YEAR", "=", "2014", "OR", "YEAR", "=", "2015"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "concert", "where", "year", "=", "value", "or", "year", "=", "value"], "question": "How many concerts occurred in 2014 or 2015?", "question_toks": ["How", "many", "concerts", "occurred", "in", "2014", "or", "2015?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null], "or", [false, 2, [0, [0, 19, false], null], 2015.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015;"}
{"db_id": "concert_singer", "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", ",", "T2.capacity", "FROM", "concert", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.stadium_id", "WHERE", "T1.year", ">", "=", "2014", "GROUP", "BY", "T2.stadium_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "capacity", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "where", "t1", ".", "year", ">", "=", "value", "group", "by", "t2", ".", "stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the stadium name and capacity with most number of concerts in  2014 or after.", "question_toks": ["Show", "the", "stadium", "name", "and", "capacity", "with", "most", "number", "of", "concerts", "in", "2014", "or", "after."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 5, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [[0, 1, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "stadium.Name, stadium.Capacity \n FROM stadium \n JOIN concert ON concert.Stadium_ID=stadium.Stadium_ID \n WHERE concert.Year>=2014 \n GROUP BY stadium.Name \n ORDER BY COUNT(concert.concert_ID) DESC \n LIMIT 1;"}
{"db_id": "concert_singer", "query": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1", "query_toks": ["select", "t2.name", ",", "t2.capacity", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", ">", "2013", "group", "by", "t2.stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "capacity", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "where", "t1", ".", "year", ">", "value", "group", "by", "t2", ".", "stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name and capacity of the stadium  with the most concerts after 2013?", "question_toks": ["What", "is", "the", "name", "and", "capacity", "of", "the", "stadium", "with", "the", "most", "concerts", "after", "2013?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 3, [0, [0, 19, false], null], 2013.0, null]], "groupBy": [[0, 1, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "stadium.Name, stadium.Capacity\n FROM concert\n JOIN stadium ON concert.Stadium_ID=stadium.Stadium_ID\n WHERE concert.Year > 2013\n GROUP BY stadium.Stadium_ID\n ORDER BY COUNT(concert.concert_ID) DESC\n LIMIT 1;"}
{"db_id": "concert_singer", "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "query_toks": ["SELECT", "name", "FROM", "stadium", "WHERE", "stadium_id", "NOT", "IN", "(", "SELECT", "stadium_id", "FROM", "concert", ")"], "query_toks_no_value": ["select", "name", "from", "stadium", "where", "stadium_id", "not", "in", "(", "select", "stadium_id", "from", "concert", ")"], "question": "Show the stadium names without any concert.", "question_toks": ["Show", "the", "stadium", "names", "without", "any", "concert."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 18, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID=concert.Stadium_ID WHERE concert_ID IS NULL;"}
{"db_id": "concert_singer", "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "query_toks": ["SELECT", "name", "FROM", "stadium", "WHERE", "stadium_id", "NOT", "IN", "(", "SELECT", "stadium_id", "FROM", "concert", ")"], "query_toks_no_value": ["select", "name", "from", "stadium", "where", "stadium_id", "not", "in", "(", "select", "stadium_id", "from", "concert", ")"], "question": "What are the names of the stadiums without any concerts?", "question_toks": ["What", "are", "the", "names", "of", "the", "stadiums", "without", "any", "concerts?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 18, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "stadium.Name \nFROM stadium \nLEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nWHERE concert.concert_ID IS NULL;"}
{"db_id": "concert_singer", "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "query_toks": ["SELECT", "country", "FROM", "singer", "WHERE", "age", ">", "40", "INTERSECT", "SELECT", "country", "FROM", "singer", "WHERE", "age", "<", "30"], "query_toks_no_value": ["select", "country", "from", "singer", "where", "age", ">", "value", "intersect", "select", "country", "from", "singer", "where", "age", "<", "value"], "question": "Show countries where a singer older than 40 and a singer younger than 30 are from.", "question_toks": ["Show", "countries", "where", "a", "singer", "older", "than", "40", "and", "a", "singer", "younger", "than", "30", "are", "from."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 40.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 4, [0, [0, 13, false], null], 30.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "Country FROM singer WHERE Age > 40 INTERSECT SELECT Country FROM singer WHERE Age < 30;"}
{"db_id": "concert_singer", "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "query_toks": ["SELECT", "name", "FROM", "stadium", "EXCEPT", "SELECT", "T2.name", "FROM", "concert", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.stadium_id", "WHERE", "T1.year", "=", "2014"], "query_toks_no_value": ["select", "name", "from", "stadium", "except", "select", "t2", ".", "name", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "where", "t1", ".", "year", "=", "value"], "question": "Show names for all stadiums except for stadiums having a concert in  2014.", "question_toks": ["Show", "names", "for", "all", "stadiums", "except", "for", "stadiums", "having", "a", "concert", "in", "2014."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "Prediction": "stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert WHERE concert.Year=2014);"}
{"db_id": "concert_singer", "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "query_toks": ["SELECT", "name", "FROM", "stadium", "EXCEPT", "SELECT", "T2.name", "FROM", "concert", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.stadium_id", "WHERE", "T1.year", "=", "2014"], "query_toks_no_value": ["select", "name", "from", "stadium", "except", "select", "t2", ".", "name", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "where", "t1", ".", "year", "=", "value"], "question": "What are the names of all stadiums that did not have a concert in 2014?", "question_toks": ["What", "are", "the", "names", "of", "all", "stadiums", "that", "did", "not", "have", "a", "concert", "in", "2014?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "Prediction": "Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year=2014);"}
{"db_id": "concert_singer", "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id", "query_toks": ["SELECT", "T2.concert_name", ",", "T2.theme", ",", "count", "(", "*", ")", "FROM", "singer_in_concert", "AS", "T1", "JOIN", "concert", "AS", "T2", "ON", "T1.concert_id", "=", "T2.concert_id", "GROUP", "BY", "T2.concert_id"], "query_toks_no_value": ["select", "t2", ".", "concert_name", ",", "t2", ".", "theme", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "concert", "as", "t2", "on", "t1", ".", "concert_id", "=", "t2", ".", "concert_id", "group", "by", "t2", ".", "concert_id"], "question": "Show the name and theme for all concerts and the number of singers in each.", "question_toks": ["Show", "the", "name", "and", "theme", "for", "all", "concerts", "and", "the", "number", "of", "singers", "in", "each."], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 20, false], null], [0, 15, false], null]]}, "select": [false, [[0, [0, [0, 16, false], null]], [0, [0, [0, 17, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS num_singers\n FROM concert\n JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID\n GROUP BY concert.concert_ID;"}
{"db_id": "concert_singer", "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "singer_in_concert", "AS", "T1", "JOIN", "singer", "AS", "T2", "ON", "T1.singer_id", "=", "T2.singer_id", "GROUP", "BY", "T2.singer_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1", ".", "singer_id", "=", "t2", ".", "singer_id", "group", "by", "t2", ".", "singer_id"], "question": "List singer names and number of concerts for each person.", "question_toks": ["List", "singer", "names", "and", "number", "of", "concerts", "for", "each", "person."], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 21, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "singer.Name, COUNT(singer_in_concert.concert_ID) \n FROM singer \n JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \n GROUP BY singer.Name;"}
{"db_id": "concert_singer", "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "singer_in_concert", "AS", "T1", "JOIN", "singer", "AS", "T2", "ON", "T1.singer_id", "=", "T2.singer_id", "GROUP", "BY", "T2.singer_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1", ".", "singer_id", "=", "t2", ".", "singer_id", "group", "by", "t2", ".", "singer_id"], "question": "What are the names and number of concerts for each person?", "question_toks": ["What", "are", "the", "names", "and", "number", "of", "concerts", "for", "each", "person?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 21, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "singer.Name, COUNT(concert.concert_ID) \n FROM singer \n JOIN singer_in_concert ON singer.Singer_ID=singer_in_concert.Singer_ID \n JOIN concert ON singer_in_concert.concert_ID=concert.concert_ID \n GROUP BY singer.Name;"}
{"db_id": "concert_singer", "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "query_toks": ["SELECT", "T2.name", "FROM", "singer_in_concert", "AS", "T1", "JOIN", "singer", "AS", "T2", "ON", "T1.singer_id", "=", "T2.singer_id", "JOIN", "concert", "AS", "T3", "ON", "T1.concert_id", "=", "T3.concert_id", "WHERE", "T3.year", "=", "2014"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1", ".", "singer_id", "=", "t2", ".", "singer_id", "join", "concert", "as", "t3", "on", "t1", ".", "concert_id", "=", "t3", ".", "concert_id", "where", "t3", ".", "year", "=", "value"], "question": "List all singer names in concerts in  2014.", "question_toks": ["List", "all", "singer", "names", "in", "concerts", "in", "2014."], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 21, false], null], [0, 8, false], null], "and", [false, 2, [0, [0, 20, false], null], [0, 15, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "singer.Name \nFROM singer \nJOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nJOIN concert ON singer_in_concert.concert_ID = concert.concert_ID \nWHERE concert.Year = 2014;"}
{"db_id": "concert_singer", "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "query_toks": ["SELECT", "T2.name", "FROM", "singer_in_concert", "AS", "T1", "JOIN", "singer", "AS", "T2", "ON", "T1.singer_id", "=", "T2.singer_id", "JOIN", "concert", "AS", "T3", "ON", "T1.concert_id", "=", "T3.concert_id", "WHERE", "T3.year", "=", "2014"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1", ".", "singer_id", "=", "t2", ".", "singer_id", "join", "concert", "as", "t3", "on", "t1", ".", "concert_id", "=", "t3", ".", "concert_id", "where", "t3", ".", "year", "=", "value"], "question": "What are the names of the singers who performed in a concert in 2014?", "question_toks": ["What", "are", "the", "names", "of", "the", "singers", "who", "performed", "in", "a", "concert", "in", "2014?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 21, false], null], [0, 8, false], null], "and", [false, 2, [0, [0, 20, false], null], [0, 15, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "singer.Name \nFROM singer \nJOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nJOIN concert ON singer_in_concert.concert_ID = concert.concert_ID \nWHERE concert.Year = 2014;"}
{"db_id": "concert_singer", "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "query_toks": ["SELECT", "name", ",", "country", "FROM", "singer", "WHERE", "song_name", "LIKE", "'", "%", "Hey", "%", "'"], "query_toks_no_value": ["select", "name", ",", "country", "from", "singer", "where", "song_name", "like", "value"], "question": "what is the name and nation of the singer who have a song having 'Hey' in its title?", "question_toks": ["what", "is", "the", "name", "and", "nation", "of", "the", "singer", "who", "have", "a", "song", "having", "'Hey'", "in", "its", "title?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]]]], "where": [[false, 9, [0, [0, 11, false], null], "\"%Hey%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "singer.Name, singer.Country\n FROM singer\n WHERE singer.Song_Name LIKE '%Hey%';"}
{"db_id": "concert_singer", "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "query_toks": ["SELECT", "name", ",", "country", "FROM", "singer", "WHERE", "song_name", "LIKE", "'", "%", "Hey", "%", "'"], "query_toks_no_value": ["select", "name", ",", "country", "from", "singer", "where", "song_name", "like", "value"], "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "question_toks": ["What", "is", "the", "name", "and", "country", "of", "origin", "of", "every", "singer", "who", "has", "a", "song", "with", "the", "word", "'Hey'", "in", "its", "title?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]]]], "where": [[false, 9, [0, [0, 11, false], null], "\"%Hey%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "singer.Name, singer.Country\n FROM singer\n WHERE singer.Song_Name LIKE '%Hey%';"}
{"db_id": "concert_singer", "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "query_toks": ["SELECT", "T2.name", ",", "T2.location", "FROM", "concert", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.stadium_id", "WHERE", "T1.Year", "=", "2014", "INTERSECT", "SELECT", "T2.name", ",", "T2.location", "FROM", "concert", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.stadium_id", "WHERE", "T1.Year", "=", "2015"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "where", "t1", ".", "year", "=", "value", "intersect", "select", "t2", ".", "name", ",", "t2", ".", "location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "where", "t1", ".", "year", "=", "value"], "question": "Find the name and location of the stadiums which some concerts happened in both 2014 and 2015.", "question_toks": ["Find", "the", "name", "and", "location", "of", "the", "stadiums", "which", "some", "concerts", "happened", "in", "both", "2014", "and", "2015."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2015.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "stadium.Name, stadium.Location\n FROM stadium\n JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID\n WHERE concert.Year = 2014 AND stadium.Stadium_ID IN \n (SELECT stadium.Stadium_ID FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year = 2015)"}
{"db_id": "concert_singer", "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "query_toks": ["SELECT", "T2.name", ",", "T2.location", "FROM", "concert", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.stadium_id", "WHERE", "T1.Year", "=", "2014", "INTERSECT", "SELECT", "T2.name", ",", "T2.location", "FROM", "concert", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.stadium_id", "WHERE", "T1.Year", "=", "2015"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "where", "t1", ".", "year", "=", "value", "intersect", "select", "t2", ".", "name", ",", "t2", ".", "location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "where", "t1", ".", "year", "=", "value"], "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "question_toks": ["What", "are", "the", "names", "and", "locations", "of", "the", "stadiums", "that", "had", "concerts", "that", "occurred", "in", "both", "2014", "and", "2015?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2015.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "stadium.Name, stadium.Location\n FROM stadium\n JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID\n WHERE concert.Year = 2014 AND stadium.Stadium_ID IN \n (SELECT concert.Stadium_ID FROM concert WHERE concert.Year = 2015);"}
{"db_id": "concert_singer", "query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "query_toks": ["select", "count", "(", "*", ")", "from", "concert", "where", "stadium_id", "=", "(", "select", "stadium_id", "from", "stadium", "order", "by", "capacity", "desc", "limit", "1", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "concert", "where", "stadium_id", "=", "(", "select", "stadium_id", "from", "stadium", "order", "by", "capacity", "desc", "limit", "value", ")"], "question": "Find the number of concerts happened in the stadium that can accommodate the most people.", "question_toks": ["Find", "the", "number", "of", "concerts", "happened", "in", "the", "stadium", "that", "can", "accommodate", "the", "most", "people."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 4, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) \nFROM concert \nJOIN stadium ON concert.Stadium_ID=stadium.Stadium_ID \nWHERE stadium.Capacity=(SELECT MAX(Capacity) FROM stadium);"}
{"db_id": "concert_singer", "query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "query_toks": ["select", "count", "(", "*", ")", "from", "concert", "where", "stadium_id", "=", "(", "select", "stadium_id", "from", "stadium", "order", "by", "capacity", "desc", "limit", "1", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "concert", "where", "stadium_id", "=", "(", "select", "stadium_id", "from", "stadium", "order", "by", "capacity", "desc", "limit", "value", ")"], "question": "What are the number of concerts that occurred in the stadium with space for the most people?", "question_toks": ["What", "are", "the", "number", "of", "concerts", "that", "occurred", "in", "the", "stadium", "with", "space", "for", "the", "most", "people?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 4, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM concert \nWHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium));"}
{"db_id": "pets_1", "query": "SELECT count(*) FROM pets WHERE weight  >  10", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "pets", "WHERE", "weight", ">", "10"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "pets", "where", "weight", ">", "value"], "question": "Find the number of pets that is heavier than 10.", "question_toks": ["Find", "the", "number", "of", "pets", "that", "is", "heavier", "than", "10."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 14, false], null], 10.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID=Pets.PetID WHERE weight > 10;"}
{"db_id": "pets_1", "query": "SELECT count(*) FROM pets WHERE weight  >  10", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "pets", "WHERE", "weight", ">", "10"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "pets", "where", "weight", ">", "value"], "question": "How many pets are over 10 lbs?", "question_toks": ["How", "many", "pets", "are", "over", "10", "lbs?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 14, false], null], 10.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM Pets WHERE weight > 10;"}
{"db_id": "pets_1", "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "query_toks": ["SELECT", "weight", "FROM", "pets", "ORDER", "BY", "pet_age", "LIMIT", "1"], "query_toks_no_value": ["select", "weight", "from", "pets", "order", "by", "pet_age", "limit", "value"], "question": "Find the weight of the youngest dog.", "question_toks": ["Find", "the", "weight", "of", "the", "youngest", "dog."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "MIN(weight) FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog');"}
{"db_id": "pets_1", "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "query_toks": ["SELECT", "weight", "FROM", "pets", "ORDER", "BY", "pet_age", "LIMIT", "1"], "query_toks_no_value": ["select", "weight", "from", "pets", "order", "by", "pet_age", "limit", "value"], "question": "How much does the youngest dog weigh?", "question_toks": ["How", "much", "does", "the", "youngest", "dog", "weigh?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "MIN(weight) FROM Pets WHERE PetType='dog' AND pet_age=(SELECT MIN(pet_age) FROM Pets WHERE PetType='dog');"}
{"db_id": "pets_1", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "WHERE", "T1.age", ">", "20"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "where", "t1", ".", "age", ">", "value"], "question": "Find number of pets owned by students who are older than 20.", "question_toks": ["Find", "number", "of", "pets", "owned", "by", "students", "who", "are", "older", "than", "20."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 20.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM Has_Pet \nJOIN Student ON Has_Pet.StuID=Student.StuID \nWHERE Student.Age > 20;"}
{"db_id": "pets_1", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "WHERE", "T1.age", ">", "20"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "where", "t1", ".", "age", ">", "value"], "question": "How many pets are owned by students that are older than 20?", "question_toks": ["How", "many", "pets", "are", "owned", "by", "students", "that", "are", "older", "than", "20?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 20.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(DISTINCT Has_Pet.PetID) \nFROM Has_Pet \nJOIN Student ON Has_Pet.StuID = Student.StuID \nWHERE Student.Age > 20;"}
{"db_id": "pets_1", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T2.petid", "=", "T3.petid", "WHERE", "T1.sex", "=", "'F", "'", "AND", "T3.pettype", "=", "'dog", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t2", ".", "petid", "=", "t3", ".", "petid", "where", "t1", ".", "sex", "=", "value", "and", "t3", ".", "pettype", "=", "value"], "question": "Find the number of dogs that are raised by female students.", "question_toks": ["Find", "the", "number", "of", "dogs", "that", "are", "raised", "by", "female", "students."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 10, false], null], [0, 11, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"F\"", null], "and", [false, 2, [0, [0, 12, false], null], "\"dog\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM Has_Pet \nJOIN Pets ON Has_Pet.PetID=Pets.PetID \nJOIN Student ON Has_Pet.StuID=Student.StuID \nWHERE Student.Sex='F' AND Pets.PetType='dog';"}
{"db_id": "pets_1", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T2.petid", "=", "T3.petid", "WHERE", "T1.sex", "=", "'F", "'", "AND", "T3.pettype", "=", "'dog", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t2", ".", "petid", "=", "t3", ".", "petid", "where", "t1", ".", "sex", "=", "value", "and", "t3", ".", "pettype", "=", "value"], "question": "How many dogs are raised by female students?", "question_toks": ["How", "many", "dogs", "are", "raised", "by", "female", "students?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 10, false], null], [0, 11, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"F\"", null], "and", [false, 2, [0, [0, 12, false], null], "\"dog\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM Has_Pet \nJOIN Pets ON Has_Pet.PetID=Pets.PetID \nJOIN Student ON Has_Pet.StuID=Student.StuID \nWHERE Student.Sex='F' AND Pets.PetType='dog';"}
{"db_id": "pets_1", "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "query_toks": ["SELECT", "DISTINCT", "T1.Fname", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'cat", "'", "OR", "T3.pettype", "=", "'dog", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", "or", "t3", ".", "pettype", "=", "value"], "question": "Find the first name of students who have cat or dog.", "question_toks": ["Find", "the", "first", "name", "of", "students", "who", "have", "cat", "or", "dog."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [true, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null], "or", [false, 2, [0, [0, 12, false], null], "\"dog\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Student.Fname\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType IN ('cat', 'dog');"}
{"db_id": "pets_1", "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "query_toks": ["SELECT", "DISTINCT", "T1.Fname", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'cat", "'", "OR", "T3.pettype", "=", "'dog", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", "or", "t3", ".", "pettype", "=", "value"], "question": "What are the first names of every student who has a cat or dog?", "question_toks": ["What", "are", "the", "first", "names", "of", "every", "student", "who", "has", "a", "cat", "or", "dog?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [true, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null], "or", [false, 2, [0, [0, 12, false], null], "\"dog\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Student.Fname\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType IN ('cat', 'dog')"}
{"db_id": "pets_1", "query": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'", "query_toks": ["select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"cat\"", "intersect", "select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"dog\""], "query_toks_no_value": ["select", "t1", ".", "fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", "intersect", "select", "t1", ".", "fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value"], "question": "Find the name of students who have both cat and dog.", "question_toks": ["Find", "the", "name", "of", "students", "who", "have", "both", "cat", "and", "dog."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"dog\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "Student.Fname, Student.LName\n FROM Student\n JOIN Has_Pet ON Student.StuID = Has_Pet.StuID\n JOIN Pets ON Has_Pet.PetID = Pets.PetID\n WHERE Pets.PetType = 'cat' AND Student.StuID IN (\n   SELECT Has_Pet.StuID\n   FROM Has_Pet\n   JOIN Pets ON Has_Pet.PetID = Pets.PetID\n   WHERE Pets.PetType = 'dog'\n )"}
{"db_id": "pets_1", "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "query_toks": ["SELECT", "T1.Fname", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'cat", "'", "INTERSECT", "SELECT", "T1.Fname", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'dog", "'"], "query_toks_no_value": ["select", "t1", ".", "fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", "intersect", "select", "t1", ".", "fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value"], "question": "What are the students' first names who have both cats and dogs?", "question_toks": ["What", "are", "the", "students'", "first", "names", "who", "have", "both", "cats", "and", "dogs?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"dog\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "Student.Fname\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'cat' AND Student.StuID IN (\n  SELECT Has_Pet.StuID\n  FROM Has_Pet\n  JOIN Pets ON Has_Pet.PetID = Pets.PetID\n  WHERE Pets.PetType = 'dog'\n)"}
{"db_id": "pets_1", "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "query_toks": ["SELECT", "major", ",", "age", "FROM", "student", "WHERE", "stuid", "NOT", "IN", "(", "SELECT", "T1.stuid", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'cat", "'", ")"], "query_toks_no_value": ["select", "major", ",", "age", "from", "student", "where", "stuid", "not", "in", "(", "select", "t1", ".", "stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", ")"], "question": "Find the major and age of students who do not have a cat.", "question_toks": ["Find", "the", "major", "and", "age", "of", "students", "who", "do", "not", "have", "a", "cat."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Student.Major, Student.Age \n FROM Student \n WHERE Student.StuID NOT IN \n (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID=Pets.PetID WHERE Pets.PetType='cat');"}
{"db_id": "pets_1", "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "query_toks": ["SELECT", "major", ",", "age", "FROM", "student", "WHERE", "stuid", "NOT", "IN", "(", "SELECT", "T1.stuid", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'cat", "'", ")"], "query_toks_no_value": ["select", "major", ",", "age", "from", "student", "where", "stuid", "not", "in", "(", "select", "t1", ".", "stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", ")"], "question": "What major is every student who does not own a cat, and also how old are they?", "question_toks": ["What", "major", "is", "every", "student", "who", "does", "not", "own", "a", "cat,", "and", "also", "how", "old", "are", "they?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Student.Major, Student.Age \n FROM Student \n WHERE Student.StuID NOT IN \n (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID=Pets.PetID WHERE Pets.PetType='cat');"}
{"db_id": "pets_1", "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "query_toks": ["SELECT", "stuid", "FROM", "student", "EXCEPT", "SELECT", "T1.stuid", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'cat", "'"], "query_toks_no_value": ["select", "stuid", "from", "student", "except", "select", "t1", ".", "stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value"], "question": "Find the id of students who do not have a cat.", "question_toks": ["Find", "the", "id", "of", "students", "who", "do", "not", "have", "a", "cat."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "Prediction": "Student.StuID \nFROM Student \nWHERE Student.StuID NOT IN \n(SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID=Pets.PetID WHERE Pets.PetType='cat');"}
{"db_id": "pets_1", "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "query_toks": ["SELECT", "stuid", "FROM", "student", "EXCEPT", "SELECT", "T1.stuid", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'cat", "'"], "query_toks_no_value": ["select", "stuid", "from", "student", "except", "select", "t1", ".", "stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value"], "question": "What are the ids of the students who do not own cats?", "question_toks": ["What", "are", "the", "ids", "of", "the", "students", "who", "do", "not", "own", "cats?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "Prediction": "Student.StuID \nFROM Student \nWHERE Student.StuID NOT IN \n(SELECT Has_Pet.StuID FROM Has_Pet, Pets WHERE Has_Pet.PetID=Pets.PetID AND Pets.PetType='cat');"}
{"db_id": "pets_1", "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "query_toks": ["SELECT", "T1.fname", ",", "T1.age", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'dog", "'", "AND", "T1.stuid", "NOT", "IN", "(", "SELECT", "T1.stuid", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'cat", "'", ")"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", "and", "t1", ".", "stuid", "not", "in", "(", "select", "t1", ".", "stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", ")"], "question": "Find the first name and age of students who have a dog but do not have a cat.", "question_toks": ["Find", "the", "first", "name", "and", "age", "of", "students", "who", "have", "a", "dog", "but", "do", "not", "have", "a", "cat."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"dog\"", null], "and", [true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Student.Fname, Student.Age\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'dog'\nAND Student.StuID NOT IN (\n    SELECT Student.StuID\n    FROM Student\n    JOIN Has_Pet ON Student.StuID = Has_Pet.StuID\n    JOIN Pets ON Has_Pet.PetID = Pets.PetID\n    WHERE Pets.PetType = 'cat'\n)"}
{"db_id": "pets_1", "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "query_toks": ["SELECT", "T1.fname", ",", "T1.age", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'dog", "'", "AND", "T1.stuid", "NOT", "IN", "(", "SELECT", "T1.stuid", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'cat", "'", ")"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", "and", "t1", ".", "stuid", "not", "in", "(", "select", "t1", ".", "stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", ")"], "question": "What is the first name of every student who has a dog but does not have a cat?", "question_toks": ["What", "is", "the", "first", "name", "of", "every", "student", "who", "has", "a", "dog", "but", "does", "not", "have", "a", "cat?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"dog\"", null], "and", [true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Student.Fname \nFROM Student \nJOIN Has_Pet ON Student.StuID=Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID=Pets.PetID \nWHERE Pets.PetType='dog' AND Student.StuID NOT IN \n(SELECT Student.StuID FROM Student \nJOIN Has_Pet ON Student.StuID=Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID=Pets.PetID \nWHERE Pets.PetType='cat')"}
{"db_id": "pets_1", "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "query_toks": ["SELECT", "pettype", ",", "weight", "FROM", "pets", "ORDER", "BY", "pet_age", "LIMIT", "1"], "query_toks_no_value": ["select", "pettype", ",", "weight", "from", "pets", "order", "by", "pet_age", "limit", "value"], "question": "Find the type and weight of the youngest pet.", "question_toks": ["Find", "the", "type", "and", "weight", "of", "the", "youngest", "pet."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]], [0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Pets.PetType, Pets.weight \n FROM Pets \n WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets);"}
{"db_id": "pets_1", "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "query_toks": ["SELECT", "pettype", ",", "weight", "FROM", "pets", "ORDER", "BY", "pet_age", "LIMIT", "1"], "query_toks_no_value": ["select", "pettype", ",", "weight", "from", "pets", "order", "by", "pet_age", "limit", "value"], "question": "What type of pet is the youngest animal, and how much does it weigh?", "question_toks": ["What", "type", "of", "pet", "is", "the", "youngest", "animal,", "and", "how", "much", "does", "it", "weigh?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]], [0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Pets.PetType, Pets.weight \n FROM Pets \n WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)"}
{"db_id": "pets_1", "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "query_toks": ["SELECT", "petid", ",", "weight", "FROM", "pets", "WHERE", "pet_age", ">", "1"], "query_toks_no_value": ["select", "petid", ",", "weight", "from", "pets", "where", "pet_age", ">", "value"], "question": "Find the id and weight of all pets that is older than 1.", "question_toks": ["Find", "the", "id", "and", "weight", "of", "all", "pets", "that", "is", "older", "than", "1."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 14, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 1.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "PetID, weight FROM Pets WHERE pet_age > 1;"}
{"db_id": "pets_1", "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "query_toks": ["SELECT", "petid", ",", "weight", "FROM", "pets", "WHERE", "pet_age", ">", "1"], "query_toks_no_value": ["select", "petid", ",", "weight", "from", "pets", "where", "pet_age", ">", "value"], "question": "What is the id and weight of every pet who is over 1 year old?", "question_toks": ["What", "is", "the", "id", "and", "weight", "of", "every", "pet", "who", "is", "over", "1", "year", "old?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 14, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 1.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Pets.PetID, Pets.weight \n FROM Pets \n WHERE Pets.pet_age > 1;"}
{"db_id": "pets_1", "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "query_toks": ["SELECT", "T1.lname", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pet_age", "=", "3", "AND", "T3.pettype", "=", "'cat", "'"], "query_toks_no_value": ["select", "t1", ".", "lname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pet_age", "=", "value", "and", "t3", ".", "pettype", "=", "value"], "question": "Find the last name of the student who has a cat that is 3 years old.", "question_toks": ["Find", "the", "last", "name", "of", "the", "student", "who", "has", "a", "cat", "that", "is", "3", "years", "old."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], 3.0, null], "and", [false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Student.LName\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;"}
{"db_id": "pets_1", "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "query_toks": ["SELECT", "T1.lname", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pet_age", "=", "3", "AND", "T3.pettype", "=", "'cat", "'"], "query_toks_no_value": ["select", "t1", ".", "lname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pet_age", "=", "value", "and", "t3", ".", "pettype", "=", "value"], "question": "What is the last name of the student who has a cat that is 3 years old?", "question_toks": ["What", "is", "the", "last", "name", "of", "the", "student", "who", "has", "a", "cat", "that", "is", "3", "years", "old?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], 3.0, null], "and", [false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Student.LName \nFROM Student \nJOIN Has_Pet ON Student.StuID=Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID=Pets.PetID \nWHERE Pets.PetType='cat' AND Pets.pet_age=3;"}
{"db_id": "pets_1", "query": "select avg(age) from student where stuid not in (select stuid from has_pet)", "query_toks": ["select", "avg", "(", "age", ")", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "has_pet", ")"], "query_toks_no_value": ["select", "avg", "(", "age", ")", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "has_pet", ")"], "question": "Find the average age of students who do not have any pet.", "question_toks": ["Find", "the", "average", "age", "of", "students", "who", "do", "not", "have", "any", "pet."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 4, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);"}
{"db_id": "pets_1", "query": "select avg(age) from student where stuid not in (select stuid from has_pet)", "query_toks": ["select", "avg", "(", "age", ")", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "has_pet", ")"], "query_toks_no_value": ["select", "avg", "(", "age", ")", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "has_pet", ")"], "question": "What is the average age for all students who do not own any pets?", "question_toks": ["What", "is", "the", "average", "age", "for", "all", "students", "who", "do", "not", "own", "any", "pets?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 4, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);"}
{"db_id": "car_1", "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "query_toks": ["SELECT", "T1.FullName", ",", "T1.Id", ",", "count", "(", "*", ")", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Id", "=", "T2.Maker", "GROUP", "BY", "T1.Id", ";"], "query_toks_no_value": ["select", "t1", ".", "fullname", ",", "t1", ".", "id", ",", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "maker", "group", "by", "t1", ".", "id"], "question": "How many models does each manufacturer produce? List maker full name, id and the number.", "question_toks": ["How", "many", "models", "does", "each", "manufacturer", "produce?", "List", "maker", "full", "name,", "id", "and", "the", "number."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 6, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "car_makers.FullName, car_makers.Id, COUNT(car_names.Model) \n FROM car_makers \n JOIN car_names ON car_makers.Id = car_names.MakeId \n GROUP BY car_makers.Id;"}
{"db_id": "car_1", "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "query_toks": ["SELECT", "T1.FullName", ",", "T1.Id", ",", "count", "(", "*", ")", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Id", "=", "T2.Maker", "GROUP", "BY", "T1.Id", ";"], "query_toks_no_value": ["select", "t1", ".", "fullname", ",", "t1", ".", "id", ",", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "maker", "group", "by", "t1", ".", "id"], "question": "What is the full name of each car manufacturer, along with its id and how many models it produces?", "question_toks": ["What", "is", "the", "full", "name", "of", "each", "car", "manufacturer,", "along", "with", "its", "id", "and", "how", "many", "models", "it", "produces?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 6, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) \n FROM car_makers \n JOIN model_list ON car_makers.Id = model_list.Maker \n GROUP BY car_makers.Id;"}
{"db_id": "car_1", "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "query_toks": ["SELECT", "T1.model", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "WHERE", "T2.Weight", "<", "(", "SELECT", "avg", "(", "Weight", ")", "FROM", "CARS_DATA", ")"], "query_toks_no_value": ["select", "t1", ".", "model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "where", "t2", ".", "weight", "<", "(", "select", "avg", "(", "weight", ")", "from", "cars_data", ")"], "question": "Find the model of the car that is lighter than average .", "question_toks": ["Find", "the", "model", "of", "the", "car", "that", "is", "lighter", "than", "average", "."], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [[false, 4, [0, [0, 21, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 21, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Model FROM cars_data \nINNER JOIN car_names ON cars_data.Id=car_names.MakeId \nWHERE Weight < (SELECT AVG(Weight) FROM cars_data);"}
{"db_id": "car_1", "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "query_toks": ["SELECT", "T1.model", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "WHERE", "T2.Weight", "<", "(", "SELECT", "avg", "(", "Weight", ")", "FROM", "CARS_DATA", ")"], "query_toks_no_value": ["select", "t1", ".", "model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "where", "t2", ".", "weight", "<", "(", "select", "avg", "(", "weight", ")", "from", "cars_data", ")"], "question": "What is the model for the car that is lighter than the average?", "question_toks": ["What", "is", "the", "model", "for", "the", "car", "that", "is", "lighter", "than", "the", "average?"], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [[false, 4, [0, [0, 21, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 21, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Model FROM cars_data, car_names WHERE cars_data.Id=car_names.MakeId AND Weight<(SELECT AVG(Weight) FROM cars_data);"}
{"db_id": "car_1", "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "query_toks": ["SELECT", "DISTINCT", "T1.Maker", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Id", "=", "T2.Maker", "JOIN", "CAR_NAMES", "AS", "T3", "ON", "T2.model", "=", "T3.model", "JOIN", "CARS_DATA", "AS", "T4", "ON", "T3.MakeId", "=", "T4.id", "WHERE", "T4.year", "=", "'1970", "'", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "maker", "join", "car_names", "as", "t3", "on", "t2", ".", "model", "=", "t3", ".", "model", "join", "cars_data", "as", "t4", "on", "t3", ".", "makeid", "=", "t4", ".", "id", "where", "t4", ".", "year", "=", "value"], "question": "Find the name of the makers that produced some cars in 1970?", "question_toks": ["Find", "the", "name", "of", "the", "makers", "that", "produced", "some", "cars", "in", "1970?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3], ["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null], "and", [false, 2, [0, [0, 12, false], null], [0, 14, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [true, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], "\"1970\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "car_makers.Maker \n FROM car_makers \n JOIN cars_data ON car_makers.Id = cars_data.Id \n WHERE cars_data.Year = 1970;"}
{"db_id": "car_1", "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "query_toks": ["SELECT", "DISTINCT", "T1.Maker", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Id", "=", "T2.Maker", "JOIN", "CAR_NAMES", "AS", "T3", "ON", "T2.model", "=", "T3.model", "JOIN", "CARS_DATA", "AS", "T4", "ON", "T3.MakeId", "=", "T4.id", "WHERE", "T4.year", "=", "'1970", "'", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "maker", "join", "car_names", "as", "t3", "on", "t2", ".", "model", "=", "t3", ".", "model", "join", "cars_data", "as", "t4", "on", "t3", ".", "makeid", "=", "t4", ".", "id", "where", "t4", ".", "year", "=", "value"], "question": "What is the name of the different car makers who produced a car in 1970?", "question_toks": ["What", "is", "the", "name", "of", "the", "different", "car", "makers", "who", "produced", "a", "car", "in", "1970?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3], ["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null], "and", [false, 2, [0, [0, 12, false], null], [0, 14, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [true, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], "\"1970\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "DISTINCT Maker FROM car_makers \nINNER JOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE Year = 1970;"}
{"db_id": "car_1", "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "query_toks": ["SELECT", "T2.Make", ",", "T1.Year", "FROM", "CARS_DATA", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.Id", "=", "T2.MakeId", "WHERE", "T1.Year", "=", "(", "SELECT", "min", "(", "YEAR", ")", "FROM", "CARS_DATA", ")", ";"], "query_toks_no_value": ["select", "t2", ".", "make", ",", "t1", ".", "year", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "makeid", "where", "t1", ".", "year", "=", "(", "select", "min", "(", "year", ")", "from", "cars_data", ")"], "question": "Find the make and production time of the cars that were produced in the earliest ?", "question_toks": ["Find", "the", "make", "and", "production", "time", "of", "the", "cars", "that", "were", "produced", "in", "the", "earliest", "?"], "sql": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[2, [0, [0, 23, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "car_makers.Maker, cars_data.Year \n FROM car_makers \n JOIN car_names ON car_makers.Id = car_names.MakeId \n JOIN cars_data ON car_names.MakeId = cars_data.Id \n WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data);"}
{"db_id": "car_1", "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "query_toks": ["SELECT", "T2.Make", ",", "T1.Year", "FROM", "CARS_DATA", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.Id", "=", "T2.MakeId", "WHERE", "T1.Year", "=", "(", "SELECT", "min", "(", "YEAR", ")", "FROM", "CARS_DATA", ")", ";"], "query_toks_no_value": ["select", "t2", ".", "make", ",", "t1", ".", "year", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "makeid", "where", "t1", ".", "year", "=", "(", "select", "min", "(", "year", ")", "from", "cars_data", ")"], "question": "What is the maker of the carr produced in the earliest  and what  year was it?", "question_toks": ["What", "is", "the", "maker", "of", "the", "carr", "produced", "in", "the", "earliest", "and", "what", "year", "was", "it?"], "sql": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[2, [0, [0, 23, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "car_makers.Maker, cars_data.Year\n FROM car_makers\n JOIN cars_data ON car_makers.Id = cars_data.Id\n WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data);"}
{"db_id": "car_1", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "query_toks": ["SELECT", "DISTINCT", "T1.model", "FROM", "MODEL_LIST", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.model", "=", "T2.model", "JOIN", "CARS_DATA", "AS", "T3", "ON", "T2.MakeId", "=", "T3.id", "WHERE", "T3.year", ">", "1980", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "model", "=", "t2", ".", "model", "join", "cars_data", "as", "t3", "on", "t2", ".", "makeid", "=", "t3", ".", "id", "where", "t3", ".", "year", ">", "value"], "question": "Which distinct car models are the produced after 1980?", "question_toks": ["Which", "distinct", "car", "models", "are", "the", "produced", "after", "1980?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 14, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [true, [[0, [0, [0, 12, false], null]]]], "where": [[false, 3, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "DISTINCT Model FROM cars_data JOIN car_names ON cars_data.Id=car_names.MakeId WHERE Year>1980;"}
{"db_id": "car_1", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "query_toks": ["SELECT", "DISTINCT", "T1.model", "FROM", "MODEL_LIST", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.model", "=", "T2.model", "JOIN", "CARS_DATA", "AS", "T3", "ON", "T2.MakeId", "=", "T3.id", "WHERE", "T3.year", ">", "1980", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "model", "=", "t2", ".", "model", "join", "cars_data", "as", "t3", "on", "t2", ".", "makeid", "=", "t3", ".", "id", "where", "t3", ".", "year", ">", "value"], "question": "What are the different models for the cards produced after 1980?", "question_toks": ["What", "are", "the", "different", "models", "for", "the", "cards", "produced", "after", "1980?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 14, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [true, [[0, [0, [0, 12, false], null]]]], "where": [[false, 3, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Model FROM car_names JOIN cars_data ON car_names.MakeId=cars_data.Id WHERE Year>1980;"}
{"db_id": "car_1", "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "query_toks": ["SELECT", "T2.CountryName", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "COUNTRIES", "AS", "T2", "ON", "T1.Country", "=", "T2.CountryId", "GROUP", "BY", "T1.Country", "ORDER", "BY", "Count", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "countryname", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1", ".", "country", "=", "t2", ".", "countryid", "group", "by", "t1", ".", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which of the nations has the most car makers? List the country name.", "question_toks": ["Which", "of", "the", "nations", "has", "the", "most", "car", "makers?", "List", "the", "country", "name."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 3, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "countries.CountryName \nFROM countries \nJOIN car_makers ON countries.CountryId = car_makers.Country \nGROUP BY countries.CountryName \nORDER BY COUNT(car_makers.Id) DESC \nLIMIT 1;"}
{"db_id": "car_1", "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "query_toks": ["SELECT", "T2.CountryName", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "COUNTRIES", "AS", "T2", "ON", "T1.Country", "=", "T2.CountryId", "GROUP", "BY", "T1.Country", "ORDER", "BY", "Count", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "countryname", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1", ".", "country", "=", "t2", ".", "countryid", "group", "by", "t1", ".", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the nation with the most car makers?", "question_toks": ["What", "is", "the", "name", "of", "the", "nation", "with", "the", "most", "car", "makers?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 3, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "countries.CountryName \nFROM countries \nJOIN car_makers ON countries.CountryId = car_makers.Country \nGROUP BY countries.CountryName \nORDER BY COUNT(car_makers.Id) DESC \nLIMIT 1;"}
{"db_id": "car_1", "query": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;", "query_toks": ["select", "count", "(", "*", ")", ",", "t2.fullname", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.maker", "=", "t2.id", "group", "by", "t2.id", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t2", ".", "fullname", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "maker", "=", "t2", ".", "id", "group", "by", "t2", ".", "id"], "question": "How many car models are produced by each manufacturer? List the count and the maker full name.", "question_toks": ["How", "many", "car", "models", "are", "produced", "by", "each", "manufacturer?", "List", "the", "count", "and", "the", "maker", "full", "name."], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "car_makers.FullName, COUNT(car_names.Model) \n FROM car_makers \n JOIN car_names ON car_makers.Id = car_names.MakeId \n GROUP BY car_makers.Id;"}
{"db_id": "car_1", "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "query_toks": ["SELECT", "Count", "(", "*", ")", ",", "T2.FullName", ",", "T2.id", "FROM", "MODEL_LIST", "AS", "T1", "JOIN", "CAR_MAKERS", "AS", "T2", "ON", "T1.Maker", "=", "T2.Id", "GROUP", "BY", "T2.id", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t2", ".", "fullname", ",", "t2", ".", "id", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "maker", "=", "t2", ".", "id", "group", "by", "t2", ".", "id"], "question": "What is the number of car models that are produced by each company and what is the id and full name of each maker?", "question_toks": ["What", "is", "the", "number", "of", "car", "models", "that", "are", "produced", "by", "each", "company", "and", "what", "is", "the", "id", "and", "full", "name", "of", "each", "maker?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 8, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "car_makers.Id, car_makers.FullName, COUNT(car_names.Model) \n FROM car_makers \n JOIN car_names ON car_makers.Id = car_names.MakeId \n GROUP BY car_makers.Id;"}
{"db_id": "car_1", "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "query_toks": ["SELECT", "T1.Accelerate", "FROM", "CARS_DATA", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.Id", "=", "T2.MakeId", "WHERE", "T2.Make", "=", "'amc", "hornet", "sportabout", "(", "sw", ")", "'", ";"], "query_toks_no_value": ["select", "t1", ".", "accelerate", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "makeid", "where", "t2", ".", "make", "=", "value"], "question": "What is the accelerate of amc hornet sportabout (sw)?", "question_toks": ["What", "is", "the", "accelerate", "of", "amc", "hornet", "sportabout", "(sw)?"], "sql": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 22, false], null]]]], "where": [[false, 2, [0, [0, 15, false], null], "\"amc hornet sportabout (sw)\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Accelerate \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN car_makers ON car_names.Make = car_makers.Maker \nWHERE car_makers.FullName = 'American Motors Corporation' \nAND car_names.Model = 'Hornet Sportabout (sw)';"}
{"db_id": "car_1", "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "COUNTRIES", "AS", "T2", "ON", "T1.Country", "=", "T2.CountryId", "WHERE", "T2.CountryName", "=", "'france", "'", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1", ".", "country", "=", "t2", ".", "countryid", "where", "t2", ".", "countryname", "=", "value"], "question": "How many car makers are there in france?", "question_toks": ["How", "many", "car", "makers", "are", "there", "in", "france?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 3, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"france\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM car_makers \nWHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France');"}
{"db_id": "car_1", "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "COUNTRIES", "AS", "T2", "ON", "T1.Country", "=", "T2.CountryId", "WHERE", "T2.CountryName", "=", "'france", "'", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1", ".", "country", "=", "t2", ".", "countryid", "where", "t2", ".", "countryname", "=", "value"], "question": "What is the number of makers of care in France?", "question_toks": ["What", "is", "the", "number", "of", "makers", "of", "care", "in", "France?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 3, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"france\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(DISTINCT car_makers.Id) \nFROM car_makers \nJOIN countries ON car_makers.Country = countries.CountryId \nWHERE countries.CountryName = 'France';"}
{"db_id": "car_1", "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "MODEL_LIST", "AS", "T1", "JOIN", "CAR_MAKERS", "AS", "T2", "ON", "T1.Maker", "=", "T2.Id", "JOIN", "COUNTRIES", "AS", "T3", "ON", "T2.Country", "=", "T3.CountryId", "WHERE", "T3.CountryName", "=", "'usa", "'", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "maker", "=", "t2", ".", "id", "join", "countries", "as", "t3", "on", "t2", ".", "country", "=", "t3", ".", "countryid", "where", "t3", ".", "countryname", "=", "value"], "question": "How many car models are produced in the usa?", "question_toks": ["How", "many", "car", "models", "are", "produced", "in", "the", "usa?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 3, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"usa\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM cars_data \nJOIN car_makers ON cars_data.Id = car_makers.Id \nWHERE car_makers.Country = 'USA';"}
{"db_id": "car_1", "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "MODEL_LIST", "AS", "T1", "JOIN", "CAR_MAKERS", "AS", "T2", "ON", "T1.Maker", "=", "T2.Id", "JOIN", "COUNTRIES", "AS", "T3", "ON", "T2.Country", "=", "T3.CountryId", "WHERE", "T3.CountryName", "=", "'usa", "'", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "maker", "=", "t2", ".", "id", "join", "countries", "as", "t3", "on", "t2", ".", "country", "=", "t3", ".", "countryid", "where", "t3", ".", "countryname", "=", "value"], "question": "What is the count of the car models produced in the United States?", "question_toks": ["What", "is", "the", "count", "of", "the", "car", "models", "produced", "in", "the", "United", "States?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 3, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"usa\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM cars_data \nINNER JOIN car_makers ON cars_data.Id = car_makers.Id \nINNER JOIN countries ON car_makers.Country = countries.CountryId \nWHERE countries.CountryName = 'United States';"}
{"db_id": "car_1", "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "query_toks": ["SELECT", "avg", "(", "mpg", ")", "FROM", "CARS_DATA", "WHERE", "Cylinders", "=", "4", ";"], "query_toks_no_value": ["select", "avg", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "value"], "question": "What is the average miles per gallon(mpg) of the 4 CYL cars?", "question_toks": ["What", "is", "the", "average", "miles", "per", "gallon(mpg)", "of", "the", "4", "CYL", "cars?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 17, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(MPG) FROM cars_data WHERE Cylinders=4;"}
{"db_id": "car_1", "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "query_toks": ["select", "min", "(", "weight", ")", "from", "cars_data", "where", "cylinders", "=", "8", "and", "year", "=", "1974"], "query_toks_no_value": ["select", "min", "(", "weight", ")", "from", "cars_data", "where", "cylinders", "=", "value", "and", "year", "=", "value"], "question": "What is the smallest weight of the 8 CYL car produced on 1974 ?", "question_toks": ["What", "is", "the", "smallest", "weight", "of", "the", "8", "CYL", "car", "produced", "on", "1974", "?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[2, [0, [0, 21, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 8.0, null], "and", [false, 2, [0, [0, 23, false], null], 1974.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "MIN(Weight) FROM cars_data WHERE Cylinders=8 AND Year=1974;"}
{"db_id": "car_1", "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "query_toks": ["SELECT", "T1.CountryName", ",", "T1.CountryId", "FROM", "COUNTRIES", "AS", "T1", "JOIN", "CAR_MAKERS", "AS", "T2", "ON", "T1.CountryId", "=", "T2.Country", "GROUP", "BY", "T1.CountryId", "HAVING", "count", "(", "*", ")", ">", "=", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "countryname", ",", "t1", ".", "countryid", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "group", "by", "t1", ".", "countryid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the nations having at least one car maker? List name and id.", "question_toks": ["What", "are", "the", "nations", "having", "at", "least", "one", "car", "maker?", "List", "name", "and", "id."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 5, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "countries.CountryId, countries.CountryName \n FROM countries \n INNER JOIN car_makers ON countries.CountryId = car_makers.Country \n GROUP BY countries.CountryId \n HAVING COUNT(DISTINCT car_makers.Id) >= 1;"}
{"db_id": "car_1", "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "query_toks": ["SELECT", "T1.CountryName", ",", "T1.CountryId", "FROM", "COUNTRIES", "AS", "T1", "JOIN", "CAR_MAKERS", "AS", "T2", "ON", "T1.CountryId", "=", "T2.Country", "GROUP", "BY", "T1.CountryId", "HAVING", "count", "(", "*", ")", ">", "=", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "countryname", ",", "t1", ".", "countryid", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "group", "by", "t1", ".", "countryid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names and ids of all nations with at least one car maker?", "question_toks": ["What", "are", "the", "names", "and", "ids", "of", "all", "nations", "with", "at", "least", "one", "car", "maker?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 5, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "countries.CountryId, countries.CountryName \n FROM countries \n INNER JOIN car_makers ON countries.CountryId = car_makers.Country \n GROUP BY countries.CountryId;"}
{"db_id": "car_1", "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CARS_DATA", "WHERE", "horsepower", ">", "150", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "horsepower", ">", "value"], "question": "What is the number of the cars with  more than 150 hp?", "question_toks": ["What", "is", "the", "number", "of", "the", "cars", "with", "more", "than", "150", "hp?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 20, false], null], 150.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM cars_data WHERE Horsepower > 150;"}
{"db_id": "car_1", "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CARS_DATA", "WHERE", "horsepower", ">", "150", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "horsepower", ">", "value"], "question": "What is the number of cars with over 150 hp?", "question_toks": ["What", "is", "the", "number", "of", "cars", "with", "over", "150", "hp?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 20, false], null], 150.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM cars_data WHERE Horsepower > 150;"}
{"db_id": "car_1", "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "query_toks": ["SELECT", "T1.CountryName", "FROM", "COUNTRIES", "AS", "T1", "JOIN", "CONTINENTS", "AS", "T2", "ON", "T1.Continent", "=", "T2.ContId", "JOIN", "CAR_MAKERS", "AS", "T3", "ON", "T1.CountryId", "=", "T3.Country", "WHERE", "T2.Continent", "=", "'europe", "'", "GROUP", "BY", "T1.CountryName", "HAVING", "count", "(", "*", ")", ">", "=", "3", ";"], "query_toks_no_value": ["select", "t1", ".", "countryname", "from", "countries", "as", "t1", "join", "continents", "as", "t2", "on", "t1", ".", "continent", "=", "t2", ".", "contid", "join", "car_makers", "as", "t3", "on", "t1", ".", "countryid", "=", "t3", ".", "country", "where", "t2", ".", "continent", "=", "value", "group", "by", "t1", ".", "countryname", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which countries in europe have at least 3 car manufacturers?", "question_toks": ["Which", "countries", "in", "europe", "have", "at", "least", "3", "car", "manufacturers?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"europe\"", null]], "groupBy": [[0, 4, false]], "having": [[false, 5, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "countries.CountryName \nFROM countries \nJOIN car_makers ON countries.CountryId = car_makers.Country \nWHERE countries.Continent = 'Europe' \nGROUP BY countries.CountryName \nHAVING COUNT(car_makers.Id) >= 3;"}
{"db_id": "car_1", "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "query_toks": ["SELECT", "T1.CountryName", "FROM", "COUNTRIES", "AS", "T1", "JOIN", "CONTINENTS", "AS", "T2", "ON", "T1.Continent", "=", "T2.ContId", "JOIN", "CAR_MAKERS", "AS", "T3", "ON", "T1.CountryId", "=", "T3.Country", "WHERE", "T2.Continent", "=", "'europe", "'", "GROUP", "BY", "T1.CountryName", "HAVING", "count", "(", "*", ")", ">", "=", "3", ";"], "query_toks_no_value": ["select", "t1", ".", "countryname", "from", "countries", "as", "t1", "join", "continents", "as", "t2", "on", "t1", ".", "continent", "=", "t2", ".", "contid", "join", "car_makers", "as", "t3", "on", "t1", ".", "countryid", "=", "t3", ".", "country", "where", "t2", ".", "continent", "=", "value", "group", "by", "t1", ".", "countryname", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names of all European countries with at least 3 manufacturers?", "question_toks": ["What", "are", "the", "names", "of", "all", "European", "countries", "with", "at", "least", "3", "manufacturers?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"europe\"", null]], "groupBy": [[0, 4, false]], "having": [[false, 5, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "countries.CountryName \nFROM countries \nINNER JOIN car_makers ON countries.CountryId = car_makers.Country \nWHERE countries.Continent = 'Europe' \nGROUP BY countries.CountryName \nHAVING COUNT(DISTINCT car_makers.Maker) >= 3;"}
{"db_id": "car_1", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "query_toks": ["SELECT", "T1.Model", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "ORDER", "BY", "T2.mpg", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "order", "by", "t2", ".", "mpg", "desc", "limit", "value"], "question": "Which model saves the most gasoline?", "question_toks": ["Which", "model", "saves", "the", "most", "gasoline?"], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 17, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Model FROM cars_data \nWHERE MPG = (SELECT MAX(MPG) FROM cars_data);"}
{"db_id": "car_1", "query": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;", "query_toks": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "order", "by", "t2.mpg", "desc", "limit", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "order", "by", "t2", ".", "mpg", "desc", "limit", "value"], "question": "What is the car wmodel that is the most fuel efficient?", "question_toks": ["What", "is", "the", "car", "wmodel", "that", "is", "the", "most", "fuel", "efficient?"], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 17, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Model FROM cars_data JOIN car_names ON cars_data.Id=car_names.MakeId ORDER BY MPG DESC LIMIT 1;"}
{"db_id": "car_1", "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "query_toks": ["SELECT", "avg", "(", "horsepower", ")", "FROM", "CARS_DATA", "WHERE", "YEAR", "<", "1980", ";"], "query_toks_no_value": ["select", "avg", "(", "horsepower", ")", "from", "cars_data", "where", "year", "<", "value"], "question": "What is the average horsepower of the cars before 1980?", "question_toks": ["What", "is", "the", "average", "horsepower", "of", "the", "cars", "before", "1980?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 20, false], null]]]], "where": [[false, 4, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(Horsepower) FROM cars_data WHERE Year < 1980;"}
{"db_id": "car_1", "query": "select avg(horsepower) from cars_data where year  <  1980;", "query_toks": ["select", "avg", "(", "horsepower", ")", "from", "cars_data", "where", "year", "<", "1980", ";"], "query_toks_no_value": ["select", "avg", "(", "horsepower", ")", "from", "cars_data", "where", "year", "<", "value"], "question": "What is the average horsepower for all cards produced before 1980?", "question_toks": ["What", "is", "the", "average", "horsepower", "for", "all", "cards", "produced", "before", "1980?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 20, false], null]]]], "where": [[false, 4, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(Horsepower) FROM cars_data WHERE Year < 1980;"}
{"db_id": "car_1", "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "query_toks": ["SELECT", "avg", "(", "T2.edispl", ")", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "WHERE", "T1.Model", "=", "'volvo", "'", ";"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "edispl", ")", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "where", "t1", ".", "model", "=", "value"], "question": "What is the average edispl of the cars of  volvo?", "question_toks": ["What", "is", "the", "average", "edispl", "of", "the", "cars", "of", "volvo?"], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[5, [0, [0, 19, false], null]]]], "where": [[false, 2, [0, [0, 14, false], null], "\"volvo\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(Edispl) FROM cars_data \nINNER JOIN car_makers ON cars_data.Id = car_makers.Id \nWHERE car_makers.Maker = 'volvo';"}
{"db_id": "car_1", "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "query_toks": ["SELECT", "avg", "(", "T2.edispl", ")", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "WHERE", "T1.Model", "=", "'volvo", "'", ";"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "edispl", ")", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "where", "t1", ".", "model", "=", "value"], "question": "What is the average edispl for all volvos?", "question_toks": ["What", "is", "the", "average", "edispl", "for", "all", "volvos?"], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[5, [0, [0, 19, false], null]]]], "where": [[false, 2, [0, [0, 14, false], null], "\"volvo\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(cars_data.Edispl) FROM cars_data \nJOIN car_names ON cars_data.Id=car_names.MakeId \nJOIN car_makers ON car_names.Make=car_makers.Maker \nWHERE car_makers.FullName LIKE '%Volvo%';"}
{"db_id": "car_1", "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "query_toks": ["SELECT", "Model", "FROM", "CAR_NAMES", "GROUP", "BY", "Model", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "model", "from", "car_names", "group", "by", "model", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What car has the most different versions?", "question_toks": ["What", "car", "has", "the", "most", "different", "versions?"], "sql": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [[0, 14, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "car_names.Make, COUNT(DISTINCT car_names.Model) AS num_models\n FROM car_names\n GROUP BY car_names.Make\n ORDER BY num_models DESC\n LIMIT 1;"}
{"db_id": "car_1", "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CARS_DATA", "WHERE", "YEAR", "=", "1980", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "year", "=", "value"], "question": "how many cars were produced in 1980?", "question_toks": ["how", "many", "cars", "were", "produced", "in", "1980?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM cars_data WHERE Year=1980;"}
{"db_id": "car_1", "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CARS_DATA", "WHERE", "YEAR", "=", "1980", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "year", "=", "value"], "question": "In 1980, how many cars were made?", "question_toks": ["In", "1980,", "how", "many", "cars", "were", "made?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM cars_data WHERE Year=1980;"}
{"db_id": "car_1", "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Id", "=", "T2.Maker", "WHERE", "T1.FullName", "=", "'American", "Motor", "Company", "'", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "maker", "where", "t1", ".", "fullname", "=", "value"], "question": "How many car models were produced by American Motor Company?", "question_toks": ["How", "many", "car", "models", "were", "produced", "by", "American", "Motor", "Company?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"American Motor Company\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM car_names \nJOIN car_makers ON car_names.MakeId = car_makers.Id \nWHERE car_makers.Maker = 'American Motor Company';"}
{"db_id": "car_1", "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Id", "=", "T2.Maker", "WHERE", "T1.FullName", "=", "'American", "Motor", "Company", "'", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "maker", "where", "t1", ".", "fullname", "=", "value"], "question": "What is the number of car models created by American Motor Company?", "question_toks": ["What", "is", "the", "number", "of", "car", "models", "created", "by", "American", "Motor", "Company?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"American Motor Company\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) \nFROM car_names \nWHERE Make = 'American Motor Company';"}
{"db_id": "car_1", "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "query_toks": ["SELECT", "T1.FullName", ",", "T1.Id", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Id", "=", "T2.Maker", "GROUP", "BY", "T1.Id", "HAVING", "count", "(", "*", ")", ">", "3", ";"], "query_toks_no_value": ["select", "t1", ".", "fullname", ",", "t1", ".", "id", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "maker", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", ">", "value"], "question": "Which manufacturers designed more than 3 car models? List full name and the id.", "question_toks": ["Which", "manufacturers", "designed", "more", "than", "3", "car", "models?", "List", "full", "name", "and", "the", "id."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 3, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "car_makers.Id, car_makers.FullName \n FROM car_makers \n JOIN model_list ON car_makers.Id = model_list.Maker \n GROUP BY car_makers.Id \n HAVING COUNT(model_list.ModelId) > 3;"}
{"db_id": "car_1", "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "query_toks": ["SELECT", "T1.FullName", ",", "T1.Id", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Id", "=", "T2.Maker", "GROUP", "BY", "T1.Id", "HAVING", "count", "(", "*", ")", ">", "3", ";"], "query_toks_no_value": ["select", "t1", ".", "fullname", ",", "t1", ".", "id", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "maker", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names and ids of all car companies with more than 3 models?", "question_toks": ["What", "are", "the", "names", "and", "ids", "of", "all", "car", "companies", "with", "more", "than", "3", "models?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 3, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "car_makers.Id, car_makers.Maker \n FROM car_makers \n INNER JOIN car_names ON car_makers.Id = car_names.MakeId \n GROUP BY car_makers.Id \n HAVING COUNT(car_names.Model) > 3;"}
{"db_id": "car_1", "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "query_toks": ["SELECT", "DISTINCT", "T2.Model", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Model", "=", "T2.Model", "JOIN", "CAR_MAKERS", "AS", "T3", "ON", "T2.Maker", "=", "T3.Id", "JOIN", "CARS_DATA", "AS", "T4", "ON", "T1.MakeId", "=", "T4.Id", "WHERE", "T3.FullName", "=", "'General", "Motors", "'", "OR", "T4.weight", ">", "3500", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "model", "from", "car_names", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "model", "=", "t2", ".", "model", "join", "car_makers", "as", "t3", "on", "t2", ".", "maker", "=", "t3", ".", "id", "join", "cars_data", "as", "t4", "on", "t1", ".", "makeid", "=", "t4", ".", "id", "where", "t3", ".", "fullname", "=", "value", "or", "t4", ".", "weight", ">", "value"], "question": "Which distinctive models are produced by General Motors or heavier than 3500?", "question_toks": ["Which", "distinctive", "models", "are", "produced", "by", "General", "Motors", "or", "heavier", "than", "3500?"], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 3], ["table_unit", 2], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 14, false], null], [0, 12, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [true, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"General Motors\"", null], "or", [false, 3, [0, [0, 21, false], null], 3500.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "DISTINCT cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year\nFROM cars_data\nINNER JOIN car_makers ON cars_data.Id = car_makers.Id\nWHERE (car_makers.Maker = 'General Motors') OR (cars_data.Weight > 3500);"}
{"db_id": "car_1", "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "query_toks": ["SELECT", "DISTINCT", "T2.Model", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Model", "=", "T2.Model", "JOIN", "CAR_MAKERS", "AS", "T3", "ON", "T2.Maker", "=", "T3.Id", "JOIN", "CARS_DATA", "AS", "T4", "ON", "T1.MakeId", "=", "T4.Id", "WHERE", "T3.FullName", "=", "'General", "Motors", "'", "OR", "T4.weight", ">", "3500", ";"], "query_toks_no_value": ["select", "distinct", "t2", ".", "model", "from", "car_names", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "model", "=", "t2", ".", "model", "join", "car_makers", "as", "t3", "on", "t2", ".", "maker", "=", "t3", ".", "id", "join", "cars_data", "as", "t4", "on", "t1", ".", "makeid", "=", "t4", ".", "id", "where", "t3", ".", "fullname", "=", "value", "or", "t4", ".", "weight", ">", "value"], "question": "What are the different models created by either General Motors or over 3500 lbs?", "question_toks": ["What", "are", "the", "different", "models", "created", "by", "either", "General", "Motors", "or", "over", "3500", "lbs?"], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 3], ["table_unit", 2], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 14, false], null], [0, 12, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [true, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"General Motors\"", null], "or", [false, 3, [0, [0, 21, false], null], 3500.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year\n FROM cars_data\n JOIN car_makers ON cars_data.Id = car_makers.Id\n WHERE (car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500)"}
{"db_id": "car_1", "query": "select distinct year from cars_data where weight between 3000 and 4000;", "query_toks": ["select", "distinct", "year", "from", "cars_data", "where", "weight", "between", "3000", "and", "4000", ";"], "query_toks_no_value": ["select", "distinct", "year", "from", "cars_data", "where", "weight", "between", "value", "and", "value"], "question": "In which years cars were produced between 3000 and 4000 pounds?", "question_toks": ["In", "which", "years", "cars", "were", "produced", "between", "3000", "and", "4000", "pounds?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [true, [[0, [0, [0, 23, false], null]]]], "where": [[false, 1, [0, [0, 21, false], null], 3000.0, 4000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000;"}
{"db_id": "car_1", "query": "select distinct year from cars_data where weight between 3000 and 4000;", "query_toks": ["select", "distinct", "year", "from", "cars_data", "where", "weight", "between", "3000", "and", "4000", ";"], "query_toks_no_value": ["select", "distinct", "year", "from", "cars_data", "where", "weight", "between", "value", "and", "value"], "question": "What are the different years in which there were cars produced between 3000 and 4000 pounds?", "question_toks": ["What", "are", "the", "different", "years", "in", "which", "there", "were", "cars", "produced", "between", "3000", "and", "4000", "pounds?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [true, [[0, [0, [0, 23, false], null]]]], "where": [[false, 1, [0, [0, 21, false], null], 3000.0, 4000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "DISTINCT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000;"}
{"db_id": "car_1", "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "query_toks": ["SELECT", "T1.cylinders", "FROM", "CARS_DATA", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.Id", "=", "T2.MakeId", "WHERE", "T2.Model", "=", "'volvo", "'", "ORDER", "BY", "T1.accelerate", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "cylinders", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "makeid", "where", "t2", ".", "model", "=", "value", "order", "by", "t1", ".", "accelerate", "asc", "limit", "value"], "question": "For  volvo, how many cylinders does the car with the least accelerate have?", "question_toks": ["For", "volvo,", "how", "many", "cylinders", "does", "the", "car", "with", "the", "least", "accelerate", "have?"], "sql": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 18, false], null]]]], "where": [[false, 2, [0, [0, 14, false], null], "\"volvo\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 22, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "MIN(Cylinders) FROM cars_data \nWHERE Id IN (SELECT MakeId FROM car_names WHERE Make='volvo') \nAND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Make='volvo'));"}
{"db_id": "car_1", "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "query_toks": ["SELECT", "T1.cylinders", "FROM", "CARS_DATA", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.Id", "=", "T2.MakeId", "WHERE", "T2.Model", "=", "'volvo", "'", "ORDER", "BY", "T1.accelerate", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "cylinders", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "makeid", "where", "t2", ".", "model", "=", "value", "order", "by", "t1", ".", "accelerate", "asc", "limit", "value"], "question": "For a volvo , how many cylinders does the version with least accelerate have?", "question_toks": ["For", "a", "volvo", ",", "how", "many", "cylinders", "does", "the", "version", "with", "least", "accelerate", "have?"], "sql": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 18, false], null]]]], "where": [[false, 2, [0, [0, 14, false], null], "\"volvo\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 22, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "MIN(Cylinders) FROM cars_data \nWHERE Id IN (SELECT MakeId FROM car_names WHERE Make='volvo') \nAND Accelerate = (SELECT MIN(Accelerate) FROM cars_data \n                  WHERE Id IN (SELECT MakeId FROM car_names WHERE Make='volvo'))"}
{"db_id": "car_1", "query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "query_toks": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "group", "by", "t1", ".", "countryid", "having", "count", "(", "*", ")", ">", "value"], "question": "How many nations has more than 2 car makers ?", "question_toks": ["How", "many", "nations", "has", "more", "than", "2", "car", "makers", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(DISTINCT countries.CountryName) \nFROM car_makers \nJOIN countries ON car_makers.Country=countries.CountryId \nGROUP BY countries.CountryName \nHAVING COUNT(DISTINCT car_makers.Maker) > 2;"}
{"db_id": "car_1", "query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "query_toks": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "group", "by", "t1", ".", "countryid", "having", "count", "(", "*", ")", ">", "value"], "question": "What is the number of nations with more than 2 car makers ?", "question_toks": ["What", "is", "the", "number", "of", "nations", "with", "more", "than", "2", "car", "makers", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(DISTINCT countries.CountryId) \nFROM car_makers \nJOIN countries ON car_makers.Country=countries.CountryId \nGROUP BY countries.CountryId \nHAVING COUNT(DISTINCT car_makers.Id) > 2;"}
{"db_id": "car_1", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "query_toks": ["SELECT", "T1.Model", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "WHERE", "T2.Cylinders", "=", "4", "ORDER", "BY", "T2.horsepower", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "where", "t2", ".", "cylinders", "=", "value", "order", "by", "t2", ".", "horsepower", "desc", "limit", "value"], "question": "For all of the 4 CYL cars, which model has the most horsepower?", "question_toks": ["For", "all", "of", "the", "4", "CYL", "cars,", "which", "model", "has", "the", "most", "horsepower?"], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "car_names.Model \nFROM car_names \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE cars_data.Cylinders = 4 \nORDER BY cars_data.Horsepower DESC \nLIMIT 1;"}
{"db_id": "car_1", "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "query_toks": ["select", "max", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "8", "or", "year", "<", "1980"], "query_toks_no_value": ["select", "max", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "value", "or", "year", "<", "value"], "question": "What is the maximum miles per gallon of the 8 CYL cars or cars produced before 1980 ?", "question_toks": ["What", "is", "the", "maximum", "miles", "per", "gallon", "of", "the", "8", "CYL", "cars", "or", "cars", "produced", "before", "1980", "?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[1, [0, [0, 17, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 8.0, null], "or", [false, 4, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "MAX(MPG) FROM cars_data WHERE (Cylinders = 8 OR Year < 1980);"}
{"db_id": "car_1", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "query_toks": ["SELECT", "DISTINCT", "T1.model", "FROM", "MODEL_LIST", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.Model", "=", "T2.Model", "JOIN", "CARS_DATA", "AS", "T3", "ON", "T2.MakeId", "=", "T3.Id", "JOIN", "CAR_MAKERS", "AS", "T4", "ON", "T1.Maker", "=", "T4.Id", "WHERE", "T3.weight", "<", "3500", "AND", "T4.FullName", "!", "=", "'Ford", "Motor", "Company", "'", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "model", "=", "t2", ".", "model", "join", "cars_data", "as", "t3", "on", "t2", ".", "makeid", "=", "t3", ".", "id", "join", "car_makers", "as", "t4", "on", "t1", ".", "maker", "=", "t4", ".", "id", "where", "t3", ".", "weight", "<", "value", "and", "t4", ".", "fullname", "!", "=", "value"], "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "question_toks": ["Which", "models", "are", "lighter", "than", "3500", "but", "not", "built", "by", "the", "'Ford", "Motor", "Company'?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 4], ["table_unit", 5], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 14, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 6, false], null]]}, "select": [true, [[0, [0, [0, 12, false], null]]]], "where": [[false, 4, [0, [0, 21, false], null], 3500.0, null], "and", [false, 7, [0, [0, 8, false], null], "\"Ford Motor Company\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Model FROM car_names \nJOIN cars_data ON car_names.MakeId=cars_data.Id \nJOIN car_makers ON car_names.Make=car_makers.Maker \nWHERE Weight<3500 AND car_makers.Maker!='Ford Motor Company'"}
{"db_id": "car_1", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "query_toks": ["SELECT", "DISTINCT", "T1.model", "FROM", "MODEL_LIST", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.Model", "=", "T2.Model", "JOIN", "CARS_DATA", "AS", "T3", "ON", "T2.MakeId", "=", "T3.Id", "JOIN", "CAR_MAKERS", "AS", "T4", "ON", "T1.Maker", "=", "T4.Id", "WHERE", "T3.weight", "<", "3500", "AND", "T4.FullName", "!", "=", "'Ford", "Motor", "Company", "'", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "model", "=", "t2", ".", "model", "join", "cars_data", "as", "t3", "on", "t2", ".", "makeid", "=", "t3", ".", "id", "join", "car_makers", "as", "t4", "on", "t1", ".", "maker", "=", "t4", ".", "id", "where", "t3", ".", "weight", "<", "value", "and", "t4", ".", "fullname", "!", "=", "value"], "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "question_toks": ["What", "are", "the", "different", "models", "wthat", "are", "lighter", "than", "3500", "but", "were", "not", "built", "by", "the", "Ford", "Motor", "Company?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 4], ["table_unit", 5], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 14, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 6, false], null]]}, "select": [true, [[0, [0, [0, 12, false], null]]]], "where": [[false, 4, [0, [0, 21, false], null], 3500.0, null], "and", [false, 7, [0, [0, 8, false], null], "\"Ford Motor Company\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "car_names.Model \n FROM car_names \n JOIN cars_data ON car_names.MakeId=cars_data.Id \n JOIN car_makers ON car_names.Make=car_makers.Maker \n WHERE cars_data.Weight<3500 AND car_makers.Maker!='Ford Motor Company';"}
{"db_id": "car_1", "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "query_toks": ["SELECT", "T1.countryId", ",", "T1.CountryName", "FROM", "Countries", "AS", "T1", "JOIN", "CAR_MAKERS", "AS", "T2", "ON", "T1.CountryId", "=", "T2.Country", "GROUP", "BY", "T1.countryId", "HAVING", "count", "(", "*", ")", ">", "3", "UNION", "SELECT", "T1.countryId", ",", "T1.CountryName", "FROM", "Countries", "AS", "T1", "JOIN", "CAR_MAKERS", "AS", "T2", "ON", "T1.CountryId", "=", "T2.Country", "JOIN", "MODEL_LIST", "AS", "T3", "ON", "T2.Id", "=", "T3.Maker", "WHERE", "T3.Model", "=", "'fiat", "'", ";"], "query_toks_no_value": ["select", "t1", ".", "countryid", ",", "t1", ".", "countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "group", "by", "t1", ".", "countryid", "having", "count", "(", "*", ")", ">", "value", "union", "select", "t1", ".", "countryid", ",", "t1", ".", "countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "join", "model_list", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "maker", "where", "t3", ".", "model", "=", "value"], "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' ?", "question_toks": ["What", "are", "the", "id", "and", "names", "of", "the", "countries", "which", "have", "more", "than", "3", "car", "makers", "or", "produce", "the", "'fiat'", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"fiat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "Prediction": "countries.CountryId, countries.CountryName \n FROM countries \n JOIN car_makers ON countries.CountryId = car_makers.Country \n WHERE car_makers.Maker = 'fiat' OR \n       countries.CountryId IN (SELECT car_makers.Country \n                               FROM car_makers \n                               GROUP BY car_makers.Country \n                               HAVING COUNT(*) > 3)"}
{"db_id": "car_1", "query": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';", "query_toks": ["select", "t1.countryid", ",", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "3", "union", "select", "t1.countryid", ",", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "join", "model_list", "as", "t3", "on", "t2.id", "=", "t3.maker", "where", "t3.model", "=", "\"fiat\"", ";"], "query_toks_no_value": ["select", "t1", ".", "countryid", ",", "t1", ".", "countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "group", "by", "t1", ".", "countryid", "having", "count", "(", "*", ")", ">", "value", "union", "select", "t1", ".", "countryid", ",", "t1", ".", "countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "join", "model_list", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "maker", "where", "t3", ".", "model", "=", "value"], "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiats?", "question_toks": ["What", "are", "the", "ids", "and", "names", "of", "all", "countries", "that", "either", "have", "more", "than", "3", "car", "makers", "or", "produce", "fiats?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"fiat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "Prediction": "countries.CountryId, countries.CountryName \n FROM countries \n LEFT JOIN car_makers ON countries.CountryId = car_makers.Country \n WHERE car_makers.Maker = 'Fiat' OR \n       (SELECT COUNT(*) FROM car_makers WHERE car_makers.Country = countries.CountryId) > 3;"}
{"db_id": "flight_2", "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "query_toks": ["SELECT", "Country", "FROM", "AIRLINES", "WHERE", "Airline", "=", "``", "JetBlue", "Airways", "''"], "query_toks_no_value": ["select", "country", "from", "airlines", "where", "airline", "=", "value"], "question": "Which country does \"\"JetBlue Airways\"\" belong to?", "question_toks": ["Which", "country", "does", "\"\"JetBlue", "Airways\"\"", "belong", "to?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"JetBlue Airways\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Country FROM airlines WHERE Airline = \"JetBlue Airways\";"}
{"db_id": "flight_2", "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "query_toks": ["SELECT", "Country", "FROM", "AIRLINES", "WHERE", "Airline", "=", "``", "JetBlue", "Airways", "''"], "query_toks_no_value": ["select", "country", "from", "airlines", "where", "airline", "=", "value"], "question": "What country is Jetblue Airways affiliated with?", "question_toks": ["What", "country", "is", "Jetblue", "Airways", "affiliated", "with?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"JetBlue Airways\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "airlines.Country FROM airlines WHERE airlines.Airline = 'Jetblue Airways';"}
{"db_id": "flight_2", "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "query_toks": ["SELECT", "Abbreviation", "FROM", "AIRLINES", "WHERE", "Airline", "=", "``", "JetBlue", "Airways", "''"], "query_toks_no_value": ["select", "abbreviation", "from", "airlines", "where", "airline", "=", "value"], "question": "What is the abbreviation of \"\"JetBlue Airways\"\"?", "question_toks": ["What", "is", "the", "abbreviation", "of", "\"\"JetBlue", "Airways\"\"?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"JetBlue Airways\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Abbreviation FROM airlines WHERE Airline = \"JetBlue Airways\";"}
{"db_id": "flight_2", "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "query_toks": ["SELECT", "Abbreviation", "FROM", "AIRLINES", "WHERE", "Airline", "=", "``", "JetBlue", "Airways", "''"], "query_toks_no_value": ["select", "abbreviation", "from", "airlines", "where", "airline", "=", "value"], "question": "Which abbreviation corresponds to Jetblue Airways?", "question_toks": ["Which", "abbreviation", "corresponds", "to", "Jetblue", "Airways?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"JetBlue Airways\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';"}
{"db_id": "flight_2", "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "query_toks": ["SELECT", "Airline", ",", "Abbreviation", "FROM", "AIRLINES", "WHERE", "Country", "=", "``", "USA", "''"], "query_toks_no_value": ["select", "airline", ",", "abbreviation", "from", "airlines", "where", "country", "=", "value"], "question": "List all airline names and their abbreviations in \"\"USA\"\".", "question_toks": ["List", "all", "airline", "names", "and", "their", "abbreviations", "in", "\"\"USA\"\"."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"USA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Airline, Abbreviation FROM airlines WHERE Country = \"USA\";"}
{"db_id": "flight_2", "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "query_toks": ["SELECT", "Airline", ",", "Abbreviation", "FROM", "AIRLINES", "WHERE", "Country", "=", "``", "USA", "''"], "query_toks_no_value": ["select", "airline", ",", "abbreviation", "from", "airlines", "where", "country", "=", "value"], "question": "What are the airline names and abbreviations for airlines in the USA?", "question_toks": ["What", "are", "the", "airline", "names", "and", "abbreviations", "for", "airlines", "in", "the", "USA?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"USA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Airline, Abbreviation FROM airlines WHERE Country = 'USA';"}
{"db_id": "flight_2", "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "query_toks": ["SELECT", "AirportCode", ",", "AirportName", "FROM", "AIRPORTS", "WHERE", "city", "=", "``", "Anthony", "''"], "query_toks_no_value": ["select", "airportcode", ",", "airportname", "from", "airports", "where", "city", "=", "value"], "question": "List the airport code and name in Anthony.", "question_toks": ["List", "the", "airport", "code", "and", "name", "in", "Anthony."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Anthony\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AirportCode, AirportName FROM airports WHERE City = 'Anthony';"}
{"db_id": "flight_2", "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "query_toks": ["SELECT", "AirportCode", ",", "AirportName", "FROM", "AIRPORTS", "WHERE", "city", "=", "``", "Anthony", "''"], "query_toks_no_value": ["select", "airportcode", ",", "airportname", "from", "airports", "where", "city", "=", "value"], "question": "Give the airport code and airport name corresonding to Anthony.", "question_toks": ["Give", "the", "airport", "code", "and", "airport", "name", "corresonding", "to", "Anthony."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Anthony\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "airports.AirportCode, airports.AirportName\n FROM airports\n WHERE airports.City = 'Anthony';"}
{"db_id": "flight_2", "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "query_toks": ["SELECT", "Airline", "FROM", "AIRLINES", "WHERE", "Abbreviation", "=", "``", "UAL", "''"], "query_toks_no_value": ["select", "airline", "from", "airlines", "where", "abbreviation", "=", "value"], "question": "Which airline is also known as UAL?", "question_toks": ["Which", "airline", "is", "also", "known", "as", "UAL?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], "\"UAL\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Airline FROM airlines WHERE Abbreviation = 'UAL';"}
{"db_id": "flight_2", "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "query_toks": ["SELECT", "Airline", "FROM", "AIRLINES", "WHERE", "Abbreviation", "=", "``", "UAL", "''"], "query_toks_no_value": ["select", "airline", "from", "airlines", "where", "abbreviation", "=", "value"], "question": "Give the airline called UAL.", "question_toks": ["Give", "the", "airline", "called", "UAL."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], "\"UAL\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Airline FROM airlines WHERE Abbreviation = 'UAL';"}
{"db_id": "flight_2", "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "AIRLINES", "WHERE", "Country", "=", "``", "USA", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airlines", "where", "country", "=", "value"], "question": "How many airlines are from USA?", "question_toks": ["How", "many", "airlines", "are", "from", "USA?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"USA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM airlines WHERE Country = 'USA';"}
{"db_id": "flight_2", "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "AIRLINES", "WHERE", "Country", "=", "``", "USA", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airlines", "where", "country", "=", "value"], "question": "Return the number of airlines in the USA.", "question_toks": ["Return", "the", "number", "of", "airlines", "in", "the", "USA."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"USA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM airlines WHERE Country = 'USA';"}
{"db_id": "flight_2", "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "query_toks": ["SELECT", "AirportName", "FROM", "AIRPORTS", "WHERE", "AirportCode", "=", "``", "AKO", "''"], "query_toks_no_value": ["select", "airportname", "from", "airports", "where", "airportcode", "=", "value"], "question": "What is the name for AKO?", "question_toks": ["What", "is", "the", "name", "for", "AKO?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"AKO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Airline FROM airlines WHERE Abbreviation='AKO';"}
{"db_id": "flight_2", "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "query_toks": ["SELECT", "AirportName", "FROM", "AIRPORTS", "WHERE", "AirportCode", "=", "``", "AKO", "''"], "query_toks_no_value": ["select", "airportname", "from", "airports", "where", "airportcode", "=", "value"], "question": "Return the name of AKO.", "question_toks": ["Return", "the", "name", "of", "AKO."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"AKO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "name FROM soldiers WHERE unit = 'AKO';"}
{"db_id": "flight_2", "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "query_toks": ["SELECT", "AirportName", "FROM", "AIRPORTS", "WHERE", "City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "airportname", "from", "airports", "where", "city", "=", "value"], "question": "What are airport names at Aberdeen?", "question_toks": ["What", "are", "airport", "names", "at", "Aberdeen?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AirportName FROM airports WHERE City = 'Aberdeen';"}
{"db_id": "flight_2", "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "query_toks": ["SELECT", "AirportName", "FROM", "AIRPORTS", "WHERE", "City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "airportname", "from", "airports", "where", "city", "=", "value"], "question": "What are the names of airports in Aberdeen?", "question_toks": ["What", "are", "the", "names", "of", "airports", "in", "Aberdeen?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AirportName FROM airports WHERE City = 'Aberdeen';"}
{"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "WHERE", "SourceAirport", "=", "``", "APG", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "where", "sourceairport", "=", "value"], "question": "How many flights depart from APG?", "question_toks": ["How", "many", "flights", "depart", "from", "APG?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM flights WHERE SourceAirport = 'APG';"}
{"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "WHERE", "SourceAirport", "=", "``", "APG", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "where", "sourceairport", "=", "value"], "question": "Count the number of flights departing from 'APG'.", "question_toks": ["Count", "the", "number", "of", "flights", "departing", "from", "'APG'."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM flights WHERE SourceAirport='APG';"}
{"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "WHERE", "DestAirport", "=", "``", "ATO", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "where", "destairport", "=", "value"], "question": "How many flights arrive at ATO?", "question_toks": ["How", "many", "flights", "arrive", "at", "ATO?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"ATO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM flights JOIN airports ON flights.DestAirport=airports.AirportCode WHERE airports.AirportName='ATO';"}
{"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "WHERE", "DestAirport", "=", "``", "ATO", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "where", "destairport", "=", "value"], "question": "Count the number of flights into ATO.", "question_toks": ["Count", "the", "number", "of", "flights", "into", "ATO."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"ATO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM flights JOIN airports ON flights.DestAirport=airports.AirportCode WHERE airports.AirportCode='ATO';"}
{"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.SourceAirport", "=", "T2.AirportCode", "WHERE", "T2.City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "sourceairport", "=", "t2", ".", "airportcode", "where", "t2", ".", "city", "=", "value"], "question": "How many flights depart from Aberdeen?", "question_toks": ["How", "many", "flights", "depart", "from", "Aberdeen?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City='Aberdeen');"}
{"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.SourceAirport", "=", "T2.AirportCode", "WHERE", "T2.City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "sourceairport", "=", "t2", ".", "airportcode", "where", "t2", ".", "city", "=", "value"], "question": "Return the number of flights departing from Aberdeen.", "question_toks": ["Return", "the", "number", "of", "flights", "departing", "from", "Aberdeen."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM flights \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airports.City = 'Aberdeen';"}
{"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.DestAirport", "=", "T2.AirportCode", "WHERE", "T2.City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "destairport", "=", "t2", ".", "airportcode", "where", "t2", ".", "city", "=", "value"], "question": "How many flights arriving in Aberdeen ?", "question_toks": ["How", "many", "flights", "arriving", "in", "Aberdeen", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM flights JOIN airports ON flights.DestAirport=airports.AirportCode WHERE airports.City='Aberdeen';"}
{"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.DestAirport", "=", "T2.AirportCode", "WHERE", "T2.City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "destairport", "=", "t2", ".", "airportcode", "where", "t2", ".", "city", "=", "value"], "question": "Return the number of flights arriving in Aberdeen.", "question_toks": ["Return", "the", "number", "of", "flights", "arriving", "in", "Aberdeen."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM flights JOIN airports ON flights.DestAirport=airports.AirportCode WHERE airports.City='Aberdeen';"}
{"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.DestAirport", "=", "T2.AirportCode", "JOIN", "AIRPORTS", "AS", "T3", "ON", "T1.SourceAirport", "=", "T3.AirportCode", "WHERE", "T2.City", "=", "``", "Ashley", "''", "AND", "T3.City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "destairport", "=", "t2", ".", "airportcode", "join", "airports", "as", "t3", "on", "t1", ".", "sourceairport", "=", "t3", ".", "airportcode", "where", "t2", ".", "city", "=", "value", "and", "t3", ".", "city", "=", "value"], "question": "How many flights depart from Aberdeen and arrive at Ashley?", "question_toks": ["How", "many", "flights", "depart", "from", "Aberdeen", "and", "arrive", "at", "Ashley?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 12, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Ashley\"", null], "and", [false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM flights \nWHERE SourceAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen') \nAND DestAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Ashley');"}
{"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.DestAirport", "=", "T2.AirportCode", "JOIN", "AIRPORTS", "AS", "T3", "ON", "T1.SourceAirport", "=", "T3.AirportCode", "WHERE", "T2.City", "=", "``", "Ashley", "''", "AND", "T3.City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "destairport", "=", "t2", ".", "airportcode", "join", "airports", "as", "t3", "on", "t1", ".", "sourceairport", "=", "t3", ".", "airportcode", "where", "t2", ".", "city", "=", "value", "and", "t3", ".", "city", "=", "value"], "question": "How many flights fly from Aberdeen to Ashley?", "question_toks": ["How", "many", "flights", "fly", "from", "Aberdeen", "to", "Ashley?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 12, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Ashley\"", null], "and", [false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM flights \nWHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') \nAND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley');"}
{"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRLINES", "AS", "T2", "ON", "T1.Airline", "=", "T2.uid", "WHERE", "T2.Airline", "=", "``", "JetBlue", "Airways", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t1", ".", "airline", "=", "t2", ".", "uid", "where", "t2", ".", "airline", "=", "value"], "question": "How many flights does 'JetBlue Airways' have?", "question_toks": ["How", "many", "flights", "does", "'JetBlue", "Airways'", "have?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"JetBlue Airways\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways';"}
{"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRLINES", "AS", "T2", "ON", "T1.Airline", "=", "T2.uid", "WHERE", "T2.Airline", "=", "``", "JetBlue", "Airways", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t1", ".", "airline", "=", "t2", ".", "uid", "where", "t2", ".", "airline", "=", "value"], "question": "Give the number of Jetblue Airways flights.", "question_toks": ["Give", "the", "number", "of", "Jetblue", "Airways", "flights."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"JetBlue Airways\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM flights WHERE Airline = 'Jetblue Airways';"}
{"db_id": "flight_2", "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T2.Airline", "=", "T1.uid", "WHERE", "T1.Airline", "=", "``", "United", "Airlines", "''", "AND", "T2.DestAirport", "=", "``", "ASY", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2", ".", "airline", "=", "t1", ".", "uid", "where", "t1", ".", "airline", "=", "value", "and", "t2", ".", "destairport", "=", "value"], "question": "How many 'United Airlines' flights go to 'ASY'?", "question_toks": ["How", "many", "'United", "Airlines'", "flights", "go", "to", "'ASY'?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"United Airlines\"", null], "and", [false, 2, [0, [0, 13, false], null], "\"ASY\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM flights \nJOIN airports ON flights.DestAirport=airports.AirportCode \nJOIN airlines ON flights.Airline=airlines.Airline \nWHERE airlines.Airline='United Airlines' AND airports.AirportCode='ASY';"}
{"db_id": "flight_2", "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T2.Airline", "=", "T1.uid", "WHERE", "T1.Airline", "=", "``", "United", "Airlines", "''", "AND", "T2.DestAirport", "=", "``", "ASY", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2", ".", "airline", "=", "t1", ".", "uid", "where", "t1", ".", "airline", "=", "value", "and", "t2", ".", "destairport", "=", "value"], "question": "Count the number of United Airlines flights arriving in ASY.", "question_toks": ["Count", "the", "number", "of", "United", "Airlines", "flights", "arriving", "in", "ASY."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"United Airlines\"", null], "and", [false, 2, [0, [0, 13, false], null], "\"ASY\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM flights \nWHERE Airline = 'United Airlines' AND DestAirport = 'ASY';"}
{"db_id": "flight_2", "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T2.Airline", "=", "T1.uid", "WHERE", "T1.Airline", "=", "``", "United", "Airlines", "''", "AND", "T2.SourceAirport", "=", "``", "AHD", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2", ".", "airline", "=", "t1", ".", "uid", "where", "t1", ".", "airline", "=", "value", "and", "t2", ".", "sourceairport", "=", "value"], "question": "How many 'United Airlines' flights depart from 'AHD'?", "question_toks": ["How", "many", "'United", "Airlines'", "flights", "depart", "from", "'AHD'?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"United Airlines\"", null], "and", [false, 2, [0, [0, 12, false], null], "\"AHD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM flights \nWHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';"}
{"db_id": "flight_2", "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T2.Airline", "=", "T1.uid", "WHERE", "T1.Airline", "=", "``", "United", "Airlines", "''", "AND", "T2.SourceAirport", "=", "``", "AHD", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2", ".", "airline", "=", "t1", ".", "uid", "where", "t1", ".", "airline", "=", "value", "and", "t2", ".", "sourceairport", "=", "value"], "question": "Return the number of United Airlines flights leaving from AHD.", "question_toks": ["Return", "the", "number", "of", "United", "Airlines", "flights", "leaving", "from", "AHD."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"United Airlines\"", null], "and", [false, 2, [0, [0, 12, false], null], "\"AHD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM flights \nWHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';"}
{"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.DestAirport", "=", "T2.AirportCode", "JOIN", "AIRLINES", "AS", "T3", "ON", "T3.uid", "=", "T1.Airline", "WHERE", "T2.City", "=", "``", "Aberdeen", "''", "AND", "T3.Airline", "=", "``", "United", "Airlines", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "destairport", "=", "t2", ".", "airportcode", "join", "airlines", "as", "t3", "on", "t3", ".", "uid", "=", "t1", ".", "airline", "where", "t2", ".", "city", "=", "value", "and", "t3", ".", "airline", "=", "value"], "question": "How many United Airlines flights go to 'Aberdeen'?", "question_toks": ["How", "many", "United", "Airlines", "flights", "go", "to", "'Aberdeen'?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null], "and", [false, 2, [0, [0, 2, false], null], "\"United Airlines\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM flights \nJOIN airlines ON flights.Airline = airlines.Abbreviation \nJOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';"}
{"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.DestAirport", "=", "T2.AirportCode", "JOIN", "AIRLINES", "AS", "T3", "ON", "T3.uid", "=", "T1.Airline", "WHERE", "T2.City", "=", "``", "Aberdeen", "''", "AND", "T3.Airline", "=", "``", "United", "Airlines", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "destairport", "=", "t2", ".", "airportcode", "join", "airlines", "as", "t3", "on", "t3", ".", "uid", "=", "t1", ".", "airline", "where", "t2", ".", "city", "=", "value", "and", "t3", ".", "airline", "=", "value"], "question": "Count the number of United Airlines flights that arrive in Aberdeen.", "question_toks": ["Count", "the", "number", "of", "United", "Airlines", "flights", "that", "arrive", "in", "Aberdeen."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null], "and", [false, 2, [0, [0, 2, false], null], "\"United Airlines\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM flights \nJOIN airlines ON flights.Airline = airlines.Abbreviation \nJOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';"}
{"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.SourceAirport", "=", "``", "AHD", "''"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "sourceairport", "=", "value"], "question": "What are airlines that have some flight departing from AHD?", "question_toks": ["What", "are", "airlines", "that", "have", "some", "flight", "departing", "from", "AHD?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"AHD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "airlines.Airline, airlines.Abbreviation, airlines.Country \n FROM airlines \n JOIN flights ON airlines.uid = flights.Airline \n JOIN airports ON flights.SourceAirport = airports.AirportCode \n WHERE airports.AirportCode = 'AHD';"}
{"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.SourceAirport", "=", "``", "AHD", "''"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "sourceairport", "=", "value"], "question": "Which airlines have a flight from  AHD?", "question_toks": ["Which", "airlines", "have", "a", "flight", "from", "AHD?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"AHD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Airline \n FROM airlines \n WHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'AHD');"}
{"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.DestAirport", "=", "``", "AHD", "''"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "destairport", "=", "value"], "question": "What are airlines that have flights arriving at AHD?", "question_toks": ["What", "are", "airlines", "that", "have", "flights", "arriving", "at", "AHD?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"AHD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "airlines.Airline, airlines.Abbreviation, airlines.Country \n FROM airlines \n JOIN flights ON airlines.uid = flights.Airline \n JOIN airports ON flights.DestAirport = airports.AirportCode \n WHERE airports.AirportCode = 'AHD';"}
{"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.DestAirport", "=", "``", "AHD", "''"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "destairport", "=", "value"], "question": "Which airlines have a flight to  AHD?", "question_toks": ["Which", "airlines", "have", "a", "flight", "to", "AHD?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"AHD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "airlines.Airline \n FROM airlines \n JOIN flights ON airlines.Abbreviation=flights.Airline \n JOIN airports ON flights.DestAirport=airports.AirportCode \n WHERE airports.AirportCode='AHD';"}
{"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.SourceAirport", "=", "``", "APG", "''", "INTERSECT", "SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.SourceAirport", "=", "``", "CVO", "''"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "sourceairport", "=", "value", "intersect", "select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "sourceairport", "=", "value"], "question": "Find all airlines that have flights from both APG and CVO.", "question_toks": ["Find", "all", "airlines", "that", "have", "flights", "from", "both", "APG", "and", "CVO."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"CVO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "airlines.Airline \nFROM airlines \nJOIN flights ON airlines.uid = flights.Airline \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airports.City = 'APG' \nINTERSECT \nSELECT airlines.Airline \nFROM airlines \nJOIN flights ON airlines.uid = flights.Airline \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airports.City = 'CVO';"}
{"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.SourceAirport", "=", "``", "APG", "''", "INTERSECT", "SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.SourceAirport", "=", "``", "CVO", "''"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "sourceairport", "=", "value", "intersect", "select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "sourceairport", "=", "value"], "question": "Which airlines have departing flights from both APG and CVO ?", "question_toks": ["Which", "airlines", "have", "departing", "flights", "from", "both", "APG", "and", "CVO", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"CVO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "airlines.Airline \n FROM airlines \n JOIN flights ON airlines.uid = flights.Airline \n JOIN airports ON flights.SourceAirport = airports.AirportCode \n WHERE airports.AirportCode IN ('APG', 'CVO') \n GROUP BY airlines.Airline \n HAVING COUNT(DISTINCT airports.AirportCode) = 2;"}
{"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.SourceAirport", "=", "``", "CVO", "''", "EXCEPT", "SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.SourceAirport", "=", "``", "APG", "''"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "sourceairport", "=", "value", "except", "select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "sourceairport", "=", "value"], "question": "Find all airlines that have flights from 'CVO' but not from 'APG'.", "question_toks": ["Find", "all", "airlines", "that", "have", "flights", "from", "'CVO'", "but", "not", "from", "'APG'."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"CVO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "Prediction": "airlines.Airline \n FROM airlines \n JOIN flights ON airlines.Airline = flights.Airline \n WHERE flights.SourceAirport = 'CVO' \n AND airlines.Airline NOT IN \n (SELECT airlines.Airline \n FROM airlines \n JOIN flights ON airlines.Airline = flights.Airline \n WHERE flights.SourceAirport = 'APG');"}
{"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.SourceAirport", "=", "``", "CVO", "''", "EXCEPT", "SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.SourceAirport", "=", "``", "APG", "''"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "sourceairport", "=", "value", "except", "select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "sourceairport", "=", "value"], "question": "Which airlines have departures from CVO but not from APG?", "question_toks": ["Which", "airlines", "have", "departures", "from", "CVO", "but", "not", "from", "APG?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"CVO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "Prediction": "airlines.Airline \nFROM airlines \nJOIN flights ON airlines.Airline = flights.Airline \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airports.City = 'CVO' \nAND airlines.Airline NOT IN \n(SELECT airlines.Airline \nFROM airlines \nJOIN flights ON airlines.Airline = flights.Airline \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airports.City = 'APG');"}
{"db_id": "flight_2", "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "query_toks": ["SELECT", "T1.FlightNo", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRLINES", "AS", "T2", "ON", "T2.uid", "=", "T1.Airline", "WHERE", "T2.Airline", "=", "``", "United", "Airlines", "''"], "query_toks_no_value": ["select", "t1", ".", "flightno", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t2", ".", "uid", "=", "t1", ".", "airline", "where", "t2", ".", "airline", "=", "value"], "question": "What are flight numbers of \"\"United Airlines\"\"?", "question_toks": ["What", "are", "flight", "numbers", "of", "\"\"United", "Airlines\"\"?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"United Airlines\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "FlightNo FROM flights WHERE Airline = \"United Airlines\";"}
{"db_id": "flight_2", "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "query_toks": ["SELECT", "T1.FlightNo", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRLINES", "AS", "T2", "ON", "T2.uid", "=", "T1.Airline", "WHERE", "T2.Airline", "=", "``", "United", "Airlines", "''"], "query_toks_no_value": ["select", "t1", ".", "flightno", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t2", ".", "uid", "=", "t1", ".", "airline", "where", "t2", ".", "airline", "=", "value"], "question": "Which flight numbers correspond to United Airlines flights?", "question_toks": ["Which", "flight", "numbers", "correspond", "to", "United", "Airlines", "flights?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"United Airlines\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "FlightNo FROM flights WHERE Airline = 'United Airlines';"}
{"db_id": "flight_2", "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "query_toks": ["SELECT", "FlightNo", "FROM", "FLIGHTS", "WHERE", "SourceAirport", "=", "``", "APG", "''"], "query_toks_no_value": ["select", "flightno", "from", "flights", "where", "sourceairport", "=", "value"], "question": "What are flight numbers of flights departing from APG?", "question_toks": ["What", "are", "flight", "numbers", "of", "flights", "departing", "from", "APG?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "FlightNo FROM flights WHERE SourceAirport='APG';"}
{"db_id": "flight_2", "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "query_toks": ["SELECT", "FlightNo", "FROM", "FLIGHTS", "WHERE", "SourceAirport", "=", "``", "APG", "''"], "query_toks_no_value": ["select", "flightno", "from", "flights", "where", "sourceairport", "=", "value"], "question": "Give the flight numbers of flights leaving from APG.", "question_toks": ["Give", "the", "flight", "numbers", "of", "flights", "leaving", "from", "APG."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "FlightNo FROM flights WHERE SourceAirport = 'APG';"}
{"db_id": "flight_2", "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "query_toks": ["SELECT", "FlightNo", "FROM", "FLIGHTS", "WHERE", "DestAirport", "=", "``", "APG", "''"], "query_toks_no_value": ["select", "flightno", "from", "flights", "where", "destairport", "=", "value"], "question": "What are flight numbers of flights arriving at APG?", "question_toks": ["What", "are", "flight", "numbers", "of", "flights", "arriving", "at", "APG?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "FlightNo FROM flights WHERE DestAirport='APG';"}
{"db_id": "flight_2", "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "query_toks": ["SELECT", "FlightNo", "FROM", "FLIGHTS", "WHERE", "DestAirport", "=", "``", "APG", "''"], "query_toks_no_value": ["select", "flightno", "from", "flights", "where", "destairport", "=", "value"], "question": "Give the flight numbers of flights landing at APG.", "question_toks": ["Give", "the", "flight", "numbers", "of", "flights", "landing", "at", "APG."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "FlightNo FROM flights JOIN airports ON flights.DestAirport=airports.AirportCode WHERE airports.AirportName='APG';"}
{"db_id": "flight_2", "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "query_toks": ["SELECT", "T1.FlightNo", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.SourceAirport", "=", "T2.AirportCode", "WHERE", "T2.City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "t1", ".", "flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "sourceairport", "=", "t2", ".", "airportcode", "where", "t2", ".", "city", "=", "value"], "question": "What are flight numbers of flights departing from Aberdeen?", "question_toks": ["What", "are", "flight", "numbers", "of", "flights", "departing", "from", "Aberdeen?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 6, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "FlightNo FROM flights JOIN airports ON flights.SourceAirport=airports.AirportCode WHERE airports.City='Aberdeen';"}
{"db_id": "flight_2", "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "query_toks": ["SELECT", "T1.FlightNo", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.SourceAirport", "=", "T2.AirportCode", "WHERE", "T2.City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "t1", ".", "flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "sourceairport", "=", "t2", ".", "airportcode", "where", "t2", ".", "city", "=", "value"], "question": "Give the flight numbers of flights leaving from Aberdeen.", "question_toks": ["Give", "the", "flight", "numbers", "of", "flights", "leaving", "from", "Aberdeen."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 6, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport=airports.AirportCode WHERE airports.City='Aberdeen';"}
{"db_id": "flight_2", "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "query_toks": ["SELECT", "T1.FlightNo", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.DestAirport", "=", "T2.AirportCode", "WHERE", "T2.City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "t1", ".", "flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "destairport", "=", "t2", ".", "airportcode", "where", "t2", ".", "city", "=", "value"], "question": "What are flight numbers of flights arriving at Aberdeen?", "question_toks": ["What", "are", "flight", "numbers", "of", "flights", "arriving", "at", "Aberdeen?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "flights.FlightNo FROM flights \nJOIN airports ON flights.DestAirport=airports.AirportCode \nWHERE airports.City='Aberdeen';"}
{"db_id": "flight_2", "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "query_toks": ["SELECT", "T1.FlightNo", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.DestAirport", "=", "T2.AirportCode", "WHERE", "T2.City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "t1", ".", "flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "destairport", "=", "t2", ".", "airportcode", "where", "t2", ".", "city", "=", "value"], "question": "Give the flight numbers of flights arriving in Aberdeen.", "question_toks": ["Give", "the", "flight", "numbers", "of", "flights", "arriving", "in", "Aberdeen."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "flights.FlightNo FROM flights \nJOIN airports ON flights.DestAirport=airports.AirportCode \nWHERE airports.City='Aberdeen';"}
{"db_id": "flight_2", "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Flights", "AS", "T1", "JOIN", "Airports", "AS", "T2", "ON", "T1.DestAirport", "=", "T2.AirportCode", "WHERE", "T2.city", "=", "``", "Aberdeen", "''", "OR", "T2.city", "=", "``", "Abilene", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "destairport", "=", "t2", ".", "airportcode", "where", "t2", ".", "city", "=", "value", "or", "t2", ".", "city", "=", "value"], "question": "Find the number of flights landing in Aberdeen or Abilene.", "question_toks": ["Find", "the", "number", "of", "flights", "landing", "in", "Aberdeen", "or", "Abilene."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null], "or", [false, 2, [0, [0, 5, false], null], "\"Abilene\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM flights \nWHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen' OR City = 'Abilene');"}
{"db_id": "flight_2", "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Flights", "AS", "T1", "JOIN", "Airports", "AS", "T2", "ON", "T1.DestAirport", "=", "T2.AirportCode", "WHERE", "T2.city", "=", "``", "Aberdeen", "''", "OR", "T2.city", "=", "``", "Abilene", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "destairport", "=", "t2", ".", "airportcode", "where", "t2", ".", "city", "=", "value", "or", "t2", ".", "city", "=", "value"], "question": "How many flights land in Aberdeen or Abilene?", "question_toks": ["How", "many", "flights", "land", "in", "Aberdeen", "or", "Abilene?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null], "or", [false, 2, [0, [0, 5, false], null], "\"Abilene\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM flights \nWHERE DestAirport IN ('ABZ', 'ABI')"}
{"db_id": "flight_2", "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "query_toks": ["SELECT", "AirportName", "FROM", "Airports", "WHERE", "AirportCode", "NOT", "IN", "(", "SELECT", "SourceAirport", "FROM", "Flights", "UNION", "SELECT", "DestAirport", "FROM", "Flights", ")"], "query_toks_no_value": ["select", "airportname", "from", "airports", "where", "airportcode", "not", "in", "(", "select", "sourceairport", "from", "flights", "union", "select", "destairport", "from", "flights", ")"], "question": "Find the name of airports which do not have any flight in and out.", "question_toks": ["Find", "the", "name", "of", "airports", "which", "do", "not", "have", "any", "flight", "in", "and", "out."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[true, 8, [0, [0, 6, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights);"}
{"db_id": "flight_2", "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "query_toks": ["SELECT", "AirportName", "FROM", "Airports", "WHERE", "AirportCode", "NOT", "IN", "(", "SELECT", "SourceAirport", "FROM", "Flights", "UNION", "SELECT", "DestAirport", "FROM", "Flights", ")"], "query_toks_no_value": ["select", "airportname", "from", "airports", "where", "airportcode", "not", "in", "(", "select", "sourceairport", "from", "flights", "union", "select", "destairport", "from", "flights", ")"], "question": "Which airports do not have departing or arriving flights?", "question_toks": ["Which", "airports", "do", "not", "have", "departing", "or", "arriving", "flights?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[true, 8, [0, [0, 6, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "airports.AirportName \n FROM airports \n LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport \n WHERE flights.FlightNo IS NULL;"}
{"db_id": "employee_hire_evaluation", "query": "SELECT name FROM employee ORDER BY age", "query_toks": ["SELECT", "name", "FROM", "employee", "ORDER", "BY", "age"], "query_toks_no_value": ["select", "name", "from", "employee", "order", "by", "age"], "question": "Sort employee names from youngest to oldest.", "question_toks": ["Sort", "employee", "names", "from", "youngest", "to", "oldest."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 3, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM employee ORDER BY Age ASC;"}
{"db_id": "employee_hire_evaluation", "query": "SELECT name FROM employee ORDER BY age", "query_toks": ["SELECT", "name", "FROM", "employee", "ORDER", "BY", "age"], "query_toks_no_value": ["select", "name", "from", "employee", "order", "by", "age"], "question": "List the names of employees and sort from youngest to oldest", "question_toks": ["List", "the", "names", "of", "employees", "and", "sort", "from", "youngest", "to", "oldest"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 3, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM employee ORDER BY Age ASC;"}
{"db_id": "employee_hire_evaluation", "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "query_toks": ["SELECT", "city", "FROM", "employee", "WHERE", "age", "<", "30", "GROUP", "BY", "city", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "city", "from", "employee", "where", "age", "<", "value", "group", "by", "city", "having", "count", "(", "*", ")", ">", "value"], "question": "Which cities do more than one employee younger than 30 come from?", "question_toks": ["Which", "cities", "do", "more", "than", "one", "employee", "younger", "than", "30", "come", "from?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 4, [0, [0, 3, false], null], 30.0, null]], "groupBy": [[0, 4, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;"}
{"db_id": "employee_hire_evaluation", "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "query_toks": ["SELECT", "city", "FROM", "employee", "WHERE", "age", "<", "30", "GROUP", "BY", "city", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "city", "from", "employee", "where", "age", "<", "value", "group", "by", "city", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the cities that have more than one employee under  30 year old.", "question_toks": ["Find", "the", "cities", "that", "have", "more", "than", "one", "employee", "under", "30", "year", "old."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 4, [0, [0, 3, false], null], 30.0, null]], "groupBy": [[0, 4, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "City\nFROM employee\nWHERE Age < 30\nGROUP BY City\nHAVING COUNT(*) > 1;"}
{"db_id": "employee_hire_evaluation", "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "LOCATION", "FROM", "shop", "GROUP", "BY", "LOCATION"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "location", "from", "shop", "group", "by", "location"], "question": "Find the number of shops in each place.", "question_toks": ["Find", "the", "number", "of", "shops", "in", "each", "place."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Location, COUNT(*) AS num_shops FROM shop GROUP BY Location;"}
{"db_id": "employee_hire_evaluation", "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "LOCATION", "FROM", "shop", "GROUP", "BY", "LOCATION"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "location", "from", "shop", "group", "by", "location"], "question": "How many shops are there in each place?", "question_toks": ["How", "many", "shops", "are", "there", "in", "each", "place?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "shop.Location, COUNT(DISTINCT shop.Shop_ID) \n FROM shop \n GROUP BY shop.Location;"}
{"db_id": "employee_hire_evaluation", "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "query_toks": ["SELECT", "manager_name", ",", "district", "FROM", "shop", "ORDER", "BY", "number_products", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "manager_name", ",", "district", "from", "shop", "order", "by", "number_products", "desc", "limit", "value"], "question": "Find the manager name and district of the shop with the most goods.", "question_toks": ["Find", "the", "manager", "name", "and", "district", "of", "the", "shop", "with", "the", "most", "goods."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 9, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "shop.Manager_name, shop.District \n FROM shop \n WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop);"}
{"db_id": "employee_hire_evaluation", "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "query_toks": ["SELECT", "manager_name", ",", "district", "FROM", "shop", "ORDER", "BY", "number_products", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "manager_name", ",", "district", "from", "shop", "order", "by", "number_products", "desc", "limit", "value"], "question": "What are the manager name and district of the shop that sells the most merchandise?", "question_toks": ["What", "are", "the", "manager", "name", "and", "district", "of", "the", "shop", "that", "sells", "the", "most", "merchandise?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 9, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Manager_name, District \n FROM shop \n WHERE Number_products = (SELECT MAX(Number_products) FROM shop);"}
{"db_id": "employee_hire_evaluation", "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "query_toks": ["SELECT", "name", ",", "LOCATION", ",", "district", "FROM", "shop", "ORDER", "BY", "number_products", "DESC"], "query_toks_no_value": ["select", "name", ",", "location", ",", "district", "from", "shop", "order", "by", "number_products", "desc"], "question": "Return the name, location and district of all shops odered by the amount of goods they sell from the most to the least.", "question_toks": ["Return", "the", "name,", "location", "and", "district", "of", "all", "shops", "odered", "by", "the", "amount", "of", "goods", "they", "sell", "from", "the", "most", "to", "the", "least."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 9, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name, Location, District \nFROM shop \nORDER BY Number_products DESC;"}
{"db_id": "employee_hire_evaluation", "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "query_toks": ["SELECT", "name", ",", "LOCATION", ",", "district", "FROM", "shop", "ORDER", "BY", "number_products", "DESC"], "query_toks_no_value": ["select", "name", ",", "location", ",", "district", "from", "shop", "order", "by", "number_products", "desc"], "question": "Sort all the shops by amount of merchandise in descending order, and return the name, location and district of each shop.", "question_toks": ["Sort", "all", "the", "shops", "by", "amount", "of", "merchandise", "in", "descending", "order,", "and", "return", "the", "name,", "location", "and", "district", "of", "each", "shop."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 9, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name, Location, District FROM shop ORDER BY Number_products DESC;"}
{"db_id": "employee_hire_evaluation", "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "query_toks": ["SELECT", "name", "FROM", "shop", "WHERE", "number_products", ">", "(", "SELECT", "avg", "(", "number_products", ")", "FROM", "shop", ")"], "query_toks_no_value": ["select", "name", "from", "shop", "where", "number_products", ">", "(", "select", "avg", "(", "number_products", ")", "from", "shop", ")"], "question": "Find the names of stores that have more than average goods.", "question_toks": ["Find", "the", "names", "of", "stores", "that", "have", "more", "than", "average", "goods."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[false, 3, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);"}
{"db_id": "employee_hire_evaluation", "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "query_toks": ["SELECT", "name", "FROM", "shop", "WHERE", "number_products", ">", "(", "SELECT", "avg", "(", "number_products", ")", "FROM", "shop", ")"], "query_toks_no_value": ["select", "name", "from", "shop", "where", "number_products", ">", "(", "select", "avg", "(", "number_products", ")", "from", "shop", ")"], "question": "Which shops have more than average merchandise? Give me the shop names.", "question_toks": ["Which", "shops", "have", "more", "than", "average", "merchandise?", "Give", "me", "the", "shop", "names."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[false, 3, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);"}
{"db_id": "employee_hire_evaluation", "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "query_toks": ["SELECT", "t1.name", "FROM", "employee", "AS", "t1", "JOIN", "evaluation", "AS", "t2", "ON", "t1.Employee_ID", "=", "t2.Employee_ID", "ORDER", "BY", "t2.bonus", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1", ".", "employee_id", "=", "t2", ".", "employee_id", "order", "by", "t2", ".", "bonus", "desc", "limit", "value"], "question": "Find the name of the employee who got the highest one time incentive.", "question_toks": ["Find", "the", "name", "of", "the", "employee", "who", "got", "the", "highest", "one", "time", "incentive."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 15, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 17, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "employee.Name\nFROM employee\nJOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID\nWHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation)"}
{"db_id": "employee_hire_evaluation", "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "query_toks": ["SELECT", "t1.name", "FROM", "employee", "AS", "t1", "JOIN", "evaluation", "AS", "t2", "ON", "t1.Employee_ID", "=", "t2.Employee_ID", "ORDER", "BY", "t2.bonus", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1", ".", "employee_id", "=", "t2", ".", "employee_id", "order", "by", "t2", ".", "bonus", "desc", "limit", "value"], "question": "Which employee received the biggest incentive? Give me the employee name.", "question_toks": ["Which", "employee", "received", "the", "biggest", "incentive?", "Give", "me", "the", "employee", "name."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 15, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 17, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "employee.Name\nFROM employee\nJOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID\nORDER BY evaluation.Bonus DESC\nLIMIT 1;"}
{"db_id": "employee_hire_evaluation", "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.name", "FROM", "hiring", "AS", "t1", "JOIN", "shop", "AS", "t2", "ON", "t1.shop_id", "=", "t2.shop_id", "GROUP", "BY", "t1.shop_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1", ".", "shop_id", "=", "t2", ".", "shop_id", "group", "by", "t1", ".", "shop_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the shop that is recruiting the largest number of employees?", "question_toks": ["What", "is", "the", "name", "of", "the", "shop", "that", "is", "recruiting", "the", "largest", "number", "of", "employees?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 5, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 11, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "shop.Name \nFROM shop \nJOIN hiring ON shop.Shop_ID=hiring.Shop_ID \nGROUP BY shop.Name \nORDER BY COUNT(hiring.Employee_ID) DESC \nLIMIT 1;"}
{"db_id": "employee_hire_evaluation", "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.name", "FROM", "hiring", "AS", "t1", "JOIN", "shop", "AS", "t2", "ON", "t1.shop_id", "=", "t2.shop_id", "GROUP", "BY", "t1.shop_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1", ".", "shop_id", "=", "t2", ".", "shop_id", "group", "by", "t1", ".", "shop_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which shop has the most employees? Give me the shop name.", "question_toks": ["Which", "shop", "has", "the", "most", "employees?", "Give", "me", "the", "shop", "name."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 5, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 11, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "shop.Name \nFROM shop \nJOIN hiring ON shop.Shop_ID=hiring.Shop_ID \nGROUP BY shop.Shop_ID \nORDER BY COUNT(hiring.Employee_ID) DESC \nLIMIT 1;"}
{"db_id": "employee_hire_evaluation", "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "query_toks": ["SELECT", "name", "FROM", "shop", "WHERE", "shop_id", "NOT", "IN", "(", "SELECT", "shop_id", "FROM", "hiring", ")"], "query_toks_no_value": ["select", "name", "from", "shop", "where", "shop_id", "not", "in", "(", "select", "shop_id", "from", "hiring", ")"], "question": "Find the name of the shops that do not recruit any employee.", "question_toks": ["Find", "the", "name", "of", "the", "shops", "that", "do", "not", "recruit", "any", "employee."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[true, 8, [0, [0, 5, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID=hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;"}
{"db_id": "employee_hire_evaluation", "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "query_toks": ["SELECT", "name", "FROM", "shop", "WHERE", "shop_id", "NOT", "IN", "(", "SELECT", "shop_id", "FROM", "hiring", ")"], "query_toks_no_value": ["select", "name", "from", "shop", "where", "shop_id", "not", "in", "(", "select", "shop_id", "from", "hiring", ")"], "question": "Which shops run with no employees? Find the shop names", "question_toks": ["Which", "shops", "run", "with", "no", "employees?", "Find", "the", "shop", "names"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[true, 8, [0, [0, 5, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID=hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;"}
{"db_id": "employee_hire_evaluation", "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "query_toks": ["SELECT", "district", "FROM", "shop", "WHERE", "Number_products", "<", "3000", "INTERSECT", "SELECT", "district", "FROM", "shop", "WHERE", "Number_products", ">", "10000"], "query_toks_no_value": ["select", "district", "from", "shop", "where", "number_products", "<", "value", "intersect", "select", "district", "from", "shop", "where", "number_products", ">", "value"], "question": "Which district has both stores with less than 3000 goods and stores with more than 10000 goods?", "question_toks": ["Which", "district", "has", "both", "stores", "with", "less", "than", "3000", "goods", "and", "stores", "with", "more", "than", "10000", "goods?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [[false, 4, [0, [0, 9, false], null], 3000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [[false, 3, [0, [0, 9, false], null], 10000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "District \nFROM shop \nWHERE Number_products < 3000 \nINTERSECT \nSELECT District \nFROM shop \nWHERE Number_products > 10000;"}
{"db_id": "employee_hire_evaluation", "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "query_toks": ["SELECT", "district", "FROM", "shop", "WHERE", "Number_products", "<", "3000", "INTERSECT", "SELECT", "district", "FROM", "shop", "WHERE", "Number_products", ">", "10000"], "query_toks_no_value": ["select", "district", "from", "shop", "where", "number_products", "<", "value", "intersect", "select", "district", "from", "shop", "where", "number_products", ">", "value"], "question": "Find the districts in which there are both shops selling less than 3000 and more than 10000 merchandise.", "question_toks": ["Find", "the", "districts", "in", "which", "there", "are", "both", "shops", "selling", "less", "than", "3000", "and", "more", "than", "10000", "merchandise."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [[false, 4, [0, [0, 9, false], null], 3000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [[false, 3, [0, [0, 9, false], null], 10000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "District \nFROM shop \nWHERE Number_products < 3000 AND District IN \n    (SELECT District FROM shop WHERE Number_products > 10000);"}
{"db_id": "course_teach", "query": "SELECT Name FROM teacher ORDER BY Age ASC", "query_toks": ["SELECT", "Name", "FROM", "teacher", "ORDER", "BY", "Age", "ASC"], "query_toks_no_value": ["select", "name", "from", "teacher", "order", "by", "age", "asc"], "question": "List the names of teachers from youngest to oldest.", "question_toks": ["List", "the", "names", "of", "teachers", "from", "youngest", "to", "oldest."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 6, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM teacher ORDER BY Age ASC;"}
{"db_id": "course_teach", "query": "SELECT Name FROM teacher ORDER BY Age ASC", "query_toks": ["SELECT", "Name", "FROM", "teacher", "ORDER", "BY", "Age", "ASC"], "query_toks_no_value": ["select", "name", "from", "teacher", "order", "by", "age", "asc"], "question": "What are the names of the teachers  from youngest to oldest?", "question_toks": ["What", "are", "the", "names", "of", "the", "teachers", "from", "youngest", "to", "oldest?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 6, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM teacher ORDER BY Age ASC;"}
{"db_id": "course_teach", "query": "select name from teacher where hometown != \"little lever urban district\"", "query_toks": ["select", "name", "from", "teacher", "where", "hometown", "!=", "\"little lever urban district\""], "query_toks_no_value": ["select", "name", "from", "teacher", "where", "hometown", "!", "=", "value"], "question": "List the name of teachers who are not from Little Lever Urban District.", "question_toks": ["List", "the", "name", "of", "teachers", "who", "are", "not", "from", "Little", "Lever", "Urban", "District."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 7, [0, [0, 7, false], null], "\"little lever urban district\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM teacher WHERE Hometown != 'Little Lever Urban District';"}
{"db_id": "course_teach", "query": "select name from teacher where hometown != \"little lever urban district\"", "query_toks": ["select", "name", "from", "teacher", "where", "hometown", "!=", "\"little lever urban district\""], "query_toks_no_value": ["select", "name", "from", "teacher", "where", "hometown", "!", "=", "value"], "question": "What are the names of the teachers who do not come from Little Lever Urban District?", "question_toks": ["What", "are", "the", "names", "of", "the", "teachers", "who", "do", "not", "come", "from", "Little", "Lever", "Urban", "District?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 7, [0, [0, 7, false], null], "\"little lever urban district\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM teacher WHERE Hometown != 'Little Lever Urban District';"}
{"db_id": "course_teach", "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "query_toks": ["SELECT", "Name", "FROM", "teacher", "WHERE", "Age", "=", "32", "OR", "Age", "=", "33"], "query_toks_no_value": ["select", "name", "from", "teacher", "where", "age", "=", "value", "or", "age", "=", "value"], "question": "Show the name of teachers who are either 32 or 33 years old?", "question_toks": ["Show", "the", "name", "of", "teachers", "who", "are", "either", "32", "or", "33", "years", "old?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], 32.0, null], "or", [false, 2, [0, [0, 6, false], null], 33.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM teacher WHERE Age = 32 OR Age = 33;"}
{"db_id": "course_teach", "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "query_toks": ["SELECT", "Name", "FROM", "teacher", "WHERE", "Age", "=", "32", "OR", "Age", "=", "33"], "query_toks_no_value": ["select", "name", "from", "teacher", "where", "age", "=", "value", "or", "age", "=", "value"], "question": "What are the names of the teachers who are either 32 or 33?", "question_toks": ["What", "are", "the", "names", "of", "the", "teachers", "who", "are", "either", "32", "or", "33?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], 32.0, null], "or", [false, 2, [0, [0, 6, false], null], 33.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM teacher WHERE Age = 32 OR Age = 33;"}
{"db_id": "course_teach", "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "query_toks": ["SELECT", "Hometown", "FROM", "teacher", "ORDER", "BY", "Age", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "hometown", "from", "teacher", "order", "by", "age", "asc", "limit", "value"], "question": "What is the hometown of the youngest teacher?", "question_toks": ["What", "is", "the", "hometown", "of", "the", "youngest", "teacher?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 6, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher);"}
{"db_id": "course_teach", "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "query_toks": ["SELECT", "Hometown", "FROM", "teacher", "ORDER", "BY", "Age", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "hometown", "from", "teacher", "order", "by", "age", "asc", "limit", "value"], "question": "Where is the youngest teacher from?", "question_toks": ["Where", "is", "the", "youngest", "teacher", "from?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 6, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Hometown FROM teacher ORDER BY Age ASC LIMIT 1;"}
{"db_id": "course_teach", "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "query_toks": ["SELECT", "Hometown", ",", "COUNT", "(", "*", ")", "FROM", "teacher", "GROUP", "BY", "Hometown"], "query_toks_no_value": ["select", "hometown", ",", "count", "(", "*", ")", "from", "teacher", "group", "by", "hometown"], "question": "Show different hometown of teachers and the number of teachers from each place.", "question_toks": ["Show", "different", "hometown", "of", "teachers", "and", "the", "number", "of", "teachers", "from", "each", "place."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Hometown, COUNT(*) FROM teacher GROUP BY Hometown;"}
{"db_id": "course_teach", "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "query_toks": ["SELECT", "Hometown", ",", "COUNT", "(", "*", ")", "FROM", "teacher", "GROUP", "BY", "Hometown"], "query_toks_no_value": ["select", "hometown", ",", "count", "(", "*", ")", "from", "teacher", "group", "by", "hometown"], "question": "For each place, how many teachers are from there?", "question_toks": ["For", "each", "place,", "how", "many", "teachers", "are", "from", "there?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown;"}
{"db_id": "course_teach", "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Hometown", "FROM", "teacher", "GROUP", "BY", "Hometown", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "List the most common place that the teachers come from", "question_toks": ["List", "the", "most", "common", "place", "that", "the", "teachers", "come", "from"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Hometown, COUNT(*) as count \n FROM teacher \n GROUP BY Hometown \n ORDER BY count DESC \n LIMIT 1;"}
{"db_id": "course_teach", "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Hometown", "FROM", "teacher", "GROUP", "BY", "Hometown", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the towns from which at least two teachers come from?", "question_toks": ["What", "are", "the", "towns", "from", "which", "at", "least", "two", "teachers", "come", "from?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;"}
{"db_id": "course_teach", "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "query_toks": ["SELECT", "T3.Name", "FROM", "course_arrange", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.Course_ID", "=", "T2.Course_ID", "JOIN", "teacher", "AS", "T3", "ON", "T1.Teacher_ID", "=", "T3.Teacher_ID", "WHERE", "T2.Course", "=", "``", "Math", "''"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "join", "teacher", "as", "t3", "on", "t1", ".", "teacher_id", "=", "t3", ".", "teacher_id", "where", "t2", ".", "course", "=", "value"], "question": "Show the name of the teacher who teaches math .", "question_toks": ["Show", "the", "name", "of", "the", "teacher", "who", "teaches", "math", "."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], "\"Math\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "teacher.Name \nFROM teacher \nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nJOIN course ON course_arrange.Course_ID = course.Course_ID \nWHERE course.Course = 'math';"}
{"db_id": "course_teach", "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "query_toks": ["SELECT", "T3.Name", "FROM", "course_arrange", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.Course_ID", "=", "T2.Course_ID", "JOIN", "teacher", "AS", "T3", "ON", "T1.Teacher_ID", "=", "T3.Teacher_ID", "WHERE", "T2.Course", "=", "``", "Math", "''"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "join", "teacher", "as", "t3", "on", "t1", ".", "teacher_id", "=", "t3", ".", "teacher_id", "where", "t2", ".", "course", "=", "value"], "question": "What are the names of the people who teach math?", "question_toks": ["What", "are", "the", "names", "of", "the", "people", "who", "teach", "math?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], "\"Math\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "teacher.Name FROM teacher \n JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \n JOIN course ON course_arrange.Course_ID = course.Course_ID \n WHERE course.Course = 'math';"}
{"db_id": "course_teach", "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "query_toks": ["SELECT", "Name", "FROM", "teacher", "WHERE", "Teacher_id", "NOT", "IN", "(", "SELECT", "Teacher_id", "FROM", "course_arrange", ")"], "query_toks_no_value": ["select", "name", "from", "teacher", "where", "teacher_id", "not", "in", "(", "select", "teacher_id", "from", "course_arrange", ")"], "question": "List the names of teachers who have not been assigned to teach courses.", "question_toks": ["List", "the", "names", "of", "teachers", "who", "have", "not", "been", "assigned", "to", "teach", "courses."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[true, 8, [0, [0, 4, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "teacher.Name \n FROM teacher \n LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \n WHERE course_arrange.Teacher_ID IS NULL;"}
{"db_id": "course_teach", "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "query_toks": ["SELECT", "Name", "FROM", "teacher", "WHERE", "Teacher_id", "NOT", "IN", "(", "SELECT", "Teacher_id", "FROM", "course_arrange", ")"], "query_toks_no_value": ["select", "name", "from", "teacher", "where", "teacher_id", "not", "in", "(", "select", "teacher_id", "from", "course_arrange", ")"], "question": "What are the names of the teachers whose courses have not been assigned?", "question_toks": ["What", "are", "the", "names", "of", "the", "teachers", "whose", "courses", "have", "not", "been", "assigned?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[true, 8, [0, [0, 4, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "teacher.Name \nFROM teacher \nLEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nWHERE course_arrange.Teacher_ID IS NULL;"}
{"db_id": "museum_visit", "query": "SELECT count(*) FROM visitor WHERE age  <  30", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "visitor", "WHERE", "age", "<", "30"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "visitor", "where", "age", "<", "value"], "question": "How many visitors below  30 years old are there?", "question_toks": ["How", "many", "visitors", "below", "30", "years", "old", "are", "there?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 4, [0, [0, 8, false], null], 30.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM visitor WHERE Age < 30;"}
{"db_id": "museum_visit", "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "query_toks": ["SELECT", "name", "FROM", "visitor", "WHERE", "Level_of_membership", ">", "4", "ORDER", "BY", "Level_of_membership", "DESC"], "query_toks_no_value": ["select", "name", "from", "visitor", "where", "level_of_membership", ">", "value", "order", "by", "level_of_membership", "desc"], "question": "Find the names of the visitors that is higher than lv 4, and order the results by the level from high to low.", "question_toks": ["Find", "the", "names", "of", "the", "visitors", "that", "is", "higher", "than", "lv", "4,", "and", "order", "the", "results", "by", "the", "level", "from", "high", "to", "low."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[false, 3, [0, [0, 7, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 7, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;"}
{"db_id": "museum_visit", "query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "query_toks": ["SELECT", "avg", "(", "age", ")", "FROM", "visitor", "WHERE", "Level_of_membership", "<", "=", "4"], "query_toks_no_value": ["select", "avg", "(", "age", ")", "from", "visitor", "where", "level_of_membership", "<", "=", "value"], "question": "What is the average age of the visitors not higher than lv 4?", "question_toks": ["What", "is", "the", "average", "age", "of", "the", "visitors", "not", "higher", "than", "lv", "4?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 8, false], null]]]], "where": [[false, 6, [0, [0, 7, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(Age) FROM visitor WHERE Level_of_membership <= 4;"}
{"db_id": "museum_visit", "query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "query_toks": ["SELECT", "museum_id", ",", "name", "FROM", "museum", "ORDER", "BY", "num_of_staff", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "museum_id", ",", "name", "from", "museum", "order", "by", "num_of_staff", "desc", "limit", "value"], "question": "Find the id and name of the museum that has the most employees?", "question_toks": ["Find", "the", "id", "and", "name", "of", "the", "museum", "that", "has", "the", "most", "employees?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 3, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Museum_ID, Name \nFROM museum \nWHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum);"}
{"db_id": "museum_visit", "query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "query_toks": ["SELECT", "avg", "(", "num_of_staff", ")", "FROM", "museum", "WHERE", "open_year", "<", "2009"], "query_toks_no_value": ["select", "avg", "(", "num_of_staff", ")", "from", "museum", "where", "open_year", "<", "value"], "question": "Find the average number of staff working for the museums that were open before 2009.", "question_toks": ["Find", "the", "average", "number", "of", "staff", "working", "for", "the", "museums", "that", "were", "open", "before", "2009."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 3, false], null]]]], "where": [[false, 4, [0, [0, 4, false], null], 2009.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009;"}
{"db_id": "museum_visit", "query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "query_toks": ["SELECT", "Num_of_Staff", ",", "Open_Year", "FROM", "museum", "WHERE", "name", "=", "'Plaza", "Museum", "'"], "query_toks_no_value": ["select", "num_of_staff", ",", "open_year", "from", "museum", "where", "name", "=", "value"], "question": "What are the opening year and staff number of Plaza Museum?", "question_toks": ["What", "are", "the", "opening", "year", "and", "staff", "number", "of", "Plaza", "Museum?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Plaza Museum\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';"}
{"db_id": "museum_visit", "query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "query_toks": ["SELECT", "name", "FROM", "museum", "WHERE", "num_of_staff", ">", "(", "SELECT", "min", "(", "num_of_staff", ")", "FROM", "museum", "WHERE", "open_year", ">", "2010", ")"], "query_toks_no_value": ["select", "name", "from", "museum", "where", "num_of_staff", ">", "(", "select", "min", "(", "num_of_staff", ")", "from", "museum", "where", "open_year", ">", "value", ")"], "question": "find the names of museums which have more staff than the minimum of all museums opened after 2010.", "question_toks": ["find", "the", "names", "of", "museums", "which", "have", "more", "staff", "than", "the", "minimum", "of", "all", "museums", "opened", "after", "2010."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 3, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[2, [0, [0, 3, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 2010.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name \nFROM museum \nWHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010);"}
{"db_id": "museum_visit", "query": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "query_toks": ["SELECT", "t1.id", ",", "t1.name", ",", "t1.age", "FROM", "visitor", "AS", "t1", "JOIN", "visit", "AS", "t2", "ON", "t1.id", "=", "t2.visitor_id", "GROUP", "BY", "t1.id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", ",", "t1", ".", "age", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "visitor_id", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", ">", "value"], "question": "find the id, name and age for people who visited some museums more than once.", "question_toks": ["find", "the", "id,", "name", "and", "age", "for", "people", "who", "visited", "some", "museums", "more", "than", "once."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]], [0, [0, [0, 6, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "visitor.ID, visitor.Name, visitor.Age\n FROM visit\n JOIN visitor ON visit.visitor_ID = visitor.ID\n GROUP BY visit.visitor_ID\n HAVING COUNT(DISTINCT visit.Museum_ID) > 1;"}
{"db_id": "museum_visit", "query": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "query_toks": ["SELECT", "t2.visitor_id", ",", "t1.name", ",", "t1.Level_of_membership", "FROM", "visitor", "AS", "t1", "JOIN", "visit", "AS", "t2", "ON", "t1.id", "=", "t2.visitor_id", "GROUP", "BY", "t2.visitor_id", "ORDER", "BY", "sum", "(", "t2.Total_spent", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "visitor_id", ",", "t1", ".", "name", ",", "t1", ".", "level_of_membership", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "visitor_id", "group", "by", "t2", ".", "visitor_id", "order", "by", "sum", "(", "t2", ".", "total_spent", ")", "desc", "limit", "value"], "question": "What are the id, name and membership level of people who have paid the largest amount of money overall in all museum tickets?", "question_toks": ["What", "are", "the", "id,", "name", "and", "membership", "level", "of", "people", "who", "have", "paid", "the", "largest", "amount", "of", "money", "overall", "in", "all", "museum", "tickets?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [4, 12, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "visitor.ID, visitor.Name, visitor.Level_of_membership \n FROM visitor \n JOIN visit ON visitor.ID = visit.visitor_ID \n GROUP BY visitor.ID \n ORDER BY SUM(Total_spent) DESC \n LIMIT 1;"}
{"db_id": "museum_visit", "query": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.Museum_ID", ",", "t1.name", "FROM", "museum", "AS", "t1", "JOIN", "visit", "AS", "t2", "ON", "t1.Museum_ID", "=", "t2.Museum_ID", "GROUP", "BY", "t2.Museum_ID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "museum_id", ",", "t1", ".", "name", "from", "museum", "as", "t1", "join", "visit", "as", "t2", "on", "t1", ".", "museum_id", "=", "t2", ".", "museum_id", "group", "by", "t2", ".", "museum_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the id and name of the museum that has people come most times?", "question_toks": ["What", "are", "the", "id", "and", "name", "of", "the", "museum", "that", "has", "people", "come", "most", "times?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "museum.Museum_ID, museum.Name\nFROM museum\nJOIN visit ON museum.Museum_ID = visit.Museum_ID\nGROUP BY museum.Museum_ID\nORDER BY SUM(visit.Num_of_Ticket) DESC\nLIMIT 1;"}
{"db_id": "museum_visit", "query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)", "query_toks": ["SELECT", "name", "FROM", "museum", "WHERE", "Museum_ID", "NOT", "IN", "(", "SELECT", "museum_id", "FROM", "visit", ")"], "query_toks_no_value": ["select", "name", "from", "museum", "where", "museum_id", "not", "in", "(", "select", "museum_id", "from", "visit", ")"], "question": "What is the name of the museum that had no person come yet?", "question_toks": ["What", "is", "the", "name", "of", "the", "museum", "that", "had", "no", "person", "come", "yet?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit);"}
{"db_id": "museum_visit", "query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "query_toks": ["SELECT", "t1.name", ",", "t1.age", "FROM", "visitor", "AS", "t1", "JOIN", "visit", "AS", "t2", "ON", "t1.id", "=", "t2.visitor_id", "ORDER", "BY", "t2.num_of_ticket", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "age", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "visitor_id", "order", "by", "t2", ".", "num_of_ticket", "desc", "limit", "value"], "question": "Find the name and age of the people who bought the most tickets at once.", "question_toks": ["Find", "the", "name", "and", "age", "of", "the", "people", "who", "bought", "the", "most", "tickets", "at", "once."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 11, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "visitor.Name, visitor.Age\n FROM visit\n JOIN visitor ON visit.visitor_ID = visitor.ID\n WHERE visit.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)"}
{"db_id": "museum_visit", "query": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "query_toks": ["SELECT", "sum", "(", "t2.Total_spent", ")", "FROM", "visitor", "AS", "t1", "JOIN", "visit", "AS", "t2", "ON", "t1.id", "=", "t2.visitor_id", "WHERE", "t1.Level_of_membership", "=", "1"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "total_spent", ")", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "visitor_id", "where", "t1", ".", "level_of_membership", "=", "value"], "question": "What is the total ticket expense of the lv 1 visitors?", "question_toks": ["What", "is", "the", "total", "ticket", "expense", "of", "the", "lv", "1", "visitors?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 10, false], null]]}, "select": [false, [[4, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], 1.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "SUM(Total_spent) FROM visit JOIN visitor ON visit.visitor_ID=visitor.ID WHERE Level_of_membership=1;"}
{"db_id": "wta_1", "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "query_toks": ["SELECT", "first_name", ",", "birth_date", "FROM", "players", "WHERE", "country_code", "=", "'USA", "'"], "query_toks_no_value": ["select", "first_name", ",", "birth_date", "from", "players", "where", "country_code", "=", "value"], "question": "List the first name and birth date of all players from USA.", "question_toks": ["List", "the", "first", "name", "and", "birth", "date", "of", "all", "players", "from", "USA."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"USA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "first_name, birth_date FROM players WHERE country_code = 'USA';"}
{"db_id": "wta_1", "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "query_toks": ["SELECT", "first_name", ",", "birth_date", "FROM", "players", "WHERE", "country_code", "=", "'USA", "'"], "query_toks_no_value": ["select", "first_name", ",", "birth_date", "from", "players", "where", "country_code", "=", "value"], "question": "What are the first names and birth dates of players from the USA?", "question_toks": ["What", "are", "the", "first", "names", "and", "birth", "dates", "of", "players", "from", "the", "USA?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"USA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "first_name, birth_date FROM players WHERE country_code = 'USA';"}
{"db_id": "wta_1", "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "query_toks": ["SELECT", "tourney_name", "FROM", "matches", "GROUP", "BY", "tourney_name", "HAVING", "count", "(", "*", ")", ">", "10"], "query_toks_no_value": ["select", "tourney_name", "from", "matches", "group", "by", "tourney_name", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the name of tournament that has more than 10 matches.", "question_toks": ["Find", "the", "name", "of", "tournament", "that", "has", "more", "than", "10", "matches."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 27, false], null]]]], "where": [], "groupBy": [[0, 27, false]], "having": [[false, 3, [0, [3, 0, false], null], 10.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;"}
{"db_id": "wta_1", "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "query_toks": ["SELECT", "tourney_name", "FROM", "matches", "GROUP", "BY", "tourney_name", "HAVING", "count", "(", "*", ")", ">", "10"], "query_toks_no_value": ["select", "tourney_name", "from", "matches", "group", "by", "tourney_name", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names of tournaments that have more than 10 matches?", "question_toks": ["What", "are", "the", "names", "of", "tournaments", "that", "have", "more", "than", "10", "matches?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 27, false], null]]]], "where": [], "groupBy": [[0, 27, false]], "having": [[false, 3, [0, [3, 0, false], null], 10.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;"}
{"db_id": "wta_1", "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "query_toks": ["SELECT", "winner_name", "FROM", "matches", "WHERE", "YEAR", "=", "2013", "INTERSECT", "SELECT", "winner_name", "FROM", "matches", "WHERE", "YEAR", "=", "2016"], "query_toks_no_value": ["select", "winner_name", "from", "matches", "where", "year", "=", "value", "intersect", "select", "winner_name", "from", "matches", "where", "year", "=", "value"], "question": "List the names of all winners who played in both 2013 and 2016.", "question_toks": ["List", "the", "names", "of", "all", "winners", "who", "played", "in", "both", "2013", "and", "2016."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], 2013.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], 2016.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "winner_name \nFROM matches \nWHERE year = 2013 AND winner_name IN (SELECT winner_name FROM matches WHERE year = 2016);"}
{"db_id": "wta_1", "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "query_toks": ["SELECT", "winner_name", "FROM", "matches", "WHERE", "YEAR", "=", "2013", "INTERSECT", "SELECT", "winner_name", "FROM", "matches", "WHERE", "YEAR", "=", "2016"], "query_toks_no_value": ["select", "winner_name", "from", "matches", "where", "year", "=", "value", "intersect", "select", "winner_name", "from", "matches", "where", "year", "=", "value"], "question": "What are the names of players who won in both 2013 and 2016?", "question_toks": ["What", "are", "the", "names", "of", "players", "who", "won", "in", "both", "2013", "and", "2016?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], 2013.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], 2016.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "winner_name \nFROM matches \nJOIN players ON matches.winner_id=players.player_id \nWHERE year=2013 AND winner_name IN (SELECT winner_name FROM matches WHERE year=2016);"}
{"db_id": "wta_1", "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "matches", "WHERE", "YEAR", "=", "2013", "OR", "YEAR", "=", "2016"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "matches", "where", "year", "=", "value", "or", "year", "=", "value"], "question": "List the number of all matches who played in 2013 or 2016.", "question_toks": ["List", "the", "number", "of", "all", "matches", "who", "played", "in", "2013", "or", "2016."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], 2013.0, null], "or", [false, 2, [0, [0, 38, false], null], 2016.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM matches WHERE year IN (2013, 2016);"}
{"db_id": "wta_1", "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "matches", "WHERE", "YEAR", "=", "2013", "OR", "YEAR", "=", "2016"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "matches", "where", "year", "=", "value", "or", "year", "=", "value"], "question": "How many matches were played in 2013 or 2016?", "question_toks": ["How", "many", "matches", "were", "played", "in", "2013", "or", "2016?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], 2013.0, null], "or", [false, 2, [0, [0, 38, false], null], 2016.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;"}
{"db_id": "wta_1", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "query_toks": ["SELECT", "T1.country_code", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "matches", "AS", "T2", "ON", "T1.player_id", "=", "T2.winner_id", "WHERE", "T2.tourney_name", "=", "'WTA", "Championships", "'", "INTERSECT", "SELECT", "T1.country_code", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "matches", "AS", "T2", "ON", "T1.player_id", "=", "T2.winner_id", "WHERE", "T2.tourney_name", "=", "'Australian", "Open", "'"], "query_toks_no_value": ["select", "t1", ".", "country_code", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "winner_id", "where", "t2", ".", "tourney_name", "=", "value", "intersect", "select", "t1", ".", "country_code", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "winner_id", "where", "t2", ".", "tourney_name", "=", "value"], "question": "What are the country code and first name of the players who won in both WTA Championships and Australian Open?", "question_toks": ["What", "are", "the", "country", "code", "and", "first", "name", "of", "the", "players", "who", "won", "in", "both", "WTA", "Championships", "and", "Australian", "Open?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 32, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"WTA Championships\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 32, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"Australian Open\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "players.country_code, players.first_name\n FROM matches\n JOIN players ON matches.winner_id=players.player_id\n WHERE (matches.tourney_name='WTA Championships' AND matches.tourney_level='F') \n AND EXISTS (SELECT 1 FROM matches WHERE matches.tourney_name='Australian Open' AND matches.tourney_level='G' AND matches.winner_id=players.player_id)\n GROUP BY players.country_code, players.first_name;"}
{"db_id": "wta_1", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "query_toks": ["SELECT", "T1.country_code", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "matches", "AS", "T2", "ON", "T1.player_id", "=", "T2.winner_id", "WHERE", "T2.tourney_name", "=", "'WTA", "Championships", "'", "INTERSECT", "SELECT", "T1.country_code", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "matches", "AS", "T2", "ON", "T1.player_id", "=", "T2.winner_id", "WHERE", "T2.tourney_name", "=", "'Australian", "Open", "'"], "query_toks_no_value": ["select", "t1", ".", "country_code", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "winner_id", "where", "t2", ".", "tourney_name", "=", "value", "intersect", "select", "t1", ".", "country_code", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "winner_id", "where", "t2", ".", "tourney_name", "=", "value"], "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "question_toks": ["What", "are", "the", "first", "names", "and", "country", "codes", "for", "players", "who", "won", "both", "the", "WTA", "Championships", "and", "the", "Australian", "Open?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 32, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"WTA Championships\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 32, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"Australian Open\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "players.first_name, players.country_code\n FROM players\n JOIN matches ON matches.winner_id = players.player_id\n WHERE matches.tourney_name = 'WTA Championships' AND matches.year IN (2008, 2012)\n AND EXISTS (\n SELECT 1 FROM matches\n WHERE matches.winner_id = players.player_id\n AND matches.tourney_name = 'Australian Open'\n AND matches.year IN (2009, 2013)\n );"}
{"db_id": "wta_1", "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "query_toks": ["SELECT", "first_name", ",", "country_code", "FROM", "players", "ORDER", "BY", "birth_date", "LIMIT", "1"], "query_toks_no_value": ["select", "first_name", ",", "country_code", "from", "players", "order", "by", "birth_date", "limit", "value"], "question": "Find the first name and country code of the oldest player.", "question_toks": ["Find", "the", "first", "name", "and", "country", "code", "of", "the", "oldest", "player."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;"}
{"db_id": "wta_1", "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "query_toks": ["SELECT", "first_name", ",", "country_code", "FROM", "players", "ORDER", "BY", "birth_date", "LIMIT", "1"], "query_toks_no_value": ["select", "first_name", ",", "country_code", "from", "players", "order", "by", "birth_date", "limit", "value"], "question": "What is the first name and country code of the oldest player?", "question_toks": ["What", "is", "the", "first", "name", "and", "country", "code", "of", "the", "oldest", "player?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "players.first_name, players.country_code \n FROM players \n WHERE players.birth_date = (SELECT MIN(birth_date) FROM players);"}
{"db_id": "wta_1", "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "players", "ORDER", "BY", "birth_date"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "players", "order", "by", "birth_date"], "question": "List the first and last name of all players ordered by their age.", "question_toks": ["List", "the", "first", "and", "last", "name", "of", "all", "players", "ordered", "by", "their", "age."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "first_name, last_name FROM players ORDER BY birth_date;"}
{"db_id": "wta_1", "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "players", "ORDER", "BY", "birth_date"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "players", "order", "by", "birth_date"], "question": "What are the full names of all players, sorted by age?", "question_toks": ["What", "are", "the", "full", "names", "of", "all", "players,", "sorted", "by", "age?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "first_name || ' ' || last_name AS full_name\nFROM players\nORDER BY birth_date ASC;"}
{"db_id": "wta_1", "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "players", "WHERE", "hand", "=", "'L", "'", "ORDER", "BY", "birth_date"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "players", "where", "hand", "=", "value", "order", "by", "birth_date"], "question": "List the first and last name of all players who are left handed  in the order of age.", "question_toks": ["List", "the", "first", "and", "last", "name", "of", "all", "players", "who", "are", "left", "handed", "in", "the", "order", "of", "age."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"L\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "first_name, last_name \nFROM players \nWHERE hand = 'L' \nORDER BY birth_date;"}
{"db_id": "wta_1", "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "players", "WHERE", "hand", "=", "'L", "'", "ORDER", "BY", "birth_date"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "players", "where", "hand", "=", "value", "order", "by", "birth_date"], "question": "What are the full names of all left handed players, in order of age?", "question_toks": ["What", "are", "the", "full", "names", "of", "all", "left", "handed", "players,", "in", "order", "of", "age?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"L\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "first_name || ' ' || last_name AS full_name\nFROM players\nWHERE hand = 'L'\nORDER BY birth_date ASC;"}
{"db_id": "wta_1", "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "winner_name", ",", "winner_rank_points", "FROM", "matches", "GROUP", "BY", "winner_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "winner_name", ",", "winner_rank_points", "from", "matches", "group", "by", "winner_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name and rank points of the person who won the most times.", "question_toks": ["Find", "the", "name", "and", "rank", "points", "of", "the", "person", "who", "won", "the", "most", "times."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 36, false], null]]]], "where": [], "groupBy": [[0, 34, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "winner_name, SUM(winner_rank_points) AS total_rank_points\n FROM matches\n JOIN players ON matches.winner_id=players.player_id\n GROUP BY winner_name\n ORDER BY COUNT(*) DESC\n LIMIT 1;"}
{"db_id": "wta_1", "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "winner_name", ",", "winner_rank_points", "FROM", "matches", "GROUP", "BY", "winner_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "winner_name", ",", "winner_rank_points", "from", "matches", "group", "by", "winner_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the player who has won the most matches, and how many rank points does this player have?", "question_toks": ["What", "is", "the", "name", "of", "the", "player", "who", "has", "won", "the", "most", "matches,", "and", "how", "many", "rank", "points", "does", "this", "player", "have?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 36, false], null]]]], "where": [], "groupBy": [[0, 34, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "players.first_name || ' ' || players.last_name AS player_name, MAX(winner_matches.wins) AS max_wins, winner_matches.winner_rank_points\n FROM players\n JOIN (\n   SELECT winner_id, COUNT(*) AS wins, winner_rank_points\n   FROM matches\n   GROUP BY winner_id\n ) AS winner_matches ON players.player_id = winner_matches.winner_id\n GROUP BY players.player_id\n ORDER BY max_wins DESC\n LIMIT 1;"}
{"db_id": "wta_1", "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "query_toks": ["SELECT", "winner_name", "FROM", "matches", "WHERE", "tourney_name", "=", "'Australian", "Open", "'", "ORDER", "BY", "winner_rank_points", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "winner_name", "from", "matches", "where", "tourney_name", "=", "value", "order", "by", "winner_rank_points", "desc", "limit", "value"], "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open.", "question_toks": ["Find", "the", "name", "of", "the", "winner", "who", "has", "the", "highest", "rank", "points", "and", "participated", "in", "the", "Australian", "Open."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"Australian Open\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 36, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "winner_name \nFROM matches \nJOIN players ON matches.winner_id=players.player_id \nJOIN rankings ON players.player_id=rankings.player_id \nWHERE tourney_name='Australian Open' \nORDER BY ranking_points DESC \nLIMIT 1;"}
{"db_id": "wta_1", "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "query_toks": ["SELECT", "winner_name", "FROM", "matches", "WHERE", "tourney_name", "=", "'Australian", "Open", "'", "ORDER", "BY", "winner_rank_points", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "winner_name", "from", "matches", "where", "tourney_name", "=", "value", "order", "by", "winner_rank_points", "desc", "limit", "value"], "question": "What is the name of the winner with the most rank points who participated in the Australian Open?", "question_toks": ["What", "is", "the", "name", "of", "the", "winner", "with", "the", "most", "rank", "points", "who", "participated", "in", "the", "Australian", "Open?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"Australian Open\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 36, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "winner_name \nFROM matches \nJOIN players ON matches.winner_id=players.player_id \nJOIN rankings ON players.player_id=rankings.player_id \nWHERE tourney_name='Australian Open' \nORDER BY ranking_points DESC \nLIMIT 1;"}
{"db_id": "wta_1", "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "query_toks": ["SELECT", "winner_name", ",", "loser_name", "FROM", "matches", "ORDER", "BY", "minutes", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "winner_name", ",", "loser_name", "from", "matches", "order", "by", "minutes", "desc", "limit", "value"], "question": "find the names of loser and winner who played in the match that last for the longest of time.", "question_toks": ["find", "the", "names", "of", "loser", "and", "winner", "who", "played", "in", "the", "match", "that", "last", "for", "the", "longest", "of", "time."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "loser_name, winner_name \nFROM matches \nWHERE minutes = (SELECT MAX(minutes) FROM matches);"}
{"db_id": "wta_1", "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "query_toks": ["SELECT", "winner_name", ",", "loser_name", "FROM", "matches", "ORDER", "BY", "minutes", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "winner_name", ",", "loser_name", "from", "matches", "order", "by", "minutes", "desc", "limit", "value"], "question": "What are the names of the winner and loser who played in the longest match?", "question_toks": ["What", "are", "the", "names", "of", "the", "winner", "and", "loser", "who", "played", "in", "the", "longest", "match?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "matches.winner_name, matches.loser_name\n FROM matches\n WHERE minutes = (SELECT MAX(minutes) FROM matches);"}
{"db_id": "wta_1", "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "country_code", "FROM", "players", "GROUP", "BY", "country_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "country_code", "from", "players", "group", "by", "country_code"], "question": "find the number of players for each nation.", "question_toks": ["find", "the", "number", "of", "players", "for", "each", "nation."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "country_code, COUNT(*) \n FROM players \n GROUP BY country_code;"}
{"db_id": "wta_1", "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "country_code", "FROM", "players", "GROUP", "BY", "country_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "country_code", "from", "players", "group", "by", "country_code"], "question": "How many players are from each nation?", "question_toks": ["How", "many", "players", "are", "from", "each", "nation?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "country_code, COUNT(*) FROM players GROUP BY country_code;"}
{"db_id": "wta_1", "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "country_code", "FROM", "players", "GROUP", "BY", "country_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "country_code", "from", "players", "group", "by", "country_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "find the code of the nation where has the greatest number of players.", "question_toks": ["find", "the", "code", "of", "the", "nation", "where", "has", "the", "greatest", "number", "of", "players."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;"}
{"db_id": "wta_1", "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "country_code", "FROM", "players", "GROUP", "BY", "country_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "country_code", "from", "players", "group", "by", "country_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the code of the nation with the most players?", "question_toks": ["What", "is", "the", "code", "of", "the", "nation", "with", "the", "most", "players?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;"}
{"db_id": "wta_1", "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "query_toks": ["SELECT", "country_code", "FROM", "players", "GROUP", "BY", "country_code", "HAVING", "count", "(", "*", ")", ">", "50"], "query_toks_no_value": ["select", "country_code", "from", "players", "group", "by", "country_code", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the codes of nations that have more than 50 players.", "question_toks": ["Find", "the", "codes", "of", "nations", "that", "have", "more", "than", "50", "players."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 3, [0, [3, 0, false], null], 50.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;"}
{"db_id": "wta_1", "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "query_toks": ["SELECT", "country_code", "FROM", "players", "GROUP", "BY", "country_code", "HAVING", "count", "(", "*", ")", ">", "50"], "query_toks_no_value": ["select", "country_code", "from", "players", "group", "by", "country_code", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the codes of nations with more than 50 players?", "question_toks": ["What", "are", "the", "codes", "of", "nations", "with", "more", "than", "50", "players?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 3, [0, [3, 0, false], null], 50.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;"}
{"db_id": "wta_1", "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "query_toks": ["SELECT", "DISTINCT", "winner_name", ",", "winner_rank", "FROM", "matches", "ORDER", "BY", "winner_age", "LIMIT", "3"], "query_toks_no_value": ["select", "distinct", "winner_name", ",", "winner_rank", "from", "matches", "order", "by", "winner_age", "limit", "value"], "question": "Find the name and rank of the 3 youngest victors across all matches.", "question_toks": ["Find", "the", "name", "and", "rank", "of", "the", "3", "youngest", "victors", "across", "all", "matches."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [true, [[0, [0, [0, 34, false], null]], [0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 28, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "Prediction": "winner_name, winner_rank \n FROM matches \n JOIN players ON matches.winner_id=players.player_id \n ORDER BY winner_age ASC \n LIMIT 3;"}
{"db_id": "wta_1", "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "query_toks": ["SELECT", "DISTINCT", "winner_name", ",", "winner_rank", "FROM", "matches", "ORDER", "BY", "winner_age", "LIMIT", "3"], "query_toks_no_value": ["select", "distinct", "winner_name", ",", "winner_rank", "from", "matches", "order", "by", "winner_age", "limit", "value"], "question": "What are the names and ranks of the three youngest victors across all matches?", "question_toks": ["What", "are", "the", "names", "and", "ranks", "of", "the", "three", "youngest", "victors", "across", "all", "matches?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [true, [[0, [0, [0, 34, false], null]], [0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 28, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "Prediction": "winner_name, winner_rank \n FROM matches \n JOIN players ON matches.winner_id=players.player_id \n ORDER BY winner_age ASC \n LIMIT 3;"}
{"db_id": "wta_1", "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "winner_name", ")", "FROM", "matches", "WHERE", "tourney_name", "=", "'WTA", "Championships", "'", "AND", "winner_hand", "=", "'L", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "winner_name", ")", "from", "matches", "where", "tourney_name", "=", "value", "and", "winner_hand", "=", "value"], "question": "How many different winners both participated in the WTA Championships and were left handed?", "question_toks": ["How", "many", "different", "winners", "both", "participated", "in", "the", "WTA", "Championships", "and", "were", "left", "handed?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 34, true], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"WTA Championships\"", null], "and", [false, 2, [0, [0, 30, false], null], "\"L\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(DISTINCT winner_id) FROM matches \nWHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';"}
{"db_id": "wta_1", "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "winner_name", ")", "FROM", "matches", "WHERE", "tourney_name", "=", "'WTA", "Championships", "'", "AND", "winner_hand", "=", "'L", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "winner_name", ")", "from", "matches", "where", "tourney_name", "=", "value", "and", "winner_hand", "=", "value"], "question": "Find the number of left handed winners who participated in the WTA Championships.", "question_toks": ["Find", "the", "number", "of", "left", "handed", "winners", "who", "participated", "in", "the", "WTA", "Championships."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 34, true], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"WTA Championships\"", null], "and", [false, 2, [0, [0, 30, false], null], "\"L\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM matches \nJOIN players ON matches.winner_id=players.player_id \nWHERE winner_hand='L' AND tourney_name='WTA Championships';"}
{"db_id": "battle_death", "query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "ship", "WHERE", "disposition_of_ship", "=", "'Captured", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "ship", "where", "disposition_of_ship", "=", "value"], "question": "How many ships ended up being Captured?", "question_toks": ["How", "many", "ships", "ended", "up", "being", "Captured?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"Captured\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';"}
{"db_id": "battle_death", "query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "query_toks": ["SELECT", "T1.id", ",", "T1.name", "FROM", "battle", "AS", "T1", "JOIN", "ship", "AS", "T2", "ON", "T1.id", "=", "T2.lost_in_battle", "JOIN", "death", "AS", "T3", "ON", "T2.id", "=", "T3.caused_by_ship_id", "GROUP", "BY", "T1.id", "HAVING", "sum", "(", "T3.killed", ")", ">", "10"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "lost_in_battle", "join", "death", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "caused_by_ship_id", "group", "by", "t1", ".", "id", "having", "sum", "(", "t3", ".", "killed", ")", ">", "value"], "question": "What are the ids and names of the battles that led to more than 10 people died.", "question_toks": ["What", "are", "the", "ids", "and", "names", "of", "the", "battles", "that", "led", "to", "more", "than", "10", "people", "died."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 7, false], null], "and", [false, 2, [0, [0, 8, false], null], [0, 14, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [[false, 3, [0, [4, 17, false], null], 10.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "battle.id, battle.name \n FROM battle \n JOIN death ON battle.id = death.caused_by_ship_id \n GROUP BY battle.id \n HAVING COUNT(death.killed) > 10;"}
{"db_id": "battle_death", "query": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.id", ",", "T2.name", "FROM", "death", "AS", "T1", "JOIN", "ship", "AS", "t2", "ON", "T1.caused_by_ship_id", "=", "T2.id", "GROUP", "BY", "T2.id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "id", ",", "t2", ".", "name", "from", "death", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "caused_by_ship_id", "=", "t2", ".", "id", "group", "by", "t2", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the ship id and name that caused most total injuries?", "question_toks": ["What", "is", "the", "ship", "id", "and", "name", "that", "caused", "most", "total", "injuries?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 14, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "ship.id, ship.name\n FROM ship\n JOIN death ON death.caused_by_ship_id = ship.id\n GROUP BY ship.id\n ORDER BY SUM(death.injured) DESC\n LIMIT 1;"}
{"db_id": "battle_death", "query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "query_toks": ["SELECT", "T1.name", ",", "T1.date", "FROM", "battle", "AS", "T1", "JOIN", "ship", "AS", "T2", "ON", "T1.id", "=", "T2.lost_in_battle", "WHERE", "T2.name", "=", "'Lettice", "'", "INTERSECT", "SELECT", "T1.name", ",", "T1.date", "FROM", "battle", "AS", "T1", "JOIN", "ship", "AS", "T2", "ON", "T1.id", "=", "T2.lost_in_battle", "WHERE", "T2.name", "=", "'HMS", "Atalanta", "'"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "date", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "lost_in_battle", "where", "t2", ".", "name", "=", "value", "intersect", "select", "t1", ".", "name", ",", "t1", ".", "date", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "lost_in_battle", "where", "t2", ".", "name", "=", "value"], "question": "List the name and date the battle that has lost  Lettice and HMS Atalanta", "question_toks": ["List", "the", "name", "and", "date", "the", "battle", "that", "has", "lost", "Lettice", "and", "HMS", "Atalanta"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 7, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Lettice\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 7, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"HMS Atalanta\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "battle.name, battle.date\n FROM battle\n JOIN ship ON ship.lost_in_battle = battle.id\n WHERE (ship.name = 'Lettice' AND ship.ship_type = 'HMS Atalanta');"}
{"db_id": "battle_death", "query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "query_toks": ["SELECT", "name", ",", "RESULT", ",", "bulgarian_commander", "FROM", "battle", "EXCEPT", "SELECT", "T1.name", ",", "T1.result", ",", "T1.bulgarian_commander", "FROM", "battle", "AS", "T1", "JOIN", "ship", "AS", "T2", "ON", "T1.id", "=", "T2.lost_in_battle", "WHERE", "T2.location", "=", "'English", "Channel", "'"], "query_toks_no_value": ["select", "name", ",", "result", ",", "bulgarian_commander", "from", "battle", "except", "select", "t1", ".", "name", ",", "t1", ".", "result", ",", "t1", ".", "bulgarian_commander", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "lost_in_battle", "where", "t2", ".", "location", "=", "value"], "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "question_toks": ["Show", "names,", "results", "and", "bulgarian", "commanders", "of", "the", "battles", "with", "no", "ships", "lost", "in", "the", "'English", "Channel'."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 6, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 7, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 6, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"English Channel\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "Prediction": "battle.name, battle.result, battle.bulgarian_commander \n FROM battle \n LEFT JOIN ship ON ship.lost_in_battle = battle.id \n WHERE ship.location = 'English Channel' OR ship.location IS NULL;"}
{"db_id": "student_transcripts_tracking", "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "query_toks": ["SELECT", "course_description", "FROM", "Courses", "WHERE", "course_name", "=", "'math", "'"], "query_toks_no_value": ["select", "course_description", "from", "courses", "where", "course_name", "=", "value"], "question": "How is the math described?", "question_toks": ["How", "is", "the", "math", "described?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"math\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "description FROM math_table;"}
{"db_id": "student_transcripts_tracking", "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "query_toks": ["SELECT", "course_description", "FROM", "Courses", "WHERE", "course_name", "=", "'math", "'"], "query_toks_no_value": ["select", "course_description", "from", "courses", "where", "course_name", "=", "value"], "question": "What are the descriptions for all the math?", "question_toks": ["What", "are", "the", "descriptions", "for", "all", "the", "math?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"math\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "description FROM math;"}
{"db_id": "student_transcripts_tracking", "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "query_toks": ["SELECT", "zip_postcode", "FROM", "Addresses", "WHERE", "city", "=", "'Port", "Chelsea", "'"], "query_toks_no_value": ["select", "zip_postcode", "from", "addresses", "where", "city", "=", "value"], "question": "What is the zip code of the address in Port Chelsea?", "question_toks": ["What", "is", "the", "zip", "code", "of", "the", "address", "in", "Port", "Chelsea?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Port Chelsea\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "zip_postcode FROM Addresses WHERE city = 'Port Chelsea';"}
{"db_id": "student_transcripts_tracking", "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "query_toks": ["SELECT", "zip_postcode", "FROM", "Addresses", "WHERE", "city", "=", "'Port", "Chelsea", "'"], "query_toks_no_value": ["select", "zip_postcode", "from", "addresses", "where", "city", "=", "value"], "question": "What is the zip code for Port Chelsea?", "question_toks": ["What", "is", "the", "zip", "code", "for", "Port", "Chelsea?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Port Chelsea\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "zip_postcode FROM Addresses WHERE city = 'Port Chelsea';"}
{"db_id": "student_transcripts_tracking", "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "query_toks": ["SELECT", "T1.last_name", "FROM", "Students", "AS", "T1", "JOIN", "Addresses", "AS", "T2", "ON", "T1.current_address_id", "=", "T2.address_id", "WHERE", "T2.state_province_county", "=", "'NorthCarolina", "'", "EXCEPT", "SELECT", "DISTINCT", "T3.last_name", "FROM", "Students", "AS", "T3", "JOIN", "Student_Enrolment", "AS", "T4", "ON", "T3.student_id", "=", "T4.student_id"], "query_toks_no_value": ["select", "t1", ".", "last_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1", ".", "current_address_id", "=", "t2", ".", "address_id", "where", "t2", ".", "state_province_county", "=", "value", "except", "select", "distinct", "t3", ".", "last_name", "from", "students", "as", "t3", "join", "student_enrolment", "as", "t4", "on", "t3", ".", "student_id", "=", "t4", ".", "student_id"], "question": "Find the last name of the students who currently live in North Carolina but have not registered in any degree program.", "question_toks": ["Find", "the", "last", "name", "of", "the", "students", "who", "currently", "live", "in", "North", "Carolina", "but", "have", "not", "registered", "in", "any", "degree", "program."], "sql": {"from": {"table_units": [["table_unit", 6], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 37, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"NorthCarolina\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null]]}, "select": [true, [[0, [0, [0, 37, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "Prediction": "Students.last_name \nFROM Students \nJOIN Addresses ON Students.current_address_id = Addresses.address_id \nWHERE Addresses.state_province_county = 'North Carolina' \nAND Students.student_id NOT IN (SELECT student_id FROM Student_Enrolment);"}
{"db_id": "student_transcripts_tracking", "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "query_toks": ["SELECT", "T1.last_name", "FROM", "Students", "AS", "T1", "JOIN", "Addresses", "AS", "T2", "ON", "T1.current_address_id", "=", "T2.address_id", "WHERE", "T2.state_province_county", "=", "'NorthCarolina", "'", "EXCEPT", "SELECT", "DISTINCT", "T3.last_name", "FROM", "Students", "AS", "T3", "JOIN", "Student_Enrolment", "AS", "T4", "ON", "T3.student_id", "=", "T4.student_id"], "query_toks_no_value": ["select", "t1", ".", "last_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1", ".", "current_address_id", "=", "t2", ".", "address_id", "where", "t2", ".", "state_province_county", "=", "value", "except", "select", "distinct", "t3", ".", "last_name", "from", "students", "as", "t3", "join", "student_enrolment", "as", "t4", "on", "t3", ".", "student_id", "=", "t4", ".", "student_id"], "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "question_toks": ["What", "are", "the", "last", "name", "of", "the", "students", "who", "live", "in", "North", "Carolina", "but", "have", "not", "registered", "in", "any", "degree", "programs?"], "sql": {"from": {"table_units": [["table_unit", 6], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 37, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"NorthCarolina\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null]]}, "select": [true, [[0, [0, [0, 37, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "Prediction": "Students.last_name \nFROM Students \nJOIN Addresses ON Students.current_address_id = Addresses.address_id \nWHERE Addresses.state_province_county = 'North Carolina' \nAND Students.student_id NOT IN (SELECT student_id FROM Student_Enrolment);"}
{"db_id": "student_transcripts_tracking", "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "query_toks": ["SELECT", "cell_mobile_number", "FROM", "Students", "WHERE", "first_name", "=", "'Timmothy", "'", "AND", "last_name", "=", "'Ward", "'"], "query_toks_no_value": ["select", "cell_mobile_number", "from", "students", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is the phone number of Timmothy Ward?", "question_toks": ["What", "is", "the", "phone", "number", "of", "Timmothy", "Ward?"], "sql": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 38, false], null]]]], "where": [[false, 2, [0, [0, 35, false], null], "\"Timmothy\"", null], "and", [false, 2, [0, [0, 37, false], null], "\"Ward\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Students.cell_mobile_number \n FROM Students \n WHERE Students.first_name = 'Timmothy' AND Students.last_name = 'Ward';"}
{"db_id": "student_transcripts_tracking", "query": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "query_toks": ["select", "cell_mobile_number", "from", "students", "where", "first_name", "=", "\"timmothy\"", "and", "last_name", "=", "\"ward\""], "query_toks_no_value": ["select", "cell_mobile_number", "from", "students", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is the mobile phone number of the student named Timmothy Ward ?", "question_toks": ["What", "is", "the", "mobile", "phone", "number", "of", "the", "student", "named", "Timmothy", "Ward", "?"], "sql": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 38, false], null]]]], "where": [[false, 2, [0, [0, 35, false], null], "\"timmothy\"", null], "and", [false, 2, [0, [0, 37, false], null], "\"ward\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Students.cell_mobile_number \n FROM Students \n WHERE Students.first_name = 'Timmothy' AND Students.last_name = 'Ward';"}
{"db_id": "student_transcripts_tracking", "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "query_toks": ["SELECT", "first_name", ",", "middle_name", ",", "last_name", "FROM", "Students", "ORDER", "BY", "date_first_registered", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_first_registered", "asc", "limit", "value"], "question": "Who is the student register earliest? List the first name, middle name and last name.", "question_toks": ["Who", "is", "the", "student", "register", "earliest?", "List", "the", "first", "name,", "middle", "name", "and", "last", "name."], "sql": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 41, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;"}
{"db_id": "student_transcripts_tracking", "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "query_toks": ["SELECT", "first_name", ",", "middle_name", ",", "last_name", "FROM", "Students", "ORDER", "BY", "date_left", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_left", "asc", "limit", "value"], "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "question_toks": ["Who", "is", "the", "earliest", "graduate", "of", "the", "school?", "List", "the", "first", "name,", "middle", "name", "and", "last", "name."], "sql": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 42, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Students.first_name, Students.middle_name, Students.last_name\nFROM Students\nJOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id\nJOIN Transcripts ON Student_Enrolment.student_enrolment_id = Transcripts.transcript_id\nWHERE degree_program_id = 'Graduate'\nORDER BY transcript_date ASC\nLIMIT 1;"}
{"db_id": "student_transcripts_tracking", "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "query_toks": ["SELECT", "first_name", ",", "middle_name", ",", "last_name", "FROM", "Students", "ORDER", "BY", "date_left", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_left", "asc", "limit", "value"], "question": "What is the first, middle, and last name of the earliest school graduate?", "question_toks": ["What", "is", "the", "first,", "middle,", "and", "last", "name", "of", "the", "earliest", "school", "graduate?"], "sql": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 42, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Students.first_name, Students.middle_name, Students.last_name\n FROM Students\n INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id\n INNER JOIN Transcript_Contents ON Student_Enrolment.student_enrolment_id = Transcript_Contents.student_enrolment_id\n INNER JOIN Transcripts ON Transcript_Contents.transcript_id = Transcripts.transcript_id\n ORDER BY Transcripts.transcript_date ASC\n LIMIT 1;"}
{"db_id": "student_transcripts_tracking", "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.address_id", ",", "T1.line_1", ",", "T1.line_2", "FROM", "Addresses", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.address_id", "=", "T2.current_address_id", "GROUP", "BY", "T1.address_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "address_id", ",", "t1", ".", "line_1", ",", "t1", ".", "line_2", "from", "addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "current_address_id", "group", "by", "t1", ".", "address_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which place holds the most number of students currently? List the id and all lines.", "question_toks": ["Which", "place", "holds", "the", "most", "number", "of", "students", "currently?", "List", "the", "id", "and", "all", "lines."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 6]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 33, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3\n FROM Addresses\n JOIN Students ON Students.current_address_id = Addresses.address_id\n GROUP BY Addresses.address_id\n ORDER BY COUNT(Students.student_id) DESC\n LIMIT 1;"}
{"db_id": "student_transcripts_tracking", "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.address_id", ",", "T1.line_1", ",", "T1.line_2", "FROM", "Addresses", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.address_id", "=", "T2.current_address_id", "GROUP", "BY", "T1.address_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "address_id", ",", "t1", ".", "line_1", ",", "t1", ".", "line_2", "from", "addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "current_address_id", "group", "by", "t1", ".", "address_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the id, line 1, and line 2 of the place with the most students?", "question_toks": ["What", "is", "the", "id,", "line", "1,", "and", "line", "2", "of", "the", "place", "with", "the", "most", "students?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 6]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 33, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Addresses.address_id, Addresses.line_1, Addresses.line_2\n FROM Addresses\n JOIN Students ON Students.current_address_id = Addresses.address_id\n GROUP BY Addresses.address_id\n ORDER BY COUNT(Students.student_id) DESC\n LIMIT 1;"}
{"db_id": "student_transcripts_tracking", "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "query_toks": ["SELECT", "DISTINCT", "T2.semester_id", "FROM", "Degree_Programs", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.degree_program_id", "=", "T2.degree_program_id", "WHERE", "degree_summary_name", "=", "'Master", "'", "INTERSECT", "SELECT", "DISTINCT", "T2.semester_id", "FROM", "Degree_Programs", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.degree_program_id", "=", "T2.degree_program_id", "WHERE", "degree_summary_name", "=", "'Bachelor", "'"], "query_toks_no_value": ["select", "distinct", "t2", ".", "semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "degree_program_id", "=", "t2", ".", "degree_program_id", "where", "degree_summary_name", "=", "value", "intersect", "select", "distinct", "t2", ".", "semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "degree_program_id", "=", "t2", ".", "degree_program_id", "where", "degree_summary_name", "=", "value"], "question": "Find the semester when both Master students and Bachelor students got enrolled in.", "question_toks": ["Find", "the", "semester", "when", "both", "Master", "students", "and", "Bachelor", "students", "got", "enrolled", "in."], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [true, [[0, [0, [0, 46, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"Master\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [true, [[0, [0, [0, 46, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"Bachelor\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "Semesters.semester_name\nFROM Student_Enrolment\nJOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nJOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id\nWHERE Degree_Programs.degree_summary_name IN ('Master', 'Bachelor')\nGROUP BY Semesters.semester_name\nHAVING COUNT(DISTINCT Degree_Programs.degree_summary_name) = 2;"}
{"db_id": "student_transcripts_tracking", "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "query_toks": ["SELECT", "DISTINCT", "T2.semester_id", "FROM", "Degree_Programs", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.degree_program_id", "=", "T2.degree_program_id", "WHERE", "degree_summary_name", "=", "'Master", "'", "INTERSECT", "SELECT", "DISTINCT", "T2.semester_id", "FROM", "Degree_Programs", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.degree_program_id", "=", "T2.degree_program_id", "WHERE", "degree_summary_name", "=", "'Bachelor", "'"], "query_toks_no_value": ["select", "distinct", "t2", ".", "semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "degree_program_id", "=", "t2", ".", "degree_program_id", "where", "degree_summary_name", "=", "value", "intersect", "select", "distinct", "t2", ".", "semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "degree_program_id", "=", "t2", ".", "degree_program_id", "where", "degree_summary_name", "=", "value"], "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "question_toks": ["What", "is", "the", "id", "of", "the", "semester", "that", "had", "both", "Masters", "and", "Bachelors", "students", "enrolled?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [true, [[0, [0, [0, 46, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"Master\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [true, [[0, [0, [0, 46, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"Bachelor\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "Semesters.semester_id \nFROM Semesters \nINNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id \nINNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id \nWHERE Degree_Programs.degree_summary_name IN ('Masters', 'Bachelors') \nGROUP BY Semesters.semester_id \nHAVING COUNT(DISTINCT Degree_Programs.degree_summary_name) = 2;"}
{"db_id": "student_transcripts_tracking", "query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "query_toks": ["select", "t1.first_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.permanent_address_id", "=", "t2.address_id", "where", "t2.country", "=", "\"haiti\"", "or", "t1.cell_mobile_number", "=", "\"09700166582\""], "query_toks_no_value": ["select", "t1", ".", "first_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1", ".", "permanent_address_id", "=", "t2", ".", "address_id", "where", "t2", ".", "country", "=", "value", "or", "t1", ".", "cell_mobile_number", "=", "value"], "question": "Find the first name of the students who permanently live in Haiti or have the cell phone number 09700166582.", "question_toks": ["Find", "the", "first", "name", "of", "the", "students", "who", "permanently", "live", "in", "Haiti", "or", "have", "the", "cell", "phone", "number", "09700166582."], "sql": {"from": {"table_units": [["table_unit", 6], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 34, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 35, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"haiti\"", null], "or", [false, 2, [0, [0, 38, false], null], "\"09700166582\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Students.first_name \nFROM Students \nJOIN Addresses ON Students.permanent_address_id = Addresses.address_id \nWHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582';"}
{"db_id": "student_transcripts_tracking", "query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "query_toks": ["select", "t1.first_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.permanent_address_id", "=", "t2.address_id", "where", "t2.country", "=", "\"haiti\"", "or", "t1.cell_mobile_number", "=", "\"09700166582\""], "query_toks_no_value": ["select", "t1", ".", "first_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1", ".", "permanent_address_id", "=", "t2", ".", "address_id", "where", "t2", ".", "country", "=", "value", "or", "t1", ".", "cell_mobile_number", "=", "value"], "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582?", "question_toks": ["What", "are", "the", "first", "names", "of", "the", "students", "who", "live", "in", "Haiti", "permanently", "or", "have", "the", "cell", "phone", "number", "09700166582?"], "sql": {"from": {"table_units": [["table_unit", 6], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 34, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 35, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"haiti\"", null], "or", [false, 2, [0, [0, 38, false], null], "\"09700166582\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Students.first_name \nFROM Students \nJOIN Addresses ON Students.permanent_address_id = Addresses.address_id \nWHERE Addresses.country = 'Haiti' \nOR Students.cell_mobile_number = '09700166582';"}
{"db_id": "tvshow", "query": "SELECT Title FROM Cartoon ORDER BY title", "query_toks": ["SELECT", "Title", "FROM", "Cartoon", "ORDER", "BY", "title"], "query_toks_no_value": ["select", "title", "from", "cartoon", "order", "by", "title"], "question": "List the names of all cartoons in alphabetical order.", "question_toks": ["List", "the", "names", "of", "all", "cartoons", "in", "alphabetical", "order."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 20, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Title FROM Cartoon ORDER BY Title ASC;"}
{"db_id": "tvshow", "query": "SELECT Title FROM Cartoon ORDER BY title", "query_toks": ["SELECT", "Title", "FROM", "Cartoon", "ORDER", "BY", "title"], "query_toks_no_value": ["select", "title", "from", "cartoon", "order", "by", "title"], "question": "What are the names of the cartoons sorted alphabetically?", "question_toks": ["What", "are", "the", "names", "of", "the", "cartoons", "sorted", "alphabetically?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 20, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Title FROM Cartoon ORDER BY Title ASC;"}
{"db_id": "tvshow", "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "query_toks": ["SELECT", "Title", "FROM", "Cartoon", "WHERE", "Directed_by", "=", "``", "Ben", "Jones", "''", ";"], "query_toks_no_value": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "value"], "question": "List all cartoon Ben Jones directs.", "question_toks": ["List", "all", "cartoon", "Ben", "Jones", "directs."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Title \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones';"}
{"db_id": "tvshow", "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "query_toks": ["SELECT", "Title", "FROM", "Cartoon", "WHERE", "Directed_by", "=", "``", "Ben", "Jones", "''", ";"], "query_toks_no_value": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "value"], "question": "What are the names of all cartoons Ben Jones directs?", "question_toks": ["What", "are", "the", "names", "of", "all", "cartoons", "Ben", "Jones", "directs?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Title FROM Cartoon WHERE Directed_by = 'Ben Jones';"}
{"db_id": "tvshow", "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Cartoon", "WHERE", "Written_by", "=", "``", "Joseph", "Kuhr", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cartoon", "where", "written_by", "=", "value"], "question": "How many cartoons Joseph Kuhr writes?", "question_toks": ["How", "many", "cartoons", "Joseph", "Kuhr", "writes?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], "\"Joseph Kuhr\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';"}
{"db_id": "tvshow", "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Cartoon", "WHERE", "Written_by", "=", "``", "Joseph", "Kuhr", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cartoon", "where", "written_by", "=", "value"], "question": "What is the number of cartoones  Joseph Kuh writes?", "question_toks": ["What", "is", "the", "number", "of", "cartoones", "Joseph", "Kuh", "writes?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], "\"Joseph Kuhr\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuh';"}
{"db_id": "tvshow", "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "query_toks": ["SELECT", "title", ",", "Directed_by", "FROM", "Cartoon", "ORDER", "BY", "Original_air_date"], "query_toks_no_value": ["select", "title", ",", "directed_by", "from", "cartoon", "order", "by", "original_air_date"], "question": "list all cartoon titles and their directors ordered by the time they broadcasted", "question_toks": ["list", "all", "cartoon", "titles", "and", "their", "directors", "ordered", "by", "the", "time", "they", "broadcasted"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]], [0, [0, [0, 21, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 23, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Title, Directed_by \n FROM Cartoon \n ORDER BY Original_air_date;"}
{"db_id": "tvshow", "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "query_toks": ["SELECT", "title", ",", "Directed_by", "FROM", "Cartoon", "ORDER", "BY", "Original_air_date"], "query_toks_no_value": ["select", "title", ",", "directed_by", "from", "cartoon", "order", "by", "original_air_date"], "question": "What is the name and directors of all the cartoons that are ordered by the time they came out?", "question_toks": ["What", "is", "the", "name", "and", "directors", "of", "all", "the", "cartoons", "that", "are", "ordered", "by", "the", "time", "they", "came", "out?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]], [0, [0, [0, 21, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 23, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Title, Directed_by FROM Cartoon ORDER BY Original_air_date;"}
{"db_id": "tvshow", "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "query_toks": ["SELECT", "Title", "FROM", "Cartoon", "WHERE", "Directed_by", "=", "``", "Ben", "Jones", "''", "OR", "Directed_by", "=", "``", "Brandon", "Vietti", "''", ";"], "query_toks_no_value": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "value", "or", "directed_by", "=", "value"], "question": "List the title of all cartoon  Ben Jones or Brandon Vietti directs.", "question_toks": ["List", "the", "title", "of", "all", "cartoon", "Ben", "Jones", "or", "Brandon", "Vietti", "directs."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null], "or", [false, 2, [0, [0, 21, false], null], "\"Brandon Vietti\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';"}
{"db_id": "tvshow", "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "query_toks": ["SELECT", "Title", "FROM", "Cartoon", "WHERE", "Directed_by", "=", "``", "Ben", "Jones", "''", "OR", "Directed_by", "=", "``", "Brandon", "Vietti", "''", ";"], "query_toks_no_value": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "value", "or", "directed_by", "=", "value"], "question": "What are the titles of all cartoons  Ben Jones or Brandon Vietti directs?", "question_toks": ["What", "are", "the", "titles", "of", "all", "cartoons", "Ben", "Jones", "or", "Brandon", "Vietti", "directs?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null], "or", [false, 2, [0, [0, 21, false], null], "\"Brandon Vietti\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';"}
{"db_id": "tvshow", "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "query_toks": ["SELECT", "Country", ",", "count", "(", "*", ")", "FROM", "TV_Channel", "GROUP", "BY", "Country", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which nation has the most of TV Channels? List the country and number of TV Channels it has.", "question_toks": ["Which", "nation", "has", "the", "most", "of", "TV", "Channels?", "List", "the", "country", "and", "number", "of", "TV", "Channels", "it", "has."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Country, COUNT(*) AS Number_of_Channels\n FROM TV_Channel\n GROUP BY Country\n ORDER BY Number_of_Channels DESC\n LIMIT 1;"}
{"db_id": "tvshow", "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "query_toks": ["SELECT", "Country", ",", "count", "(", "*", ")", "FROM", "TV_Channel", "GROUP", "BY", "Country", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the nation with the most number of TV Channels and how many does it have?", "question_toks": ["What", "is", "the", "nation", "with", "the", "most", "number", "of", "TV", "Channels", "and", "how", "many", "does", "it", "have?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Country, COUNT(*) AS num_channels\n FROM TV_Channel\n GROUP BY Country\n ORDER BY num_channels DESC\n LIMIT 1;"}
{"db_id": "tvshow", "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "query_toks": ["SELECT", "Content", "FROM", "TV_Channel", "WHERE", "series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "content", "from", "tv_channel", "where", "series_name", "=", "value"], "question": "What is the content of TV Channel with \"\"Sky Radio\"\"?", "question_toks": ["What", "is", "the", "content", "of", "TV", "Channel", "with", "\"\"Sky", "Radio\"\"?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Sky Radio\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "* FROM TV_Channel WHERE series_name = \"Sky Radio\";"}
{"db_id": "tvshow", "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "query_toks": ["SELECT", "Content", "FROM", "TV_Channel", "WHERE", "series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "content", "from", "tv_channel", "where", "series_name", "=", "value"], "question": "What is the content of Sky Radio?", "question_toks": ["What", "is", "the", "content", "of", "Sky", "Radio?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Sky Radio\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Content FROM TV_Channel WHERE series_name = 'Sky Radio';"}
{"db_id": "tvshow", "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "query_toks": ["SELECT", "Package_Option", "FROM", "TV_Channel", "WHERE", "series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "package_option", "from", "tv_channel", "where", "series_name", "=", "value"], "question": "What is the Package Option of TV Channel with \"\"Sky Radio\"\"?", "question_toks": ["What", "is", "the", "Package", "Option", "of", "TV", "Channel", "with", "\"\"Sky", "Radio\"\"?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Sky Radio\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Package_Option FROM TV_Channel WHERE series_name=\"Sky Radio\";"}
{"db_id": "tvshow", "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "TV_Channel", "WHERE", "LANGUAGE", "=", "``", "English", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "tv_channel", "where", "language", "=", "value"], "question": "How many TV Channel using  English?", "question_toks": ["How", "many", "TV", "Channel", "using", "English?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM TV_Channel WHERE Language='English';"}
{"db_id": "tvshow", "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "TV_Channel", "WHERE", "LANGUAGE", "=", "``", "English", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "tv_channel", "where", "language", "=", "value"], "question": "How many TV Channels speak English ?", "question_toks": ["How", "many", "TV", "Channels", "speak", "English", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM TV_Channel WHERE Language='English';"}
{"db_id": "tvshow", "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "query_toks": ["SELECT", "T1.series_name", "FROM", "TV_Channel", "AS", "T1", "JOIN", "Cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.Title", "=", "``", "The", "Rise", "of", "the", "Blue", "Beetle", "!", "``", ";"], "query_toks_no_value": ["select", "t1", ".", "series_name", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "title", "=", "value"], "question": "What is the TV Channel that shows The Rise of the Blue Beetle!? List the TV Channel's series name.", "question_toks": ["What", "is", "the", "TV", "Channel", "that", "shows", "The", "Rise", "of", "the", "Blue", "Beetle!?", "List", "the", "TV", "Channel's", "series", "name."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"The Rise of the Blue Beetle!\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "TV_Channel.series_name \nFROM Cartoon \nJOIN TV_Channel ON Cartoon.Channel=TV_Channel.id \nWHERE Cartoon.Title='The Rise of the Blue Beetle!';"}
{"db_id": "tvshow", "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "query_toks": ["SELECT", "T1.series_name", "FROM", "TV_Channel", "AS", "T1", "JOIN", "Cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.Title", "=", "``", "The", "Rise", "of", "the", "Blue", "Beetle", "!", "``", ";"], "query_toks_no_value": ["select", "t1", ".", "series_name", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "title", "=", "value"], "question": "What is the series name of the TV Channel that shows \"\"The Rise of the Blue Beetle\"\"?", "question_toks": ["What", "is", "the", "series", "name", "of", "the", "TV", "Channel", "that", "shows", "\"\"The", "Rise", "of", "the", "Blue", "Beetle\"\"?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"The Rise of the Blue Beetle!\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "TV_Channel.series_name \nFROM TV_Channel \nJOIN TV_series ON TV_series.Channel = TV_Channel.id \nWHERE TV_series.Episode = \"The Rise of the Blue Beetle\";"}
{"db_id": "tvshow", "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "query_toks": ["SELECT", "T2.Title", "FROM", "TV_Channel", "AS", "T1", "JOIN", "Cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T1.series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t1", ".", "series_name", "=", "value"], "question": "List the title of all  Cartoons showed on TV Channel with  \"\"Sky Radio\"\".", "question_toks": ["List", "the", "title", "of", "all", "Cartoons", "showed", "on", "TV", "Channel", "with", "\"\"Sky", "Radio\"\"."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Sky Radio\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Cartoon.Title \nFROM Cartoon \nJOIN TV_Channel ON Cartoon.Channel=TV_Channel.id \nWHERE TV_Channel.series_name=\"Sky Radio\";"}
{"db_id": "tvshow", "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "query_toks": ["SELECT", "T2.Title", "FROM", "TV_Channel", "AS", "T1", "JOIN", "Cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T1.series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t1", ".", "series_name", "=", "value"], "question": "What is the title of all the cartools that are on the TV Channel with Sky Radio?", "question_toks": ["What", "is", "the", "title", "of", "all", "the", "cartools", "that", "are", "on", "the", "TV", "Channel", "with", "Sky", "Radio?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Sky Radio\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Cartoon.Title FROM Cartoon \nJOIN TV_Channel ON Cartoon.Channel=TV_Channel.id \nWHERE TV_Channel.series_name='Sky Radio';"}
{"db_id": "tvshow", "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "query_toks": ["SELECT", "Air_Date", "FROM", "TV_series", "WHERE", "Episode", "=", "``", "A", "Love", "of", "a", "Lifetime", "''", ";"], "query_toks_no_value": ["select", "air_date", "from", "tv_series", "where", "episode", "=", "value"], "question": "What is the air date of \"\"\"\"A Love of a Lifetime\"\"\"\"?", "question_toks": ["What", "is", "the", "air", "date", "of", "\"\"\"\"A", "Love", "of", "a", "Lifetime\"\"\"\"?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"A Love of a Lifetime\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"}
{"db_id": "tvshow", "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "query_toks": ["SELECT", "Air_Date", "FROM", "TV_series", "WHERE", "Episode", "=", "``", "A", "Love", "of", "a", "Lifetime", "''", ";"], "query_toks_no_value": ["select", "air_date", "from", "tv_series", "where", "episode", "=", "value"], "question": "When did A Love of a Lifetime air?", "question_toks": ["When", "did", "A", "Love", "of", "a", "Lifetime", "air?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"A Love of a Lifetime\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';"}
{"db_id": "tvshow", "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "query_toks": ["SELECT", "Weekly_Rank", "FROM", "TV_series", "WHERE", "Episode", "=", "``", "A", "Love", "of", "a", "Lifetime", "''", ";"], "query_toks_no_value": ["select", "weekly_rank", "from", "tv_series", "where", "episode", "=", "value"], "question": "What is Weekly Rank of TV series with A Love of a Lifetime?", "question_toks": ["What", "is", "Weekly", "Rank", "of", "TV", "series", "with", "A", "Love", "of", "a", "Lifetime?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 17, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"A Love of a Lifetime\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';"}
{"db_id": "tvshow", "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "query_toks": ["SELECT", "Weekly_Rank", "FROM", "TV_series", "WHERE", "Episode", "=", "``", "A", "Love", "of", "a", "Lifetime", "''", ";"], "query_toks_no_value": ["select", "weekly_rank", "from", "tv_series", "where", "episode", "=", "value"], "question": "What is the weekly rank for the  \"\"\"\"A Love of a Lifetime\"\"\"\"?", "question_toks": ["What", "is", "the", "weekly", "rank", "for", "the", "\"\"\"\"A", "Love", "of", "a", "Lifetime\"\"\"\"?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 17, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"A Love of a Lifetime\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"}
{"db_id": "tvshow", "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "query_toks": ["SELECT", "T1.series_name", "FROM", "TV_Channel", "AS", "T1", "JOIN", "TV_series", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.Episode", "=", "``", "A", "Love", "of", "a", "Lifetime", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "series_name", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "episode", "=", "value"], "question": "What is the TV Channel with \"\"\"\"A Love of a Lifetime\"\"\"\"? List the TV Channel's series name.", "question_toks": ["What", "is", "the", "TV", "Channel", "with", "\"\"\"\"A", "Love", "of", "a", "Lifetime\"\"\"\"?", "List", "the", "TV", "Channel's", "series", "name."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 18, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"A Love of a Lifetime\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel=TV_Channel.id WHERE Cartoon.Title=\"A Love of a Lifetime\";"}
{"db_id": "tvshow", "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "query_toks": ["SELECT", "T1.series_name", "FROM", "TV_Channel", "AS", "T1", "JOIN", "TV_series", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.Episode", "=", "``", "A", "Love", "of", "a", "Lifetime", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "series_name", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "episode", "=", "value"], "question": "What is the name of the series that has the  \"\"\"\"A Love of a Lifetime\"\"\"\"?", "question_toks": ["What", "is", "the", "name", "of", "the", "series", "that", "has", "the", "\"\"\"\"A", "Love", "of", "a", "Lifetime\"\"\"\"?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 18, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"A Love of a Lifetime\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Title FROM Cartoon WHERE Title = \"A Love of a Lifetime\";"}
{"db_id": "tvshow", "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "query_toks": ["SELECT", "T2.Episode", "FROM", "TV_Channel", "AS", "T1", "JOIN", "TV_series", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T1.series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "episode", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t1", ".", "series_name", "=", "value"], "question": "List the Episode of all  TV series showed on TV Channel with  \"\"\"\"Sky Radio\"\"\"\".", "question_toks": ["List", "the", "Episode", "of", "all", "TV", "series", "showed", "on", "TV", "Channel", "with", "\"\"\"\"Sky", "Radio\"\"\"\"."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 18, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Sky Radio\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "TV_series.Episode \nFROM TV_series \nINNER JOIN TV_Channel ON TV_series.Channel=TV_Channel.id \nWHERE TV_Channel.series_name=\"Sky Radio\";"}
{"db_id": "tvshow", "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "query_toks": ["SELECT", "T2.Episode", "FROM", "TV_Channel", "AS", "T1", "JOIN", "TV_series", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T1.series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "episode", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t1", ".", "series_name", "=", "value"], "question": "What is the episode for the TV series called Sky Radio?", "question_toks": ["What", "is", "the", "episode", "for", "the", "TV", "series", "called", "Sky", "Radio?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 18, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Sky Radio\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel=TV_Channel.id WHERE TV_Channel.series_name='Sky Radio';"}
{"db_id": "tvshow", "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "Directed_by", "FROM", "cartoon", "GROUP", "BY", "Directed_by"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "directed_by", "from", "cartoon", "group", "by", "directed_by"], "question": "Find the number of cartoons by each of the listed directors.", "question_toks": ["Find", "the", "number", "of", "cartoons", "by", "each", "of", "the", "listed", "directors."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 21, false], null]]]], "where": [], "groupBy": [[0, 21, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by;"}
{"db_id": "tvshow", "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "Directed_by", "FROM", "cartoon", "GROUP", "BY", "Directed_by"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "directed_by", "from", "cartoon", "group", "by", "directed_by"], "question": "How many cartoons did each director create?", "question_toks": ["How", "many", "cartoons", "did", "each", "director", "create?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 21, false], null]]]], "where": [], "groupBy": [[0, 21, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by;"}
{"db_id": "tvshow", "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "query_toks": ["select", "production_code", ",", "channel", "from", "cartoon", "order", "by", "original_air_date", "desc", "limit", "1"], "query_toks_no_value": ["select", "production_code", ",", "channel", "from", "cartoon", "order", "by", "original_air_date", "desc", "limit", "value"], "question": "Find the production code and channel of the most recently broadcasted cartoon.", "question_toks": ["Find", "the", "production", "code", "and", "channel", "of", "the", "most", "recently", "broadcasted", "cartoon."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 24, false], null]], [0, [0, [0, 25, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 23, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Production_code, Channel \nFROM Cartoon \nWHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)"}
{"db_id": "tvshow", "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "query_toks": ["select", "production_code", ",", "channel", "from", "cartoon", "order", "by", "original_air_date", "desc", "limit", "1"], "query_toks_no_value": ["select", "production_code", ",", "channel", "from", "cartoon", "order", "by", "original_air_date", "desc", "limit", "value"], "question": "What is the produdction code and channel of the most recent cartoon?", "question_toks": ["What", "is", "the", "produdction", "code", "and", "channel", "of", "the", "most", "recent", "cartoon?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 24, false], null]], [0, [0, [0, 25, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 23, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon);"}
{"db_id": "tvshow", "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "query_toks": ["SELECT", "package_option", ",", "series_name", "FROM", "TV_Channel", "WHERE", "hight_definition_TV", "=", "``", "yes", "''"], "query_toks_no_value": ["select", "package_option", ",", "series_name", "from", "tv_channel", "where", "hight_definition_tv", "=", "value"], "question": "Find the package choice and series name of the TV channel that has HD TV.", "question_toks": ["Find", "the", "package", "choice", "and", "series", "name", "of", "the", "TV", "channel", "that", "has", "HD", "TV."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"yes\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "TV_Channel.Package_Option, TV_Channel.series_name \n FROM TV_Channel \n WHERE TV_Channel.Hight_definition_TV = 1;"}
{"db_id": "tvshow", "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "query_toks": ["SELECT", "package_option", ",", "series_name", "FROM", "TV_Channel", "WHERE", "hight_definition_TV", "=", "``", "yes", "''"], "query_toks_no_value": ["select", "package_option", ",", "series_name", "from", "tv_channel", "where", "hight_definition_tv", "=", "value"], "question": "What are the package options and the name of the series for the TV Channel that supports HDTV?", "question_toks": ["What", "are", "the", "package", "options", "and", "the", "name", "of", "the", "series", "for", "the", "TV", "Channel", "that", "supports", "HDTV?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"yes\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "TV_Channel.Package_Option, TV_series.series_name \n FROM TV_Channel \n JOIN TV_series ON TV_Channel.id = TV_series.Channel \n WHERE TV_Channel.Hight_definition_TV = 1;"}
{"db_id": "tvshow", "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "query_toks": ["SELECT", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.written_by", "=", "'Todd", "Casey", "'"], "query_toks_no_value": ["select", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "written_by", "=", "value"], "question": "which countries' tv channels are playing some cartoon  Todd Casey writes?", "question_toks": ["which", "countries'", "tv", "channels", "are", "playing", "some", "cartoon", "Todd", "Casey", "writes?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], "\"Todd Casey\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "TV_Channel.Country \n FROM Cartoon \n JOIN TV_Channel ON Cartoon.Channel=TV_Channel.id \n WHERE Cartoon.Written_by='Todd Casey';"}
{"db_id": "tvshow", "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "query_toks": ["SELECT", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.written_by", "=", "'Todd", "Casey", "'"], "query_toks_no_value": ["select", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "written_by", "=", "value"], "question": "What are the countries that have cartoons on TV that Todd Casey writes?", "question_toks": ["What", "are", "the", "countries", "that", "have", "cartoons", "on", "TV", "that", "Todd", "Casey", "writes?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], "\"Todd Casey\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "TV_Channel.Country\nFROM Cartoon\nJOIN TV_Channel ON Cartoon.Channel=TV_Channel.id\nWHERE Cartoon.Written_by='Todd Casey'"}
{"db_id": "tvshow", "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "query_toks": ["SELECT", "country", "FROM", "TV_Channel", "EXCEPT", "SELECT", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.written_by", "=", "'Todd", "Casey", "'"], "query_toks_no_value": ["select", "country", "from", "tv_channel", "except", "select", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "written_by", "=", "value"], "question": "which countries' tv channels are not playing any cartoon  Todd Casey writes?", "question_toks": ["which", "countries'", "tv", "channels", "are", "not", "playing", "any", "cartoon", "Todd", "Casey", "writes?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], "\"Todd Casey\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "Prediction": "TV_Channel.Country \n FROM TV_Channel \n LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \n WHERE Cartoon.Title IS NULL AND TV_Channel.series_name != 'Todd Casey writes';"}
{"db_id": "tvshow", "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "query_toks": ["SELECT", "country", "FROM", "TV_Channel", "EXCEPT", "SELECT", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.written_by", "=", "'Todd", "Casey", "'"], "query_toks_no_value": ["select", "country", "from", "tv_channel", "except", "select", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "written_by", "=", "value"], "question": "What are the countries that are not playing cartoons  Todd Casey writes?", "question_toks": ["What", "are", "the", "countries", "that", "are", "not", "playing", "cartoons", "Todd", "Casey", "writes?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], "\"Todd Casey\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "Prediction": "TV_Channel.Country \nFROM TV_Channel \nWHERE TV_Channel.id NOT IN \n(SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = 'Todd Casey')"}
{"db_id": "tvshow", "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "query_toks": ["SELECT", "T1.series_name", ",", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.directed_by", "=", "'Michael", "Chang", "'", "INTERSECT", "SELECT", "T1.series_name", ",", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.directed_by", "=", "'Ben", "Jones", "'"], "query_toks_no_value": ["select", "t1", ".", "series_name", ",", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "directed_by", "=", "value", "intersect", "select", "t1", ".", "series_name", ",", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "directed_by", "=", "value"], "question": "Find the series name and country of the tv channel that is playing some cartoons  Ben Jones and Michael Chang directs?", "question_toks": ["Find", "the", "series", "name", "and", "country", "of", "the", "tv", "channel", "that", "is", "playing", "some", "cartoons", "Ben", "Jones", "and", "Michael", "Chang", "directs?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Michael Chang\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "TV_Channel.series_name, TV_Channel.Country \n FROM Cartoon \n JOIN TV_Channel ON Cartoon.Channel=TV_Channel.id \n WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');"}
{"db_id": "tvshow", "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "query_toks": ["SELECT", "T1.series_name", ",", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.directed_by", "=", "'Michael", "Chang", "'", "INTERSECT", "SELECT", "T1.series_name", ",", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.directed_by", "=", "'Ben", "Jones", "'"], "query_toks_no_value": ["select", "t1", ".", "series_name", ",", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "directed_by", "=", "value", "intersect", "select", "t1", ".", "series_name", ",", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "directed_by", "=", "value"], "question": "What is the series name and country of all TV channels that are playing cartoons  Ben Jones and Michael Chang directs?", "question_toks": ["What", "is", "the", "series", "name", "and", "country", "of", "all", "TV", "channels", "that", "are", "playing", "cartoons", "Ben", "Jones", "and", "Michael", "Chang", "directs?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Michael Chang\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "TV_Channel.series_name, TV_Channel.Country \n FROM Cartoon \n JOIN TV_Channel ON Cartoon.Channel=TV_Channel.id \n WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');"}
{"db_id": "tvshow", "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "query_toks": ["SELECT", "Pixel_aspect_ratio_PAR", ",", "country", "FROM", "tv_channel", "WHERE", "LANGUAGE", "!", "=", "'English", "'"], "query_toks_no_value": ["select", "pixel_aspect_ratio_par", ",", "country", "from", "tv_channel", "where", "language", "!", "=", "value"], "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "question_toks": ["find", "the", "pixel", "aspect", "ratio", "and", "nation", "of", "the", "tv", "channels", "that", "do", "not", "use", "English."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 7, [0, [0, 4, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';"}
{"db_id": "tvshow", "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "query_toks": ["SELECT", "Pixel_aspect_ratio_PAR", ",", "country", "FROM", "tv_channel", "WHERE", "LANGUAGE", "!", "=", "'English", "'"], "query_toks_no_value": ["select", "pixel_aspect_ratio_par", ",", "country", "from", "tv_channel", "where", "language", "!", "=", "value"], "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "question_toks": ["What", "is", "the", "pixel", "aspect", "ratio", "and", "country", "of", "origin", "for", "all", "TV", "channels", "that", "do", "not", "use", "English?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 7, [0, [0, 4, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Pixel_aspect_ratio_PAR, Country \n FROM TV_Channel \n WHERE Language != 'English';"}
{"db_id": "tvshow", "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "query_toks": ["SELECT", "id", "FROM", "tv_channel", "GROUP", "BY", "country", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "id", "from", "tv_channel", "group", "by", "country", "having", "count", "(", "*", ")", ">", "value"], "question": "find id of the tv channels that from the nations where have more than two tv channels.", "question_toks": ["find", "id", "of", "the", "tv", "channels", "that", "from", "the", "nations", "where", "have", "more", "than", "two", "tv", "channels."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "TV_Channel.id \nFROM TV_Channel \nWHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2);"}
{"db_id": "tvshow", "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "query_toks": ["SELECT", "id", "FROM", "TV_Channel", "EXCEPT", "SELECT", "channel", "FROM", "cartoon", "WHERE", "directed_by", "=", "'Ben", "Jones", "'"], "query_toks_no_value": ["select", "id", "from", "tv_channel", "except", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value"], "question": "find the id of tv channels that do not play any cartoon  Ben Jones directs.", "question_toks": ["find", "the", "id", "of", "tv", "channels", "that", "do", "not", "play", "any", "cartoon", "Ben", "Jones", "directs."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "Prediction": "TV_Channel.id \nFROM TV_Channel \nWHERE TV_Channel.id NOT IN \n(SELECT TV_Channel.id FROM TV_Channel \nJOIN Cartoon ON Cartoon.Channel=TV_Channel.id \nWHERE Cartoon.Directed_by='Ben Jones');"}
{"db_id": "tvshow", "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "query_toks": ["SELECT", "id", "FROM", "TV_Channel", "EXCEPT", "SELECT", "channel", "FROM", "cartoon", "WHERE", "directed_by", "=", "'Ben", "Jones", "'"], "query_toks_no_value": ["select", "id", "from", "tv_channel", "except", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value"], "question": "What are the ids of the TV channels that do not have any cartoons  Ben Jones directs?", "question_toks": ["What", "are", "the", "ids", "of", "the", "TV", "channels", "that", "do", "not", "have", "any", "cartoons", "Ben", "Jones", "directs?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "Prediction": "TV_Channel.id \nFROM TV_Channel \nLEFT JOIN Cartoon ON Cartoon.Channel=TV_Channel.id \nWHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL;"}
{"db_id": "tvshow", "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "query_toks": ["SELECT", "package_option", "FROM", "TV_Channel", "WHERE", "id", "NOT", "IN", "(", "SELECT", "channel", "FROM", "cartoon", "WHERE", "directed_by", "=", "'Ben", "Jones", "'", ")"], "query_toks_no_value": ["select", "package_option", "from", "tv_channel", "where", "id", "not", "in", "(", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value", ")"], "question": "find the package option of the tv channel that do not have any cartoon  Ben Jones directs.", "question_toks": ["find", "the", "package", "option", "of", "the", "tv", "channel", "that", "do", "not", "have", "any", "cartoon", "Ben", "Jones", "directs."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "TV_Channel.Package_Option \nFROM TV_Channel \nWHERE TV_Channel.id NOT IN \n    (SELECT TV_Channel.id \n     FROM TV_Channel \n     JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \n     WHERE Cartoon.Directed_by = 'Ben Jones');"}
{"db_id": "tvshow", "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "query_toks": ["SELECT", "package_option", "FROM", "TV_Channel", "WHERE", "id", "NOT", "IN", "(", "SELECT", "channel", "FROM", "cartoon", "WHERE", "directed_by", "=", "'Ben", "Jones", "'", ")"], "query_toks_no_value": ["select", "package_option", "from", "tv_channel", "where", "id", "not", "in", "(", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value", ")"], "question": "What are the package options of all tv channels that are not playing any cartoons  Ben Jones directs?", "question_toks": ["What", "are", "the", "package", "options", "of", "all", "tv", "channels", "that", "are", "not", "playing", "any", "cartoons", "Ben", "Jones", "directs?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "TV_Channel.Package_Option \nFROM TV_Channel \nLEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Title IS NULL OR Cartoon.Directed_by != 'Ben Jones';"}
{"db_id": "poker_player", "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "query_toks": ["SELECT", "Earnings", "FROM", "poker_player", "ORDER", "BY", "Earnings", "DESC"], "query_toks_no_value": ["select", "earnings", "from", "poker_player", "order", "by", "earnings", "desc"], "question": "List the mony made by each poker players in descending order.", "question_toks": ["List", "the", "mony", "made", "by", "each", "poker", "players", "in", "descending", "order."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 6, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "poker_player.Earnings\nFROM poker_player\nORDER BY poker_player.Earnings DESC;"}
{"db_id": "poker_player", "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "query_toks": ["SELECT", "T2.Money_Rank", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "money_rank", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "height", "desc", "limit", "value"], "question": "What is the money rank of the tallest poker player?", "question_toks": ["What", "is", "the", "money", "rank", "of", "the", "tallest", "poker", "player?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 11, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "poker_player.Money_Rank \nFROM poker_player \nJOIN people ON poker_player.People_ID=people.People_ID \nWHERE people.Height = (SELECT MAX(Height) FROM people)"}
{"db_id": "poker_player", "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "query_toks": ["SELECT", "T2.Money_Rank", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "money_rank", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "height", "desc", "limit", "value"], "question": "Return the money rank of the tallest poker player.", "question_toks": ["Return", "the", "money", "rank", "of", "the", "tallest", "poker", "player."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 11, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "poker_player.Money_Rank \nFROM poker_player \nJOIN people ON poker_player.People_ID=people.People_ID \nWHERE people.Height = (SELECT MAX(Height) FROM people)"}
{"db_id": "poker_player", "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "query_toks": ["SELECT", "avg", "(", "T2.Earnings", ")", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T1.Height", ">", "200"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "earnings", ")", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t1", ".", "height", ">", "value"], "question": "What is the average earnings of poker players taller than 200?", "question_toks": ["What", "is", "the", "average", "earnings", "of", "poker", "players", "taller", "than", "200?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[5, [0, [0, 6, false], null]]]], "where": [[false, 3, [0, [0, 11, false], null], 200.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(poker_player.Earnings) \nFROM poker_player \nJOIN people ON poker_player.People_ID=people.People_ID \nWHERE people.Height > 200;"}
{"db_id": "poker_player", "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "query_toks": ["SELECT", "avg", "(", "T2.Earnings", ")", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T1.Height", ">", "200"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "earnings", ")", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t1", ".", "height", ">", "value"], "question": "Give average earnings of poker players who are taller than 200.", "question_toks": ["Give", "average", "earnings", "of", "poker", "players", "who", "are", "taller", "than", "200."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[5, [0, [0, 6, false], null]]]], "where": [[false, 3, [0, [0, 11, false], null], 200.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(poker_player.Earnings) \nFROM poker_player \nJOIN people ON poker_player.People_ID=people.People_ID \nWHERE people.Height > 200;"}
{"db_id": "poker_player", "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "query_toks": ["SELECT", "Nationality", ",", "COUNT", "(", "*", ")", "FROM", "people", "GROUP", "BY", "Nationality"], "query_toks_no_value": ["select", "nationality", ",", "count", "(", "*", ")", "from", "people", "group", "by", "nationality"], "question": "What are different nationalities of people and the corresponding number of people from each country?", "question_toks": ["What", "are", "different", "nationalities", "of", "people", "and", "the", "corresponding", "number", "of", "people", "from", "each", "country?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Nationality, COUNT(*) FROM people GROUP BY Nationality;"}
{"db_id": "poker_player", "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "query_toks": ["SELECT", "Nationality", ",", "COUNT", "(", "*", ")", "FROM", "people", "GROUP", "BY", "Nationality"], "query_toks_no_value": ["select", "nationality", ",", "count", "(", "*", ")", "from", "people", "group", "by", "nationality"], "question": "How many people are there of each country?", "question_toks": ["How", "many", "people", "are", "there", "of", "each", "country?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Nationality, COUNT(*) FROM people GROUP BY Nationality;"}
{"db_id": "poker_player", "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Nationality", "FROM", "people", "GROUP", "BY", "Nationality", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "nationality", "from", "people", "group", "by", "nationality", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Return the countries for which there are two or more people from.", "question_toks": ["Return", "the", "countries", "for", "which", "there", "are", "two", "or", "more", "people", "from."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;"}
{"db_id": "poker_player", "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "Nationality", "!", "=", "``", "Russia", "''"], "query_toks_no_value": ["select", "name", "from", "people", "where", "nationality", "!", "=", "value"], "question": "Show names of people who  is not  from Russia.", "question_toks": ["Show", "names", "of", "people", "who", "is", "not", "from", "Russia."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 7, [0, [0, 8, false], null], "\"Russia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM people WHERE Nationality != 'Russia';"}
{"db_id": "poker_player", "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "Nationality", "!", "=", "``", "Russia", "''"], "query_toks_no_value": ["select", "name", "from", "people", "where", "nationality", "!", "=", "value"], "question": "What are the names of people who are not from Russia?", "question_toks": ["What", "are", "the", "names", "of", "people", "who", "are", "not", "from", "Russia?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 7, [0, [0, 8, false], null], "\"Russia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM people WHERE Nationality != 'Russia';"}
{"db_id": "voter_1", "query": "SELECT max(created) FROM votes WHERE state  =  'CA'", "query_toks": ["SELECT", "max", "(", "created", ")", "FROM", "votes", "WHERE", "state", "=", "'CA", "'"], "query_toks_no_value": ["select", "max", "(", "created", ")", "from", "votes", "where", "state", "=", "value"], "question": "What is last date created of votes from 'CA'?", "question_toks": ["What", "is", "last", "date", "created", "of", "votes", "from", "'CA'?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[1, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"CA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "MAX(created) FROM VOTES WHERE state='CA';"}
{"db_id": "voter_1", "query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "votes", "WHERE", "state", "=", "'NY", "'", "OR", "state", "=", "'CA", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "votes", "where", "state", "=", "value", "or", "state", "=", "value"], "question": "What are the number of votes from 'NY' or 'CA'?", "question_toks": ["What", "are", "the", "number", "of", "votes", "from", "'NY'", "or", "'CA'?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"NY\"", null], "or", [false, 2, [0, [0, 7, false], null], "\"CA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM VOTES WHERE state='NY' OR state='CA';"}
{"db_id": "voter_1", "query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "query_toks": ["SELECT", "T2.created", ",", "T2.state", ",", "T2.phone_number", "FROM", "contestants", "AS", "T1", "JOIN", "votes", "AS", "T2", "ON", "T1.contestant_number", "=", "T2.contestant_number", "WHERE", "T1.contestant_name", "=", "'Tabatha", "Gehling", "'"], "query_toks_no_value": ["select", "t2", ".", "created", ",", "t2", ".", "state", ",", "t2", ".", "phone_number", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1", ".", "contestant_number", "=", "t2", ".", "contestant_number", "where", "t1", ".", "contestant_name", "=", "value"], "question": "What are the create dates, states, and phone numbers of the votes that were for 'Tabatha Gehling'?", "question_toks": ["What", "are", "the", "create", "dates,", "states,", "and", "phone", "numbers", "of", "the", "votes", "that", "were", "for", "'Tabatha", "Gehling'?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 7, false], null]], [0, [0, [0, 6, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"Tabatha Gehling\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "VOTES.created, VOTES.state, VOTES.phone_number \n FROM VOTES \n JOIN CONTESTANTS ON VOTES.contestant_number=CONTESTANTS.contestant_number \n WHERE CONTESTANTS.contestant_name='Tabatha Gehling';"}
{"db_id": "voter_1", "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "query_toks": ["SELECT", "T3.area_code", "FROM", "contestants", "AS", "T1", "JOIN", "votes", "AS", "T2", "ON", "T1.contestant_number", "=", "T2.contestant_number", "JOIN", "area_code_state", "AS", "T3", "ON", "T2.state", "=", "T3.state", "WHERE", "T1.contestant_name", "=", "'Tabatha", "Gehling", "'", "INTERSECT", "SELECT", "T3.area_code", "FROM", "contestants", "AS", "T1", "JOIN", "votes", "AS", "T2", "ON", "T1.contestant_number", "=", "T2.contestant_number", "JOIN", "area_code_state", "AS", "T3", "ON", "T2.state", "=", "T3.state", "WHERE", "T1.contestant_name", "=", "'Kelly", "Clauss", "'"], "query_toks_no_value": ["select", "t3", ".", "area_code", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1", ".", "contestant_number", "=", "t2", ".", "contestant_number", "join", "area_code_state", "as", "t3", "on", "t2", ".", "state", "=", "t3", ".", "state", "where", "t1", ".", "contestant_name", "=", "value", "intersect", "select", "t3", ".", "area_code", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1", ".", "contestant_number", "=", "t2", ".", "contestant_number", "join", "area_code_state", "as", "t3", "on", "t2", ".", "state", "=", "t3", ".", "state", "where", "t1", ".", "contestant_name", "=", "value"], "question": "List the area codes in which voters voted both for 'Tabatha Gehling' and 'Kelly Clauss'.", "question_toks": ["List", "the", "area", "codes", "in", "which", "voters", "voted", "both", "for", "'Tabatha", "Gehling'", "and", "'Kelly", "Clauss'."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 8, false], null], "and", [false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"Tabatha Gehling\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 8, false], null], "and", [false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"Kelly Clauss\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "DISTINCT SUBSTR(phone_number, 1, 3) \nFROM VOTES \nWHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling') \nAND phone_number IN (SELECT phone_number FROM VOTES WHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Kelly Clauss'));"}
{"db_id": "world_1", "query": "SELECT Name FROM country WHERE IndepYear  >  1950", "query_toks": ["SELECT", "Name", "FROM", "country", "WHERE", "IndepYear", ">", "1950"], "query_toks_no_value": ["select", "name", "from", "country", "where", "indepyear", ">", "value"], "question": "What are the names of all the countries that founded after 1950?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "countries", "that", "founded", "after", "1950?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 1950.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM country WHERE IndepYear > 1950;"}
{"db_id": "world_1", "query": "SELECT Name FROM country WHERE IndepYear  >  1950", "query_toks": ["SELECT", "Name", "FROM", "country", "WHERE", "IndepYear", ">", "1950"], "query_toks_no_value": ["select", "name", "from", "country", "where", "indepyear", ">", "value"], "question": "Give the names of the nations that were founded after 1950.", "question_toks": ["Give", "the", "names", "of", "the", "nations", "that", "were", "founded", "after", "1950."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 1950.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM country WHERE IndepYear > 1950;"}
{"db_id": "world_1", "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "country", "WHERE", "GovernmentForm", "=", "``", "Republic", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "country", "where", "governmentform", "=", "value"], "question": "How many republic countries are there?", "question_toks": ["How", "many", "republic", "countries", "are", "there?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"Republic\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic';"}
{"db_id": "world_1", "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "country", "WHERE", "GovernmentForm", "=", "``", "Republic", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "country", "where", "governmentform", "=", "value"], "question": "How many countries are republic?", "question_toks": ["How", "many", "countries", "are", "republic?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"Republic\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%';"}
{"db_id": "world_1", "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "query_toks": ["SELECT", "sum", "(", "SurfaceArea", ")", "FROM", "country", "WHERE", "Region", "=", "``", "Caribbean", "''"], "query_toks_no_value": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "region", "=", "value"], "question": "What is the total surface area of the countries in the Caribbean ?", "question_toks": ["What", "is", "the", "total", "surface", "area", "of", "the", "countries", "in", "the", "Caribbean", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"Caribbean\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean';"}
{"db_id": "world_1", "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "query_toks": ["SELECT", "sum", "(", "SurfaceArea", ")", "FROM", "country", "WHERE", "Region", "=", "``", "Caribbean", "''"], "query_toks_no_value": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "region", "=", "value"], "question": "How much surface area do the countires in the Carribean cover together?", "question_toks": ["How", "much", "surface", "area", "do", "the", "countires", "in", "the", "Carribean", "cover", "together?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"Caribbean\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean';"}
{"db_id": "world_1", "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "query_toks": ["SELECT", "Continent", "FROM", "country", "WHERE", "Name", "=", "``", "Anguilla", "''"], "query_toks_no_value": ["select", "continent", "from", "country", "where", "name", "=", "value"], "question": "Which continent is Anguilla in?", "question_toks": ["Which", "continent", "is", "Anguilla", "in?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Anguilla\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "country.Continent FROM country WHERE country.Name = 'Anguilla';"}
{"db_id": "world_1", "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "query_toks": ["SELECT", "Continent", "FROM", "country", "WHERE", "Name", "=", "``", "Anguilla", "''"], "query_toks_no_value": ["select", "continent", "from", "country", "where", "name", "=", "value"], "question": "What is the continent  which Anguilla belongs to?", "question_toks": ["What", "is", "the", "continent", "which", "Anguilla", "belongs", "to?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Anguilla\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Continent FROM country WHERE Name = 'Anguilla';"}
{"db_id": "world_1", "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "query_toks": ["SELECT", "Region", "FROM", "country", "AS", "T1", "JOIN", "city", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T2.Name", "=", "``", "Kabul", "''"], "query_toks_no_value": ["select", "region", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "name", "=", "value"], "question": "Which region is Kabul located in?", "question_toks": ["Which", "region", "is", "Kabul", "located", "in?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 3, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kabul\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "country.Region FROM city JOIN country ON city.CountryCode=country.Code WHERE city.Name='Kabul';"}
{"db_id": "world_1", "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "query_toks": ["SELECT", "Region", "FROM", "country", "AS", "T1", "JOIN", "city", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T2.Name", "=", "``", "Kabul", "''"], "query_toks_no_value": ["select", "region", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "name", "=", "value"], "question": "What region is Kabul in?", "question_toks": ["What", "region", "is", "Kabul", "in?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 3, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kabul\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "country.Region \nFROM city \nJOIN country ON city.CountryCode=country.Code \nWHERE city.Name='Kabul';"}
{"db_id": "world_1", "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "query_toks": ["SELECT", "T2.Language", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T1.Name", "=", "``", "Aruba", "''", "ORDER", "BY", "Percentage", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t1", ".", "name", "=", "value", "order", "by", "percentage", "desc", "limit", "value"], "question": "Which language is the most popular in Aruba?", "question_toks": ["Which", "language", "is", "the", "most", "popular", "in", "Aruba?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Aruba\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 26, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Language \nFROM countrylanguage \nWHERE CountryCode = 'ABW' \nORDER BY Percentage DESC \nLIMIT 1;"}
{"db_id": "world_1", "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "query_toks": ["SELECT", "T2.Language", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T1.Name", "=", "``", "Aruba", "''", "ORDER", "BY", "Percentage", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t1", ".", "name", "=", "value", "order", "by", "percentage", "desc", "limit", "value"], "question": "What language is predominantly spoken in Aruba?", "question_toks": ["What", "language", "is", "predominantly", "spoken", "in", "Aruba?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Aruba\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 26, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Language FROM countrylanguage WHERE CountryCode='ABW' AND IsOfficial='T'"}
{"db_id": "world_1", "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "query_toks": ["SELECT", "Population", ",", "LifeExpectancy", "FROM", "country", "WHERE", "Name", "=", "``", "Brazil", "''"], "query_toks_no_value": ["select", "population", ",", "lifeexpectancy", "from", "country", "where", "name", "=", "value"], "question": "What are the population and life expectancies in Brazil?", "question_toks": ["What", "are", "the", "population", "and", "life", "expectancies", "in", "Brazil?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Brazil\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Population, LifeExpectancy FROM country WHERE Name = 'Brazil';"}
{"db_id": "world_1", "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "query_toks": ["SELECT", "Population", ",", "LifeExpectancy", "FROM", "country", "WHERE", "Name", "=", "``", "Brazil", "''"], "query_toks_no_value": ["select", "population", ",", "lifeexpectancy", "from", "country", "where", "name", "=", "value"], "question": "Give me Brazil\u2019s population and life expectancies.", "question_toks": ["Give", "me", "Brazil\u2019s", "population", "and", "life", "expectancies."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Brazil\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Population, LifeExpectancy FROM country WHERE Name = 'Brazil';"}
{"db_id": "world_1", "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "query_toks": ["SELECT", "Population", ",", "Region", "FROM", "country", "WHERE", "Name", "=", "``", "Angola", "''"], "query_toks_no_value": ["select", "population", ",", "region", "from", "country", "where", "name", "=", "value"], "question": "What are the region and population of Angola?", "question_toks": ["What", "are", "the", "region", "and", "population", "of", "Angola?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Angola\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Region, Population FROM country WHERE Name = 'Angola';"}
{"db_id": "world_1", "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "query_toks": ["SELECT", "Population", ",", "Region", "FROM", "country", "WHERE", "Name", "=", "``", "Angola", "''"], "query_toks_no_value": ["select", "population", ",", "region", "from", "country", "where", "name", "=", "value"], "question": "What region does Angola belong to and what is its population?", "question_toks": ["What", "region", "does", "Angola", "belong", "to", "and", "what", "is", "its", "population?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Angola\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Region, Population FROM country WHERE Name = 'Angola';"}
{"db_id": "world_1", "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "query_toks": ["SELECT", "avg", "(", "LifeExpectancy", ")", "FROM", "country", "WHERE", "Region", "=", "``", "Central", "Africa", "''"], "query_toks_no_value": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "region", "=", "value"], "question": "What is the average expected life expectancy for countries in Central Africa?", "question_toks": ["What", "is", "the", "average", "expected", "life", "expectancy", "for", "countries", "in", "Central", "Africa?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"Central Africa\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(LifeExpectancy) FROM country WHERE Continent='Africa' AND Region='Central Africa';"}
{"db_id": "world_1", "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "query_toks": ["SELECT", "avg", "(", "LifeExpectancy", ")", "FROM", "country", "WHERE", "Region", "=", "``", "Central", "Africa", "''"], "query_toks_no_value": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "region", "=", "value"], "question": "How long is the people\u2019s average life expectancy in Central Africa?", "question_toks": ["How", "long", "is", "the", "people\u2019s", "average", "life", "expectancy", "in", "Central", "Africa?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"Central Africa\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(LifeExpectancy) FROM country WHERE Continent='Africa' AND Region='Central Africa';"}
{"db_id": "world_1", "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "country", "WHERE", "Continent", "=", "``", "Asia", "''", "ORDER", "BY", "LifeExpectancy", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "country", "where", "continent", "=", "value", "order", "by", "lifeexpectancy", "limit", "value"], "question": "What is the name of country that has the shortest life expectancy in Asia?", "question_toks": ["What", "is", "the", "name", "of", "country", "that", "has", "the", "shortest", "life", "expectancy", "in", "Asia?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 15, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "country.Name \nFROM country \nWHERE country.Continent = 'Asia' \nORDER BY country.LifeExpectancy ASC \nLIMIT 1;"}
{"db_id": "world_1", "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "country", "WHERE", "Continent", "=", "``", "Asia", "''", "ORDER", "BY", "LifeExpectancy", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "country", "where", "continent", "=", "value", "order", "by", "lifeexpectancy", "limit", "value"], "question": "Give the name of the country in Asia with the lowest life expectancy.", "question_toks": ["Give", "the", "name", "of", "the", "country", "in", "Asia", "with", "the", "lowest", "life", "expectancy."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 15, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "country.Name \nFROM country \nWHERE country.Continent = 'Asia' \nORDER BY country.LifeExpectancy ASC \nLIMIT 1;"}
{"db_id": "world_1", "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "query_toks": ["SELECT", "sum", "(", "Population", ")", ",", "max", "(", "GNP", ")", "FROM", "country", "WHERE", "Continent", "=", "``", "Asia", "''"], "query_toks_no_value": ["select", "sum", "(", "population", ")", ",", "max", "(", "gnp", ")", "from", "country", "where", "continent", "=", "value"], "question": "What is the total population and maximum GNP in Asia?", "question_toks": ["What", "is", "the", "total", "population", "and", "maximum", "GNP", "in", "Asia?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [1, [0, [0, 16, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "SUM(country.Population), MAX(country.GNP) FROM country WHERE country.Continent='Asia';"}
{"db_id": "world_1", "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "query_toks": ["SELECT", "sum", "(", "Population", ")", ",", "max", "(", "GNP", ")", "FROM", "country", "WHERE", "Continent", "=", "``", "Asia", "''"], "query_toks_no_value": ["select", "sum", "(", "population", ")", ",", "max", "(", "gnp", ")", "from", "country", "where", "continent", "=", "value"], "question": "How many people live in Asia, and what is the largest GNP among them?", "question_toks": ["How", "many", "people", "live", "in", "Asia,", "and", "what", "is", "the", "largest", "GNP", "among", "them?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [1, [0, [0, 16, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "SUM(city.Population), MAX(country.GNP) FROM city JOIN country ON city.CountryCode=country.Code WHERE country.Continent='Asia';"}
{"db_id": "world_1", "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "query_toks": ["SELECT", "avg", "(", "LifeExpectancy", ")", "FROM", "country", "WHERE", "Continent", "=", "``", "Africa", "''", "AND", "GovernmentForm", "=", "``", "Republic", "''"], "query_toks_no_value": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "continent", "=", "value", "and", "governmentform", "=", "value"], "question": "What is the average life expectancy in African countries that are republics?", "question_toks": ["What", "is", "the", "average", "life", "expectancy", "in", "African", "countries", "that", "are", "republics?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Africa\"", null], "and", [false, 2, [0, [0, 19, false], null], "\"Republic\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';"}
{"db_id": "world_1", "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "query_toks": ["SELECT", "avg", "(", "LifeExpectancy", ")", "FROM", "country", "WHERE", "Continent", "=", "``", "Africa", "''", "AND", "GovernmentForm", "=", "``", "Republic", "''"], "query_toks_no_value": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "continent", "=", "value", "and", "governmentform", "=", "value"], "question": "Give the average life expectancy for countries in Africa which are republics?", "question_toks": ["Give", "the", "average", "life", "expectancy", "for", "countries", "in", "Africa", "which", "are", "republics?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Africa\"", null], "and", [false, 2, [0, [0, 19, false], null], "\"Republic\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(LifeExpectancy) FROM country WHERE Continent='Africa' AND GovernmentForm='Republic';"}
{"db_id": "world_1", "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "query_toks": ["SELECT", "sum", "(", "SurfaceArea", ")", "FROM", "country", "WHERE", "Continent", "=", "``", "Asia", "''", "OR", "Continent", "=", "``", "Europe", "''"], "query_toks_no_value": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", "or", "continent", "=", "value"], "question": "What is the total surface area of Asia and Europe?", "question_toks": ["What", "is", "the", "total", "surface", "area", "of", "Asia", "and", "Europe?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null], "or", [false, 2, [0, [0, 10, false], null], "\"Europe\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');"}
{"db_id": "world_1", "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "query_toks": ["SELECT", "sum", "(", "SurfaceArea", ")", "FROM", "country", "WHERE", "Continent", "=", "``", "Asia", "''", "OR", "Continent", "=", "``", "Europe", "''"], "query_toks_no_value": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", "or", "continent", "=", "value"], "question": "Give the total surface area covered by countries in Asia or Europe.", "question_toks": ["Give", "the", "total", "surface", "area", "covered", "by", "countries", "in", "Asia", "or", "Europe."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null], "or", [false, 2, [0, [0, 10, false], null], "\"Europe\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');"}
{"db_id": "world_1", "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "query_toks": ["SELECT", "sum", "(", "Population", ")", "FROM", "city", "WHERE", "District", "=", "``", "Gelderland", "''"], "query_toks_no_value": ["select", "sum", "(", "population", ")", "from", "city", "where", "district", "=", "value"], "question": "How many people live in Gelderland ?", "question_toks": ["How", "many", "people", "live", "in", "Gelderland", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[4, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"Gelderland\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "SUM(Population) FROM city WHERE District='Gelderland';"}
{"db_id": "world_1", "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "query_toks": ["SELECT", "sum", "(", "Population", ")", "FROM", "city", "WHERE", "District", "=", "``", "Gelderland", "''"], "query_toks_no_value": ["select", "sum", "(", "population", ")", "from", "city", "where", "district", "=", "value"], "question": "What is the total population of Gelderland ?", "question_toks": ["What", "is", "the", "total", "population", "of", "Gelderland", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[4, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"Gelderland\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "SUM(Population) FROM city WHERE District='Gelderland';"}
{"db_id": "world_1", "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "query_toks": ["SELECT", "avg", "(", "GNP", ")", ",", "sum", "(", "population", ")", "FROM", "country", "WHERE", "GovernmentForm", "=", "``", "US", "Territory", "''"], "query_toks_no_value": ["select", "avg", "(", "gnp", ")", ",", "sum", "(", "population", ")", "from", "country", "where", "governmentform", "=", "value"], "question": "What is the average GNP and total population in all US territory nations?", "question_toks": ["What", "is", "the", "average", "GNP", "and", "total", "population", "in", "all", "US", "territory", "nations?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 16, false], null]], [4, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"US Territory\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(GNP), SUM(Population) FROM country WHERE Continent = 'North America' AND Code2 LIKE 'US%';"}
{"db_id": "world_1", "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "query_toks": ["SELECT", "avg", "(", "GNP", ")", ",", "sum", "(", "population", ")", "FROM", "country", "WHERE", "GovernmentForm", "=", "``", "US", "Territory", "''"], "query_toks_no_value": ["select", "avg", "(", "gnp", ")", ",", "sum", "(", "population", ")", "from", "country", "where", "governmentform", "=", "value"], "question": "Give the mean GNP and total population of nations which are considered US territory.", "question_toks": ["Give", "the", "mean", "GNP", "and", "total", "population", "of", "nations", "which", "are", "considered", "US", "territory."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 16, false], null]], [4, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"US Territory\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(GNP), SUM(Population) FROM country WHERE Continent = 'North America' AND Region = 'Caribbean' AND GovernmentForm = 'Nonmetropolitan Territory of The US'"}
{"db_id": "world_1", "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "GovernmentForm", ")", "FROM", "country", "WHERE", "Continent", "=", "``", "Africa", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "governmentform", ")", "from", "country", "where", "continent", "=", "value"], "question": "How many type of governments are in Africa?", "question_toks": ["How", "many", "type", "of", "governments", "are", "in", "Africa?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 19, true], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Africa\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';"}
{"db_id": "world_1", "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "GovernmentForm", ")", "FROM", "country", "WHERE", "Continent", "=", "``", "Africa", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "governmentform", ")", "from", "country", "where", "continent", "=", "value"], "question": "How many different forms of governments are there in Africa?", "question_toks": ["How", "many", "different", "forms", "of", "governments", "are", "there", "in", "Africa?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 19, true], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Africa\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';"}
{"db_id": "world_1", "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "query_toks": ["SELECT", "COUNT", "(", "T2.Language", ")", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T1.Name", "=", "``", "Aruba", "''"], "query_toks_no_value": ["select", "count", "(", "t2", ".", "language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t1", ".", "name", "=", "value"], "question": "What is the total number of languages used in Aruba?", "question_toks": ["What", "is", "the", "total", "number", "of", "languages", "used", "in", "Aruba?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Aruba\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW';"}
{"db_id": "world_1", "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "query_toks": ["SELECT", "COUNT", "(", "T2.Language", ")", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T1.Name", "=", "``", "Aruba", "''"], "query_toks_no_value": ["select", "count", "(", "t2", ".", "language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t1", ".", "name", "=", "value"], "question": "How many languages are spoken in Aruba?", "question_toks": ["How", "many", "languages", "are", "spoken", "in", "Aruba?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Aruba\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(Language) FROM countrylanguage WHERE CountryCode='ABW';"}
{"db_id": "world_1", "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T1.Name", "=", "``", "Afghanistan", "''", "AND", "IsOfficial", "=", "``", "T", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t1", ".", "name", "=", "value", "and", "isofficial", "=", "value"], "question": "How many official languages does Afghanistan have?", "question_toks": ["How", "many", "official", "languages", "does", "Afghanistan", "have?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Afghanistan\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM countrylanguage WHERE CountryCode='AFG' AND IsOfficial='T';"}
{"db_id": "world_1", "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T1.Name", "=", "``", "Afghanistan", "''", "AND", "IsOfficial", "=", "``", "T", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t1", ".", "name", "=", "value", "and", "isofficial", "=", "value"], "question": "How many official languages are spoken in Afghanistan?", "question_toks": ["How", "many", "official", "languages", "are", "spoken", "in", "Afghanistan?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Afghanistan\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(Language) FROM countrylanguage WHERE CountryCode='AFG' AND IsOfficial='T';"}
{"db_id": "world_1", "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Name", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "GROUP", "BY", "T1.Name", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "group", "by", "t1", ".", "name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is name of the nation that speaks the largest number of languages?", "question_toks": ["What", "is", "name", "of", "the", "nation", "that", "speaks", "the", "largest", "number", "of", "languages?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "country.Name \nFROM country \nJOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nGROUP BY country.Code \nORDER BY COUNT(DISTINCT countrylanguage.Language) DESC \nLIMIT 1;"}
{"db_id": "world_1", "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Name", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "GROUP", "BY", "T1.Name", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "group", "by", "t1", ".", "name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Give the name of the nation that uses the greatest amount of languages.", "question_toks": ["Give", "the", "name", "of", "the", "nation", "that", "uses", "the", "greatest", "amount", "of", "languages."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "country.Name \nFROM country \nJOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nGROUP BY country.Code \nORDER BY COUNT(countrylanguage.Language) DESC \nLIMIT 1;"}
{"db_id": "world_1", "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Continent", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "GROUP", "BY", "T1.Continent", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "continent", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "group", "by", "t1", ".", "continent", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which continent has the most diverse languages?", "question_toks": ["Which", "continent", "has", "the", "most", "diverse", "languages?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "country.Continent \nFROM country \nJOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nGROUP BY country.Continent \nORDER BY COUNT(DISTINCT countrylanguage.Language) DESC \nLIMIT 1;"}
{"db_id": "world_1", "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Continent", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "GROUP", "BY", "T1.Continent", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "continent", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "group", "by", "t1", ".", "continent", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which continent speaks the most languages?", "question_toks": ["Which", "continent", "speaks", "the", "most", "languages?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Continent, COUNT(DISTINCT Language) AS NumLanguages \n FROM countrylanguage \n JOIN country ON countrylanguage.CountryCode=country.Code \n GROUP BY Continent \n ORDER BY NumLanguages DESC \n LIMIT 1;"}
{"db_id": "world_1", "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "query_toks": ["SELECT", "T1.Name", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T2.Language", "=", "``", "English", "''", "INTERSECT", "SELECT", "T1.Name", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T2.Language", "=", "``", "French", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value", "intersect", "select", "t1", ".", "name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value"], "question": "What are the names of nations speak both English and French?", "question_toks": ["What", "are", "the", "names", "of", "nations", "speak", "both", "English", "and", "French?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"French\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "country.Name \nFROM country \nINNER JOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE countrylanguage.Language='English' AND countrylanguage.IsOfficial='T' \nAND country.Code IN (SELECT CountryCode FROM countrylanguage WHERE Language='French' AND IsOfficial='T');"}
{"db_id": "world_1", "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "query_toks": ["SELECT", "T1.Name", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T2.Language", "=", "``", "English", "''", "INTERSECT", "SELECT", "T1.Name", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T2.Language", "=", "``", "French", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value", "intersect", "select", "t1", ".", "name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value"], "question": "Give the names of nations that speak both English and French.", "question_toks": ["Give", "the", "names", "of", "nations", "that", "speak", "both", "English", "and", "French."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"French\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "country.Name \nFROM country \nINNER JOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE countrylanguage.Language='English' AND country.Code IN \n(SELECT CountryCode FROM countrylanguage WHERE Language='French');"}
{"db_id": "world_1", "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "query_toks": ["SELECT", "T1.Name", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T2.Language", "=", "``", "English", "''", "AND", "T2.IsOfficial", "=", "``", "T", "''", "INTERSECT", "SELECT", "T1.Name", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T2.Language", "=", "``", "French", "''", "AND", "T2.IsOfficial", "=", "``", "T", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value", "and", "t2", ".", "isofficial", "=", "value", "intersect", "select", "t1", ".", "name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value", "and", "t2", ".", "isofficial", "=", "value"], "question": "What are the names of nations use both English and French officially?", "question_toks": ["What", "are", "the", "names", "of", "nations", "use", "both", "English", "and", "French", "officially?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"French\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "country.Name \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' \nINTERSECT \nSELECT country.Name \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE countrylanguage.Language = 'French' AND countrylanguage.IsOfficial = 'T';"}
{"db_id": "world_1", "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "query_toks": ["SELECT", "T1.Name", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T2.Language", "=", "``", "English", "''", "AND", "T2.IsOfficial", "=", "``", "T", "''", "INTERSECT", "SELECT", "T1.Name", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T2.Language", "=", "``", "French", "''", "AND", "T2.IsOfficial", "=", "``", "T", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value", "and", "t2", ".", "isofficial", "=", "value", "intersect", "select", "t1", ".", "name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value", "and", "t2", ".", "isofficial", "=", "value"], "question": "Give the names of countries officially use English and French", "question_toks": ["Give", "the", "names", "of", "countries", "officially", "use", "English", "and", "French"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"French\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "country.Name \nFROM country \nJOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE (countrylanguage.Language='English' AND countrylanguage.IsOfficial='T') OR (countrylanguage.Language='French' AND countrylanguage.IsOfficial='T');"}
{"db_id": "world_1", "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "Continent", ")", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T2.Language", "=", "``", "Chinese", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "continent", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value"], "question": "What is the number of distinct continents where Chinese is spoken?", "question_toks": ["What", "is", "the", "number", "of", "distinct", "continents", "where", "Chinese", "is", "spoken?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 10, true], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"Chinese\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code=countrylanguage.CountryCode WHERE countrylanguage.Language='Chinese' AND countrylanguage.IsOfficial='T';"}
{"db_id": "world_1", "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "Continent", ")", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T2.Language", "=", "``", "Chinese", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "continent", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value"], "question": "How many continents speak Chinese?", "question_toks": ["How", "many", "continents", "speak", "Chinese?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 10, true], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"Chinese\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(DISTINCT country.Continent) FROM countrylanguage \nJOIN country ON countrylanguage.CountryCode=country.Code \nWHERE countrylanguage.Language='Chinese' AND countrylanguage.IsOfficial='T';"}
{"db_id": "world_1", "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "query_toks": ["SELECT", "DISTINCT", "T1.Region", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T2.Language", "=", "``", "English", "''", "OR", "T2.Language", "=", "``", "Dutch", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "region", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value", "or", "t2", ".", "language", "=", "value"], "question": "What are the regions that use English or Dutch?", "question_toks": ["What", "are", "the", "regions", "that", "use", "English", "or", "Dutch?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [true, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null], "or", [false, 2, [0, [0, 24, false], null], "\"Dutch\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "country.Region \nFROM country \nJOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE countrylanguage.Language IN ('English', 'Dutch');"}
{"db_id": "world_1", "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "query_toks": ["SELECT", "DISTINCT", "T1.Region", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T2.Language", "=", "``", "English", "''", "OR", "T2.Language", "=", "``", "Dutch", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "region", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value", "or", "t2", ".", "language", "=", "value"], "question": "Which regions speak Dutch or English?", "question_toks": ["Which", "regions", "speak", "Dutch", "or", "English?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [true, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null], "or", [false, 2, [0, [0, 24, false], null], "\"Dutch\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "country.Region\nFROM country\nJOIN countrylanguage ON country.Code=countrylanguage.CountryCode\nWHERE countrylanguage.Language IN ('Dutch', 'English');"}
{"db_id": "world_1", "query": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"", "query_toks": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"english\"", "and", "isofficial", "=", "\"t\"", "union", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"dutch\"", "and", "isofficial", "=", "\"t\""], "query_toks_no_value": ["select", "t1", ".", "name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value", "and", "isofficial", "=", "value", "union", "select", "t1", ".", "name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value", "and", "isofficial", "=", "value"], "question": "What are the countries where either English or Dutch is officially spoken ?", "question_toks": ["What", "are", "the", "countries", "where", "either", "English", "or", "Dutch", "is", "officially", "spoken", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"english\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"t\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"dutch\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"t\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "Prediction": "country.Name \nFROM country \nJOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE (countrylanguage.Language='English' OR countrylanguage.Language='Dutch') AND countrylanguage.IsOfficial='T';"}
{"db_id": "world_1", "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.Language", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T1.Continent", "=", "``", "Asia", "''", "GROUP", "BY", "T2.Language", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t1", ".", "continent", "=", "value", "group", "by", "t2", ".", "language", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which language is the most popular on Asian ?", "question_toks": ["Which", "language", "is", "the", "most", "popular", "on", "Asian", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [[0, 24, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Language \nFROM countrylanguage \nJOIN country ON countrylanguage.CountryCode=country.Code \nWHERE country.Continent='Asia' \nORDER BY Percentage DESC \nLIMIT 1;"}
{"db_id": "world_1", "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.Language", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T1.Continent", "=", "``", "Asia", "''", "GROUP", "BY", "T2.Language", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t1", ".", "continent", "=", "value", "group", "by", "t2", ".", "language", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the language that is used by the largest number of Asian nations?", "question_toks": ["What", "is", "the", "language", "that", "is", "used", "by", "the", "largest", "number", "of", "Asian", "nations?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [[0, 24, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Language \nFROM countrylanguage \nJOIN country ON countrylanguage.CountryCode=country.Code \nWHERE Continent='Asia' \nGROUP BY Language \nORDER BY COUNT(DISTINCT country.Code) DESC \nLIMIT 1;"}
{"db_id": "world_1", "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "query_toks": ["SELECT", "T2.Language", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T1.GovernmentForm", "=", "``", "Republic", "''", "GROUP", "BY", "T2.Language", "HAVING", "COUNT", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "t2", ".", "language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t1", ".", "governmentform", "=", "value", "group", "by", "t2", ".", "language", "having", "count", "(", "*", ")", "=", "value"], "question": "Which languages are spoken by only one republic country?", "question_toks": ["Which", "languages", "are", "spoken", "by", "only", "one", "republic", "country?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"Republic\"", null]], "groupBy": [[0, 24, false]], "having": [[false, 2, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Language \nFROM countrylanguage \nWHERE CountryCode IN (\n    SELECT Code \n    FROM country \n    WHERE GovernmentForm = 'Republic'\n) \nGROUP BY Language \nHAVING COUNT(DISTINCT CountryCode) = 1;"}
{"db_id": "world_1", "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "query_toks": ["SELECT", "T2.Language", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T1.GovernmentForm", "=", "``", "Republic", "''", "GROUP", "BY", "T2.Language", "HAVING", "COUNT", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "t2", ".", "language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t1", ".", "governmentform", "=", "value", "group", "by", "t2", ".", "language", "having", "count", "(", "*", ")", "=", "value"], "question": "What languages are only used by a single republic country?", "question_toks": ["What", "languages", "are", "only", "used", "by", "a", "single", "republic", "country?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"Republic\"", null]], "groupBy": [[0, 24, false]], "having": [[false, 2, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Language\nFROM countrylanguage\nWHERE CountryCode IN (\n    SELECT Code\n    FROM country\n    WHERE GovernmentForm LIKE '%Republic%'\n)\nGROUP BY Language\nHAVING COUNT(DISTINCT CountryCode) = 1;"}
{"db_id": "world_1", "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "query_toks": ["SELECT", "T1.Name", ",", "T1.Population", "FROM", "city", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.CountryCode", "=", "T2.CountryCode", "WHERE", "T2.Language", "=", "``", "English", "''", "ORDER", "BY", "T1.Population", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "population", "from", "city", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "countrycode", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value", "order", "by", "t1", ".", "population", "desc", "limit", "value"], "question": "Find the city with the most people that uses English.", "question_toks": ["Find", "the", "city", "with", "the", "most", "people", "that", "uses", "English."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 5, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "city.Name \nFROM city \nJOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode \nWHERE countrylanguage.Language = 'English' \nORDER BY city.Population DESC \nLIMIT 1;"}
{"db_id": "world_1", "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "query_toks": ["SELECT", "T1.Name", ",", "T1.Population", "FROM", "city", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.CountryCode", "=", "T2.CountryCode", "WHERE", "T2.Language", "=", "``", "English", "''", "ORDER", "BY", "T1.Population", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "population", "from", "city", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "countrycode", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value", "order", "by", "t1", ".", "population", "desc", "limit", "value"], "question": "What is the most populace city that speaks English?", "question_toks": ["What", "is", "the", "most", "populace", "city", "that", "speaks", "English?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 5, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "city.Name \nFROM city \nJOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode \nWHERE countrylanguage.Language = 'English' \nORDER BY city.Population DESC \nLIMIT 1;"}
{"db_id": "world_1", "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "query_toks": ["SELECT", "Name", ",", "Population", ",", "LifeExpectancy", "FROM", "country", "WHERE", "Continent", "=", "``", "Asia", "''", "ORDER", "BY", "SurfaceArea", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "population", ",", "lifeexpectancy", "from", "country", "where", "continent", "=", "value", "order", "by", "surfacearea", "desc", "limit", "value"], "question": "What are the name, population, and life expectancy of the largest Asian country by land?", "question_toks": ["What", "are", "the", "name,", "population,", "and", "life", "expectancy", "of", "the", "largest", "Asian", "country", "by", "land?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 14, false], null]], [0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 12, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "country.Name, country.Population, country.LifeExpectancy \n FROM country \n WHERE continent = 'Asia' \n ORDER BY SurfaceArea DESC \n LIMIT 1;"}
{"db_id": "world_1", "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "query_toks": ["SELECT", "avg", "(", "LifeExpectancy", ")", "FROM", "country", "WHERE", "Name", "NOT", "IN", "(", "SELECT", "T1.Name", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T2.Language", "=", "``", "English", "''", "AND", "T2.IsOfficial", "=", "``", "T", "''", ")"], "query_toks_no_value": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1", ".", "name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value", "and", "t2", ".", "isofficial", "=", "value", ")"], "question": "What is average life expectancy in the countries where English is not used officially ?", "question_toks": ["What", "is", "average", "life", "expectancy", "in", "the", "countries", "where", "English", "is", "not", "used", "officially", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 15, false], null]]]], "where": [[true, 8, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')"}
{"db_id": "world_1", "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "query_toks": ["SELECT", "avg", "(", "LifeExpectancy", ")", "FROM", "country", "WHERE", "Name", "NOT", "IN", "(", "SELECT", "T1.Name", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T2.Language", "=", "``", "English", "''", "AND", "T2.IsOfficial", "=", "``", "T", "''", ")"], "query_toks_no_value": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1", ".", "name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value", "and", "t2", ".", "isofficial", "=", "value", ")"], "question": "Give the mean life expectancy of countries in which English is not officially spoken .", "question_toks": ["Give", "the", "mean", "life", "expectancy", "of", "countries", "in", "which", "English", "is", "not", "officially", "spoken", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 15, false], null]]]], "where": [[true, 8, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')"}
{"db_id": "world_1", "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "query_toks": ["SELECT", "sum", "(", "Population", ")", "FROM", "country", "WHERE", "Name", "NOT", "IN", "(", "SELECT", "T1.Name", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T2.Language", "=", "``", "English", "''", ")"], "query_toks_no_value": ["select", "sum", "(", "population", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1", ".", "name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value", ")"], "question": "What is the total number of people living in the nations that do not use English?", "question_toks": ["What", "is", "the", "total", "number", "of", "people", "living", "in", "the", "nations", "that", "do", "not", "use", "English?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]]]], "where": [[true, 8, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "SUM(city.Population) \nFROM city \nJOIN country ON city.CountryCode=country.Code \nJOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE countrylanguage.Language != 'English' AND countrylanguage.IsOfficial = 'T'"}
{"db_id": "world_1", "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "query_toks": ["SELECT", "sum", "(", "Population", ")", "FROM", "country", "WHERE", "Name", "NOT", "IN", "(", "SELECT", "T1.Name", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T2.Language", "=", "``", "English", "''", ")"], "query_toks_no_value": ["select", "sum", "(", "population", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1", ".", "name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value", ")"], "question": "How many people live in countries that do not speak English?", "question_toks": ["How", "many", "people", "live", "in", "countries", "that", "do", "not", "speak", "English?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]]]], "where": [[true, 8, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "SUM(city.Population) \nFROM city \nJOIN country ON city.CountryCode=country.Code \nJOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE countrylanguage.Language != 'English' AND countrylanguage.IsOfficial = 'T'"}
{"db_id": "world_1", "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "query_toks": ["SELECT", "T2.Language", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T1.HeadOfState", "=", "``", "Beatrix", "''", "AND", "T2.IsOfficial", "=", "``", "T", "''"], "query_toks_no_value": ["select", "t2", ".", "language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t1", ".", "headofstate", "=", "value", "and", "t2", ".", "isofficial", "=", "value"], "question": "What is the official language spoken in the country lead by Beatrix?", "question_toks": ["What", "is", "the", "official", "language", "spoken", "in", "the", "country", "lead", "by", "Beatrix?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"Beatrix\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "countrylanguage.Language \nFROM countrylanguage \nJOIN country ON countrylanguage.CountryCode = country.Code \nWHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';"}
{"db_id": "world_1", "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "query_toks": ["SELECT", "T2.Language", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T1.HeadOfState", "=", "``", "Beatrix", "''", "AND", "T2.IsOfficial", "=", "``", "T", "''"], "query_toks_no_value": ["select", "t2", ".", "language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t1", ".", "headofstate", "=", "value", "and", "t2", ".", "isofficial", "=", "value"], "question": "What is the official language used in the country the name of whose chief of state is Beatrix.", "question_toks": ["What", "is", "the", "official", "language", "used", "in", "the", "country", "the", "name", "of", "whose", "chief", "of", "state", "is", "Beatrix."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"Beatrix\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "countrylanguage.Language \n FROM countrylanguage \n JOIN country ON countrylanguage.CountryCode = country.Code \n WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';"}
{"db_id": "world_1", "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T2.Language", ")", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "IndepYear", "<", "1930", "AND", "T2.IsOfficial", "=", "``", "T", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "indepyear", "<", "value", "and", "t2", ".", "isofficial", "=", "value"], "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "question_toks": ["What", "is", "the", "total", "number", "of", "unique", "official", "languages", "spoken", "in", "the", "countries", "that", "are", "founded", "before", "1930?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 24, true], null]]]], "where": [[false, 4, [0, [0, 13, false], null], 1930.0, null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(DISTINCT Language) \nFROM countrylanguage \nJOIN country ON countrylanguage.CountryCode=country.Code \nWHERE IsOfficial='T' AND IndepYear<1930;"}
{"db_id": "world_1", "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T2.Language", ")", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "IndepYear", "<", "1930", "AND", "T2.IsOfficial", "=", "``", "T", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "indepyear", "<", "value", "and", "t2", ".", "isofficial", "=", "value"], "question": "For the countries founded before 1930, what is the total number of distinct official languages?", "question_toks": ["For", "the", "countries", "founded", "before", "1930,", "what", "is", "the", "total", "number", "of", "distinct", "official", "languages?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 24, true], null]]]], "where": [[false, 4, [0, [0, 13, false], null], 1930.0, null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(DISTINCT Language) FROM countrylanguage \nWHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930) AND IsOfficial = 'T';"}
{"db_id": "world_1", "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "query_toks": ["SELECT", "Name", "FROM", "country", "WHERE", "SurfaceArea", ">", "(", "SELECT", "min", "(", "SurfaceArea", ")", "FROM", "country", "WHERE", "Continent", "=", "``", "Europe", "''", ")"], "query_toks_no_value": ["select", "name", "from", "country", "where", "surfacearea", ">", "(", "select", "min", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", ")"], "question": "What are the countries that have greater surface area than any country in Europe?", "question_toks": ["What", "are", "the", "countries", "that", "have", "greater", "surface", "area", "than", "any", "country", "in", "Europe?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 12, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[2, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Europe\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name \nFROM country \nWHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')"}
{"db_id": "world_1", "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "query_toks": ["SELECT", "Name", "FROM", "country", "WHERE", "SurfaceArea", ">", "(", "SELECT", "min", "(", "SurfaceArea", ")", "FROM", "country", "WHERE", "Continent", "=", "``", "Europe", "''", ")"], "query_toks_no_value": ["select", "name", "from", "country", "where", "surfacearea", ">", "(", "select", "min", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", ")"], "question": "Which countries larger than that of any country in Europe by land?", "question_toks": ["Which", "countries", "larger", "than", "that", "of", "any", "country", "in", "Europe", "by", "land?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 12, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[2, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Europe\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');"}
{"db_id": "world_1", "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")", "query_toks": ["SELECT", "Name", "FROM", "country", "WHERE", "Continent", "=", "``", "Africa", "''", "AND", "population", "<", "(", "SELECT", "max", "(", "population", ")", "FROM", "country", "WHERE", "Continent", "=", "``", "Asia", "''", ")"], "query_toks_no_value": ["select", "name", "from", "country", "where", "continent", "=", "value", "and", "population", "<", "(", "select", "max", "(", "population", ")", "from", "country", "where", "continent", "=", "value", ")"], "question": "What are the African countries that have less people than any country in Asia?", "question_toks": ["What", "are", "the", "African", "countries", "that", "have", "less", "people", "than", "any", "country", "in", "Asia?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Africa\"", null], "and", [false, 4, [0, [0, 14, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[1, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "country.Name \nFROM country \nWHERE country.Continent = 'Africa' \nAND country.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');"}
{"db_id": "world_1", "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")", "query_toks": ["SELECT", "Name", "FROM", "country", "WHERE", "Continent", "=", "``", "Africa", "''", "AND", "population", "<", "(", "SELECT", "min", "(", "population", ")", "FROM", "country", "WHERE", "Continent", "=", "``", "Asia", "''", ")"], "query_toks_no_value": ["select", "name", "from", "country", "where", "continent", "=", "value", "and", "population", "<", "(", "select", "min", "(", "population", ")", "from", "country", "where", "continent", "=", "value", ")"], "question": "Which African countries have fewer people than that of any country in Asia?", "question_toks": ["Which", "African", "countries", "have", "fewer", "people", "than", "that", "of", "any", "country", "in", "Asia?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Africa\"", null], "and", [false, 4, [0, [0, 14, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[2, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "country.Name \nFROM country \nWHERE continent = 'Africa' \nAND Population < (SELECT MIN(Population) FROM country WHERE continent = 'Asia')"}
{"db_id": "world_1", "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "query_toks": ["SELECT", "Name", "FROM", "country", "WHERE", "Continent", "=", "``", "Asia", "''", "AND", "population", ">", "(", "SELECT", "max", "(", "population", ")", "FROM", "country", "WHERE", "Continent", "=", "``", "Africa", "''", ")"], "query_toks_no_value": ["select", "name", "from", "country", "where", "continent", "=", "value", "and", "population", ">", "(", "select", "max", "(", "population", ")", "from", "country", "where", "continent", "=", "value", ")"], "question": "Which Asian countries have more people than any country in Africa?", "question_toks": ["Which", "Asian", "countries", "have", "more", "people", "than", "any", "country", "in", "Africa?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null], "and", [false, 3, [0, [0, 14, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[1, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Africa\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "country.Name \nFROM country \nWHERE country.Continent = 'Asia' \nAND country.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')"}
{"db_id": "world_1", "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")", "query_toks": ["SELECT", "Name", "FROM", "country", "WHERE", "Continent", "=", "``", "Asia", "''", "AND", "population", ">", "(", "SELECT", "min", "(", "population", ")", "FROM", "country", "WHERE", "Continent", "=", "``", "Africa", "''", ")"], "query_toks_no_value": ["select", "name", "from", "country", "where", "continent", "=", "value", "and", "population", ">", "(", "select", "min", "(", "population", ")", "from", "country", "where", "continent", "=", "value", ")"], "question": "What are the Asian countries have more people than that of any country in Africa?", "question_toks": ["What", "are", "the", "Asian", "countries", "have", "more", "people", "than", "that", "of", "any", "country", "in", "Africa?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null], "and", [false, 3, [0, [0, 14, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[2, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Africa\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "country.Name \nFROM country \nWHERE country.Continent = 'Asia' \nAND country.Population > (\n    SELECT MAX(country.Population) \n    FROM country \n    WHERE country.Continent = 'Africa'\n);"}
{"db_id": "world_1", "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "query_toks": ["SELECT", "CountryCode", "FROM", "countrylanguage", "EXCEPT", "SELECT", "CountryCode", "FROM", "countrylanguage", "WHERE", "LANGUAGE", "=", "``", "English", "''"], "query_toks_no_value": ["select", "countrycode", "from", "countrylanguage", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "value"], "question": "What are the country codes for countries that do not speak English?", "question_toks": ["What", "are", "the", "country", "codes", "for", "countries", "that", "do", "not", "speak", "English?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "Prediction": "country.Code \nFROM country \nWHERE country.Code NOT IN \n(SELECT CountryCode FROM countrylanguage WHERE Language='English');"}
{"db_id": "world_1", "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "query_toks": ["SELECT", "CountryCode", "FROM", "countrylanguage", "EXCEPT", "SELECT", "CountryCode", "FROM", "countrylanguage", "WHERE", "LANGUAGE", "=", "``", "English", "''"], "query_toks_no_value": ["select", "countrycode", "from", "countrylanguage", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "value"], "question": "Return the country codes for countries that do not speak English.", "question_toks": ["Return", "the", "country", "codes", "for", "countries", "that", "do", "not", "speak", "English."], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "Prediction": "country.Code\nFROM country\nWHERE country.Code NOT IN (\n    SELECT countrylanguage.CountryCode\n    FROM countrylanguage\n    WHERE countrylanguage.Language = 'English'\n);"}
{"db_id": "world_1", "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "query_toks": ["SELECT", "DISTINCT", "CountryCode", "FROM", "countrylanguage", "WHERE", "LANGUAGE", "!", "=", "``", "English", "''"], "query_toks_no_value": ["select", "distinct", "countrycode", "from", "countrylanguage", "where", "language", "!", "=", "value"], "question": "What are the country codes of countries where people speak other than English?", "question_toks": ["What", "are", "the", "country", "codes", "of", "countries", "where", "people", "speak", "other", "than", "English?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [true, [[0, [0, [0, 23, false], null]]]], "where": [[false, 7, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "country.Code \nFROM country \nINNER JOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE countrylanguage.Language != 'English';"}
{"db_id": "world_1", "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "query_toks": ["SELECT", "DISTINCT", "CountryCode", "FROM", "countrylanguage", "WHERE", "LANGUAGE", "!", "=", "``", "English", "''"], "query_toks_no_value": ["select", "distinct", "countrycode", "from", "countrylanguage", "where", "language", "!", "=", "value"], "question": "Give the country codes for countries in which people does not speak English.", "question_toks": ["Give", "the", "country", "codes", "for", "countries", "in", "which", "people", "does", "not", "speak", "English."], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [true, [[0, [0, [0, 23, false], null]]]], "where": [[false, 7, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "country.Code \nFROM country \nWHERE country.Code NOT IN \n(SELECT countrylanguage.CountryCode \nFROM countrylanguage \nWHERE countrylanguage.Language = 'English');"}
{"db_id": "world_1", "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "query_toks": ["SELECT", "Code", "FROM", "country", "WHERE", "GovernmentForm", "!", "=", "``", "Republic", "''", "EXCEPT", "SELECT", "CountryCode", "FROM", "countrylanguage", "WHERE", "LANGUAGE", "=", "``", "English", "''"], "query_toks_no_value": ["select", "code", "from", "country", "where", "governmentform", "!", "=", "value", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "value"], "question": "What are the codes of the countries that do not speak English and are not Republic?", "question_toks": ["What", "are", "the", "codes", "of", "the", "countries", "that", "do", "not", "speak", "English", "and", "are", "not", "Republic?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [[false, 7, [0, [0, 19, false], null], "\"Republic\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "Prediction": "country.Code \nFROM country \nLEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE countrylanguage.Language != 'English' AND country.GovernmentForm != 'Republic';"}
{"db_id": "world_1", "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "query_toks": ["SELECT", "Code", "FROM", "country", "WHERE", "GovernmentForm", "!", "=", "``", "Republic", "''", "EXCEPT", "SELECT", "CountryCode", "FROM", "countrylanguage", "WHERE", "LANGUAGE", "=", "``", "English", "''"], "query_toks_no_value": ["select", "code", "from", "country", "where", "governmentform", "!", "=", "value", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "value"], "question": "Return the codes of non republic countries that do not speak Englishs.", "question_toks": ["Return", "the", "codes", "of", "non", "republic", "countries", "that", "do", "not", "speak", "Englishs."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [[false, 7, [0, [0, 19, false], null], "\"Republic\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "Prediction": "country.Code \nFROM country \nLEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE country.GovernmentForm != 'Republic' AND countrylanguage.Language != 'English' AND countrylanguage.IsOfficial = 'T' OR countrylanguage.IsOfficial IS NULL;"}
{"db_id": "world_1", "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "query_toks": ["SELECT", "DISTINCT", "T2.Name", "FROM", "country", "AS", "T1", "JOIN", "city", "AS", "T2", "ON", "T2.CountryCode", "=", "T1.Code", "WHERE", "T1.Continent", "=", "'Europe", "'", "AND", "T1.Name", "NOT", "IN", "(", "SELECT", "T3.Name", "FROM", "country", "AS", "T3", "JOIN", "countrylanguage", "AS", "T4", "ON", "T3.Code", "=", "T4.CountryCode", "WHERE", "T4.IsOfficial", "=", "'T", "'", "AND", "T4.Language", "=", "'English", "'", ")"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t2", ".", "countrycode", "=", "t1", ".", "code", "where", "t1", ".", "continent", "=", "value", "and", "t1", ".", "name", "not", "in", "(", "select", "t3", ".", "name", "from", "country", "as", "t3", "join", "countrylanguage", "as", "t4", "on", "t3", ".", "code", "=", "t4", ".", "countrycode", "where", "t4", ".", "isofficial", "=", "value", "and", "t4", ".", "language", "=", "value", ")"], "question": "Which cities are in European countries where English is not spoken officially?", "question_toks": ["Which", "cities", "are", "in", "European", "countries", "where", "English", "is", "not", "spoken", "officially?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 8, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Europe\"", null], "and", [true, 8, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"T\"", null], "and", [false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "city.Name \nFROM city \nJOIN country ON city.CountryCode=country.Code \nJOIN countrylanguage ON countrylanguage.CountryCode=country.Code \nWHERE country.Continent='Europe' AND countrylanguage.Language!='English' AND countrylanguage.IsOfficial='F';"}
{"db_id": "world_1", "query": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "query_toks": ["select", "distinct", "t3.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "join", "city", "as", "t3", "on", "t1.code", "=", "t3.countrycode", "where", "t2.isofficial", "=", "\"t\"", "and", "t2.language", "=", "\"chinese\"", "and", "t1.continent", "=", "\"asia\""], "query_toks_no_value": ["select", "distinct", "t3", ".", "name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "join", "city", "as", "t3", "on", "t1", ".", "code", "=", "t3", ".", "countrycode", "where", "t2", ".", "isofficial", "=", "value", "and", "t2", ".", "language", "=", "value", "and", "t1", ".", "continent", "=", "value"], "question": "Whic`h unique cities are in  Asian countries where Chinese is the official ?", "question_toks": ["Whic`h", "unique", "cities", "are", "in", "Asian", "countries", "where", "Chinese", "is", "the", "official", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null], "and", [false, 2, [0, [0, 8, false], null], [0, 3, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"t\"", null], "and", [false, 2, [0, [0, 24, false], null], "\"chinese\"", null], "and", [false, 2, [0, [0, 10, false], null], "\"asia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "city.Name \nFROM city \nJOIN country ON city.CountryCode=country.Code \nJOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE country.Continent='Asia' AND countrylanguage.Language='Chinese' AND countrylanguage.IsOfficial='T' \nGROUP BY city.Name;"}
{"db_id": "world_1", "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "query_toks": ["SELECT", "DISTINCT", "T3.Name", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "JOIN", "city", "AS", "T3", "ON", "T1.Code", "=", "T3.CountryCode", "WHERE", "T2.IsOfficial", "=", "'T", "'", "AND", "T2.Language", "=", "'Chinese", "'", "AND", "T1.Continent", "=", "``", "Asia", "''"], "query_toks_no_value": ["select", "distinct", "t3", ".", "name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "join", "city", "as", "t3", "on", "t1", ".", "code", "=", "t3", ".", "countrycode", "where", "t2", ".", "isofficial", "=", "value", "and", "t2", ".", "language", "=", "value", "and", "t1", ".", "continent", "=", "value"], "question": "Return the different names of cities that are in Asia and for which Chinese is used officially .", "question_toks": ["Return", "the", "different", "names", "of", "cities", "that", "are", "in", "Asia", "and", "for", "which", "Chinese", "is", "used", "officially", "."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null], "and", [false, 2, [0, [0, 8, false], null], [0, 3, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"T\"", null], "and", [false, 2, [0, [0, 24, false], null], "\"Chinese\"", null], "and", [false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "city.Name \nFROM city \nJOIN country ON city.CountryCode=country.Code \nJOIN countrylanguage ON countrylanguage.CountryCode=country.Code \nWHERE country.Continent='Asia' AND countrylanguage.Language='Chinese' AND countrylanguage.IsOfficial='T';"}
{"db_id": "world_1", "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "query_toks": ["SELECT", "Name", ",", "SurfaceArea", ",", "IndepYear", "FROM", "country", "ORDER", "BY", "Population", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "surfacearea", ",", "indepyear", "from", "country", "order", "by", "population", "limit", "value"], "question": "What are the name, independence year, and surface area of the country with the least number of nationalities?", "question_toks": ["What", "are", "the", "name,", "independence", "year,", "and", "surface", "area", "of", "the", "country", "with", "the", "least", "number", "of", "nationalities?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 12, false], null]], [0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 14, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "country.Name, country.IndepYear, country.SurfaceArea\n FROM country\n WHERE country.Code IN (\n     SELECT CountryCode\n     FROM countrylanguage\n     GROUP BY CountryCode\n     HAVING COUNT(*) = (\n         SELECT MIN(nationality_count)\n         FROM (\n             SELECT COUNT(*) AS nationality_count\n             FROM countrylanguage\n             GROUP BY CountryCode\n         )\n     )\n );"}
{"db_id": "world_1", "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "query_toks": ["SELECT", "Name", ",", "SurfaceArea", ",", "IndepYear", "FROM", "country", "ORDER", "BY", "Population", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "surfacearea", ",", "indepyear", "from", "country", "order", "by", "population", "limit", "value"], "question": "Give the name, year of independence, and surface area of the country that has the fewest people.", "question_toks": ["Give", "the", "name,", "year", "of", "independence,", "and", "surface", "area", "of", "the", "country", "that", "has", "the", "fewest", "people."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 12, false], null]], [0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 14, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "country.Name, country.IndepYear, country.SurfaceArea\n FROM country\n JOIN city ON city.CountryCode=country.Code\n GROUP BY country.Code\n ORDER BY COUNT(city.ID) ASC\n LIMIT 1;"}
{"db_id": "world_1", "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "query_toks": ["SELECT", "Name", ",", "population", ",", "HeadOfState", "FROM", "country", "ORDER", "BY", "SurfaceArea", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "population", ",", "headofstate", "from", "country", "order", "by", "surfacearea", "desc", "limit", "value"], "question": "What are the population, name and leader of the largest country by land?", "question_toks": ["What", "are", "the", "population,", "name", "and", "leader", "of", "the", "largest", "country", "by", "land?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 14, false], null]], [0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 12, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "country.Population, country.Name, country.HeadOfState \n FROM country \n WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)"}
{"db_id": "world_1", "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "District", "FROM", "city", "WHERE", "Population", ">", "(", "SELECT", "avg", "(", "Population", ")", "FROM", "city", ")", "GROUP", "BY", "District"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "district", "from", "city", "where", "population", ">", "(", "select", "avg", "(", "population", ")", "from", "city", ")", "group", "by", "district"], "question": "Find the number of cities in each district who have more people than average?", "question_toks": ["Find", "the", "number", "of", "cities", "in", "each", "district", "who", "have", "more", "people", "than", "average?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 3, [0, [0, 5, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "District, COUNT(*) \nFROM city \nWHERE Population > (SELECT AVG(Population) FROM city) \nGROUP BY District;"}
{"db_id": "world_1", "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "District", "FROM", "city", "WHERE", "Population", ">", "(", "SELECT", "avg", "(", "Population", ")", "FROM", "city", ")", "GROUP", "BY", "District"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "district", "from", "city", "where", "population", ">", "(", "select", "avg", "(", "population", ")", "from", "city", ")", "group", "by", "district"], "question": "How many cities in each district have more number of people than average?", "question_toks": ["How", "many", "cities", "in", "each", "district", "have", "more", "number", "of", "people", "than", "average?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 3, [0, [0, 5, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "District, COUNT(*) \nFROM city \nWHERE Population > (SELECT AVG(Population) FROM city) \nGROUP BY District;"}
{"db_id": "world_1", "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "query_toks": ["SELECT", "Name", ",", "SurfaceArea", "FROM", "country", "ORDER", "BY", "SurfaceArea", "DESC", "LIMIT", "5"], "query_toks_no_value": ["select", "name", ",", "surfacearea", "from", "country", "order", "by", "surfacearea", "desc", "limit", "value"], "question": "Return the names and surface areas of the 5 largest countries.", "question_toks": ["Return", "the", "names", "and", "surface", "areas", "of", "the", "5", "largest", "countries."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 12, false], null]]], "limit": 5, "intersect": null, "union": null, "except": null}, "Prediction": "Name, SurfaceArea\n FROM country\n ORDER BY SurfaceArea DESC\n LIMIT 5;"}
{"db_id": "world_1", "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "query_toks": ["SELECT", "Name", "FROM", "country", "ORDER", "BY", "Population", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "name", "from", "country", "order", "by", "population", "desc", "limit", "value"], "question": "What are names of top 3 countries with most people?", "question_toks": ["What", "are", "names", "of", "top", "3", "countries", "with", "most", "people?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 14, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM country ORDER BY Population DESC LIMIT 3;"}
{"db_id": "world_1", "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "query_toks": ["SELECT", "Name", "FROM", "country", "ORDER", "BY", "Population", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "name", "from", "country", "order", "by", "population", "desc", "limit", "value"], "question": "Return the names of the 3 most populated countries.", "question_toks": ["Return", "the", "names", "of", "the", "3", "most", "populated", "countries."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 14, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM country ORDER BY Population DESC LIMIT 3;"}
{"db_id": "world_1", "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "query_toks": ["SELECT", "Name", "FROM", "country", "ORDER", "BY", "Population", "ASC", "LIMIT", "3"], "query_toks_no_value": ["select", "name", "from", "country", "order", "by", "population", "asc", "limit", "value"], "question": "What are the names of the nations with the 3 lowest number of citizens?", "question_toks": ["What", "are", "the", "names", "of", "the", "nations", "with", "the", "3", "lowest", "number", "of", "citizens?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 14, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM country ORDER BY Population ASC LIMIT 3;"}
{"db_id": "world_1", "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "query_toks": ["SELECT", "Name", "FROM", "country", "ORDER", "BY", "Population", "ASC", "LIMIT", "3"], "query_toks_no_value": ["select", "name", "from", "country", "order", "by", "population", "asc", "limit", "value"], "question": "Return the names of the 3 countries with the fewest people.", "question_toks": ["Return", "the", "names", "of", "the", "3", "countries", "with", "the", "fewest", "people."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 14, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM country ORDER BY Population ASC LIMIT 3;"}
{"db_id": "world_1", "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "country", "WHERE", "continent", "=", "``", "Asia", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "country", "where", "continent", "=", "value"], "question": "how many countries are in Asia?", "question_toks": ["how", "many", "countries", "are", "in", "Asia?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM country WHERE Continent = 'Asia';"}
{"db_id": "world_1", "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "country", "WHERE", "continent", "=", "``", "Asia", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "country", "where", "continent", "=", "value"], "question": "Count the number of countries in Asia.", "question_toks": ["Count", "the", "number", "of", "countries", "in", "Asia."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM country WHERE Continent = 'Asia';"}
{"db_id": "world_1", "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "query_toks": ["SELECT", "Name", "FROM", "country", "WHERE", "continent", "=", "``", "Europe", "''", "AND", "Population", "=", "``", "80000", "''"], "query_toks_no_value": ["select", "name", "from", "country", "where", "continent", "=", "value", "and", "population", "=", "value"], "question": "What are the names of the countries that are in Europe and have 80000 people?", "question_toks": ["What", "are", "the", "names", "of", "the", "countries", "that", "are", "in", "Europe", "and", "have", "80000", "people?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Europe\"", null], "and", [false, 2, [0, [0, 14, false], null], "\"80000\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM country WHERE Continent = 'Europe' AND Population = 80000;"}
{"db_id": "world_1", "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "query_toks": ["SELECT", "Name", "FROM", "country", "WHERE", "continent", "=", "``", "Europe", "''", "AND", "Population", "=", "``", "80000", "''"], "query_toks_no_value": ["select", "name", "from", "country", "where", "continent", "=", "value", "and", "population", "=", "value"], "question": "Give the names of countries that are in Europe and have 80000 people.", "question_toks": ["Give", "the", "names", "of", "countries", "that", "are", "in", "Europe", "and", "have", "80000", "people."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Europe\"", null], "and", [false, 2, [0, [0, 14, false], null], "\"80000\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "country.Name FROM country JOIN city ON country.Code=city.CountryCode WHERE country.Continent='Europe' AND city.Population=80000;"}
{"db_id": "world_1", "query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "query_toks": ["select", "sum", "(", "population", ")", ",", "avg", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"north america\"", "and", "surfacearea", ">", "3000"], "query_toks_no_value": ["select", "sum", "(", "population", ")", ",", "avg", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", "and", "surfacearea", ">", "value"], "question": "What is the total population and average area of countries in North America who is bigger than 3000 square miles", "question_toks": ["What", "is", "the", "total", "population", "and", "average", "area", "of", "countries", "in", "North", "America", "who", "is", "bigger", "than", "3000", "square", "miles"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [5, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"north america\"", null], "and", [false, 3, [0, [0, 12, false], null], 3000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;"}
{"db_id": "world_1", "query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "query_toks": ["select", "sum", "(", "population", ")", ",", "avg", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"north america\"", "and", "surfacearea", ">", "3000"], "query_toks_no_value": ["select", "sum", "(", "population", ")", ",", "avg", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", "and", "surfacearea", ">", "value"], "question": "Give the total population and average  corresponding to countries in Noth America that is bigger than 3000 square miles.", "question_toks": ["Give", "the", "total", "population", "and", "average", "corresponding", "to", "countries", "in", "Noth", "America", "that", "is", "bigger", "than", "3000", "square", "miles."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [5, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"north america\"", null], "and", [false, 3, [0, [0, 12, false], null], 3000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "SUM(country.Population), AVG(country.Population) \nFROM country \nWHERE country.Continent = 'North America' AND country.SurfaceArea > 3000;"}
{"db_id": "world_1", "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "query_toks": ["SELECT", "name", "FROM", "city", "WHERE", "Population", "BETWEEN", "160000", "AND", "900000"], "query_toks_no_value": ["select", "name", "from", "city", "where", "population", "between", "value", "and", "value"], "question": "What are the cities who have more than 160000 people and less than 900000 people?", "question_toks": ["What", "are", "the", "cities", "who", "have", "more", "than", "160000", "people", "and", "less", "than", "900000", "people?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 1, [0, [0, 5, false], null], 160000.0, 900000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM city WHERE Population > 160000 AND Population < 900000;"}
{"db_id": "world_1", "query": "select name from city where population between 160000 and 900000", "query_toks": ["select", "name", "from", "city", "where", "population", "between", "160000", "and", "900000"], "query_toks_no_value": ["select", "name", "from", "city", "where", "population", "between", "value", "and", "value"], "question": "Return the names of cities that have between 160000 and 900000 people.", "question_toks": ["Return", "the", "names", "of", "cities", "that", "have", "between", "160000", "and", "900000", "people."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 1, [0, [0, 5, false], null], 160000.0, 900000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM city WHERE Population BETWEEN 160000 AND 900000;"}
{"db_id": "world_1", "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "query_toks": ["SELECT", "LANGUAGE", ",", "CountryCode", ",", "max", "(", "Percentage", ")", "FROM", "countrylanguage", "GROUP", "BY", "CountryCode"], "query_toks_no_value": ["select", "language", ",", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "group", "by", "countrycode"], "question": "What is the language spoken by the largest percentage of people in each nation?", "question_toks": ["What", "is", "the", "language", "spoken", "by", "the", "largest", "percentage", "of", "people", "in", "each", "nation?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 24, false], null]], [0, [0, [0, 23, false], null]], [1, [0, [0, 26, false], null]]]], "where": [], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "country.Name, countrylanguage.Language \n FROM country \n JOIN countrylanguage ON country.Code=countrylanguage.CountryCode \n WHERE countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode=country.Code) \n ORDER BY country.Name ASC;"}
{"db_id": "world_1", "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "query_toks": ["SELECT", "LANGUAGE", ",", "CountryCode", ",", "max", "(", "Percentage", ")", "FROM", "countrylanguage", "GROUP", "BY", "CountryCode"], "query_toks_no_value": ["select", "language", ",", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "group", "by", "countrycode"], "question": "What are the codes of the different nations, and what are the languages spoken by the greatest percentage of people for each?", "question_toks": ["What", "are", "the", "codes", "of", "the", "different", "nations,", "and", "what", "are", "the", "languages", "spoken", "by", "the", "greatest", "percentage", "of", "people", "for", "each?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 24, false], null]], [0, [0, [0, 23, false], null]], [1, [0, [0, 26, false], null]]]], "where": [], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "country.Code, countrylanguage.Language\n FROM country\n JOIN countrylanguage ON country.Code=countrylanguage.CountryCode\n WHERE countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode=country.Code)\n GROUP BY country.Code;"}
{"db_id": "world_1", "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "max", "(", "Percentage", ")", "FROM", "countrylanguage", "WHERE", "LANGUAGE", "=", "``", "Spanish", "''", "GROUP", "BY", "CountryCode"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "value", "group", "by", "countrycode"], "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "question_toks": ["What", "is", "the", "total", "number", "of", "countries", "where", "Spanish", "is", "spoken", "by", "the", "largest", "percentage", "of", "people?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [1, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"Spanish\"", null]], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(DISTINCT countrylanguage.CountryCode) \nFROM countrylanguage \nWHERE Language = 'Spanish' AND Percentage = (\n    SELECT MAX(Percentage) \n    FROM countrylanguage \n    WHERE Language = 'Spanish'\n);"}
{"db_id": "world_1", "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "max", "(", "Percentage", ")", "FROM", "countrylanguage", "WHERE", "LANGUAGE", "=", "``", "Spanish", "''", "GROUP", "BY", "CountryCode"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "value", "group", "by", "countrycode"], "question": "Count the number of countries for which Spanish is predominantly spoken .", "question_toks": ["Count", "the", "number", "of", "countries", "for", "which", "Spanish", "is", "predominantly", "spoken", "."], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [1, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"Spanish\"", null]], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM countrylanguage WHERE Language='Spanish' AND IsOfficial='T' AND Percentage>50;"}
{"db_id": "world_1", "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "query_toks": ["SELECT", "CountryCode", ",", "max", "(", "Percentage", ")", "FROM", "countrylanguage", "WHERE", "LANGUAGE", "=", "``", "Spanish", "''", "GROUP", "BY", "CountryCode"], "query_toks_no_value": ["select", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "value", "group", "by", "countrycode"], "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "question_toks": ["What", "are", "the", "codes", "of", "countries", "where", "Spanish", "is", "spoken", "by", "the", "largest", "percentage", "of", "people?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]], [1, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"Spanish\"", null]], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "country.Code \nFROM country \nJOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE countrylanguage.Language='Spanish' \nORDER BY countrylanguage.Percentage DESC \nLIMIT 1;"}
{"db_id": "world_1", "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "query_toks": ["SELECT", "CountryCode", ",", "max", "(", "Percentage", ")", "FROM", "countrylanguage", "WHERE", "LANGUAGE", "=", "``", "Spanish", "''", "GROUP", "BY", "CountryCode"], "query_toks_no_value": ["select", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "value", "group", "by", "countrycode"], "question": "Return the codes of countries for which Spanish is predominantly spoken .", "question_toks": ["Return", "the", "codes", "of", "countries", "for", "which", "Spanish", "is", "predominantly", "spoken", "."], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]], [1, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"Spanish\"", null]], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "country.Code \n FROM country \n JOIN countrylanguage ON country.Code=countrylanguage.CountryCode \n WHERE countrylanguage.Language='Spanish' AND countrylanguage.IsOfficial='T' AND countrylanguage.Percentage>=50;"}
{"db_id": "orchestra", "query": "SELECT Name FROM conductor ORDER BY Age ASC", "query_toks": ["SELECT", "Name", "FROM", "conductor", "ORDER", "BY", "Age", "ASC"], "query_toks_no_value": ["select", "name", "from", "conductor", "order", "by", "age", "asc"], "question": "List the names of conductors from youngest to oldest.", "question_toks": ["List", "the", "names", "of", "conductors", "from", "youngest", "to", "oldest."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 3, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM conductor ORDER BY Age ASC;"}
{"db_id": "orchestra", "query": "SELECT Name FROM conductor ORDER BY Age ASC", "query_toks": ["SELECT", "Name", "FROM", "conductor", "ORDER", "BY", "Age", "ASC"], "query_toks_no_value": ["select", "name", "from", "conductor", "order", "by", "age", "asc"], "question": "What are the names of conductors, ordered by how old they are?", "question_toks": ["What", "are", "the", "names", "of", "conductors,", "ordered", "by", "how", "old", "they", "are?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 3, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM conductor ORDER BY Age;"}
{"db_id": "orchestra", "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "query_toks": ["SELECT", "Name", "FROM", "conductor", "WHERE", "Nationality", "!", "=", "'USA", "'"], "query_toks_no_value": ["select", "name", "from", "conductor", "where", "nationality", "!", "=", "value"], "question": "What are the names of conductors who are not from \"\"USA\"\"?", "question_toks": ["What", "are", "the", "names", "of", "conductors", "who", "are", "not", "from", "\"\"USA\"\"?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 7, [0, [0, 4, false], null], "\"USA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM conductor WHERE Nationality != \"USA\";"}
{"db_id": "orchestra", "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "query_toks": ["SELECT", "Name", "FROM", "conductor", "WHERE", "Nationality", "!", "=", "'USA", "'"], "query_toks_no_value": ["select", "name", "from", "conductor", "where", "nationality", "!", "=", "value"], "question": "Return the names of non USA conductors.", "question_toks": ["Return", "the", "names", "of", "non", "USA", "conductors."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 7, [0, [0, 4, false], null], "\"USA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM conductor WHERE Nationality != 'USA';"}
{"db_id": "orchestra", "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "query_toks": ["SELECT", "Record_Company", "FROM", "orchestra", "ORDER", "BY", "Year_of_Founded", "DESC"], "query_toks_no_value": ["select", "record_company", "from", "orchestra", "order", "by", "year_of_founded", "desc"], "question": "What are the record companies of orchestras in descending order of time in which they started?", "question_toks": ["What", "are", "the", "record", "companies", "of", "orchestras", "in", "descending", "order", "of", "time", "in", "which", "they", "started?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 10, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "orchestra.Record_Company FROM orchestra ORDER BY orchestra.Year_of_Founded DESC;"}
{"db_id": "orchestra", "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "query_toks": ["SELECT", "Record_Company", "FROM", "orchestra", "ORDER", "BY", "Year_of_Founded", "DESC"], "query_toks_no_value": ["select", "record_company", "from", "orchestra", "order", "by", "year_of_founded", "desc"], "question": "Return the record companies of orchestras, sorted ascending by the time they have existed.", "question_toks": ["Return", "the", "record", "companies", "of", "orchestras,", "sorted", "ascending", "by", "the", "time", "they", "have", "existed."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 10, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Record_Company FROM orchestra ORDER BY Year_of_Founded ASC;"}
{"db_id": "orchestra", "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "orchestra", "WHERE", "Major_Record_Format", "=", "``", "CD", "''", "OR", "Major_Record_Format", "=", "``", "DVD", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "orchestra", "where", "major_record_format", "=", "value", "or", "major_record_format", "=", "value"], "question": "Find the number of orchestras recorded in \"\"\"\"CD\"\"\"\" or \"\"\"\"DVD\"\"\"\".", "question_toks": ["Find", "the", "number", "of", "orchestras", "recorded", "in", "\"\"\"\"CD\"\"\"\"", "or", "\"\"\"\"DVD\"\"\"\"."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"CD\"", null], "or", [false, 2, [0, [0, 11, false], null], "\"DVD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(DISTINCT orchestra.Orchestra_ID) \nFROM orchestra \nINNER JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID \nWHERE orchestra.Major_Record_Format IN ('CD', 'DVD');"}
{"db_id": "network_1", "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "query_toks": ["SELECT", "grade", "FROM", "Highschooler", "WHERE", "name", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "grade", "from", "highschooler", "where", "name", "=", "value"], "question": "What grade is Kyle in?", "question_toks": ["What", "grade", "is", "Kyle", "in?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kyle\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "grade FROM Highschooler WHERE name = 'Kyle';"}
{"db_id": "network_1", "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "query_toks": ["SELECT", "grade", "FROM", "Highschooler", "WHERE", "name", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "grade", "from", "highschooler", "where", "name", "=", "value"], "question": "Return the grade for Kyle.", "question_toks": ["Return", "the", "grade", "for", "Kyle."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kyle\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "grade FROM Highschooler WHERE name = 'Kyle';"}
{"db_id": "network_1", "query": "SELECT name FROM Highschooler WHERE grade  =  10", "query_toks": ["SELECT", "name", "FROM", "Highschooler", "WHERE", "grade", "=", "10"], "query_toks_no_value": ["select", "name", "from", "highschooler", "where", "grade", "=", "value"], "question": "Show the names of all high schoolers in  10.", "question_toks": ["Show", "the", "names", "of", "all", "high", "schoolers", "in", "10."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], 10.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "name FROM Highschooler WHERE grade = 10;"}
{"db_id": "network_1", "query": "SELECT name FROM Highschooler WHERE grade  =  10", "query_toks": ["SELECT", "name", "FROM", "Highschooler", "WHERE", "grade", "=", "10"], "query_toks_no_value": ["select", "name", "from", "highschooler", "where", "grade", "=", "value"], "question": "What are the names of all high schoolers in  10?", "question_toks": ["What", "are", "the", "names", "of", "all", "high", "schoolers", "in", "10?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], 10.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "name FROM Highschooler WHERE grade = 10;"}
{"db_id": "network_1", "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "query_toks": ["SELECT", "ID", "FROM", "Highschooler", "WHERE", "name", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "id", "from", "highschooler", "where", "name", "=", "value"], "question": "Show the ID of Kyle.", "question_toks": ["Show", "the", "ID", "of", "Kyle."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kyle\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "ID FROM Highschooler WHERE name = 'Kyle';"}
{"db_id": "network_1", "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "query_toks": ["SELECT", "ID", "FROM", "Highschooler", "WHERE", "name", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "id", "from", "highschooler", "where", "name", "=", "value"], "question": "What is Kyle's id?", "question_toks": ["What", "is", "Kyle's", "id?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kyle\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "ID FROM Highschooler WHERE name = 'Kyle';"}
{"db_id": "network_1", "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Highschooler", "WHERE", "grade", "=", "9", "OR", "grade", "=", "10"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "highschooler", "where", "grade", "=", "value", "or", "grade", "=", "value"], "question": "How many high schoolers are there in  9 or 10?", "question_toks": ["How", "many", "high", "schoolers", "are", "there", "in", "9", "or", "10?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], 9.0, null], "or", [false, 2, [0, [0, 3, false], null], 10.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM Highschooler WHERE grade IN (9,10);"}
{"db_id": "network_1", "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Highschooler", "WHERE", "grade", "=", "9", "OR", "grade", "=", "10"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "highschooler", "where", "grade", "=", "value", "or", "grade", "=", "value"], "question": "Count the number of high schoolers in grades 9 or 10.", "question_toks": ["Count", "the", "number", "of", "high", "schoolers", "in", "grades", "9", "or", "10."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], 9.0, null], "or", [false, 2, [0, [0, 3, false], null], 10.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM Highschooler WHERE grade IN (9,10);"}
{"db_id": "network_1", "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "query_toks": ["SELECT", "grade", ",", "count", "(", "*", ")", "FROM", "Highschooler", "GROUP", "BY", "grade"], "query_toks_no_value": ["select", "grade", ",", "count", "(", "*", ")", "from", "highschooler", "group", "by", "grade"], "question": "Show the number of high schoolers for each year.", "question_toks": ["Show", "the", "number", "of", "high", "schoolers", "for", "each", "year."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "grade, COUNT(*) FROM Highschooler GROUP BY grade;"}
{"db_id": "network_1", "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "query_toks": ["SELECT", "grade", ",", "count", "(", "*", ")", "FROM", "Highschooler", "GROUP", "BY", "grade"], "query_toks_no_value": ["select", "grade", ",", "count", "(", "*", ")", "from", "highschooler", "group", "by", "grade"], "question": "How many high schoolers are in each year?", "question_toks": ["How", "many", "high", "schoolers", "are", "in", "each", "year?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "grade, COUNT(*) FROM Highschooler GROUP BY grade;"}
{"db_id": "network_1", "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "grade", "FROM", "Highschooler", "GROUP", "BY", "grade", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "grade", "from", "highschooler", "group", "by", "grade", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which year has the most high schoolers?", "question_toks": ["Which", "year", "has", "the", "most", "high", "schoolers?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "grade, COUNT(*) AS num_students\n FROM Highschooler\n GROUP BY grade\n ORDER BY num_students DESC\n LIMIT 1;"}
{"db_id": "network_1", "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "query_toks": ["SELECT", "T3.name", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "JOIN", "Highschooler", "AS", "T3", "ON", "T1.friend_id", "=", "T3.id", "WHERE", "T2.name", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "join", "highschooler", "as", "t3", "on", "t1", ".", "friend_id", "=", "t3", ".", "id", "where", "t2", ".", "name", "=", "value"], "question": "Show the names of all of Kyle's friends.", "question_toks": ["Show", "the", "names", "of", "all", "of", "Kyle's", "friends."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 5, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kyle\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Highschooler.name\nFROM Highschooler\nJOIN Friend ON Friend.friend_id = Highschooler.ID\nWHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');"}
{"db_id": "network_1", "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "query_toks": ["SELECT", "T3.name", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "JOIN", "Highschooler", "AS", "T3", "ON", "T1.friend_id", "=", "T3.id", "WHERE", "T2.name", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "join", "highschooler", "as", "t3", "on", "t1", ".", "friend_id", "=", "t3", ".", "id", "where", "t2", ".", "name", "=", "value"], "question": "Return the names of friends of  Kyle.", "question_toks": ["Return", "the", "names", "of", "friends", "of", "Kyle."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 5, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kyle\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Highschooler.name\nFROM Highschooler\nJOIN Friend ON Friend.friend_id = Highschooler.ID\nWHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');"}
{"db_id": "network_1", "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "WHERE", "T2.name", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "where", "t2", ".", "name", "=", "value"], "question": "How many friends does Kyle have?", "question_toks": ["How", "many", "friends", "does", "Kyle", "have?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kyle\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) \nFROM Friend \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');"}
{"db_id": "network_1", "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "WHERE", "T2.name", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "where", "t2", ".", "name", "=", "value"], "question": "Count the number of friends Kyle has.", "question_toks": ["Count", "the", "number", "of", "friends", "Kyle", "has."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kyle\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');"}
{"db_id": "network_1", "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Likes", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "WHERE", "T2.name", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "where", "t2", ".", "name", "=", "value"], "question": "How many likes does Kyle have?", "question_toks": ["How", "many", "likes", "does", "Kyle", "have?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kyle\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');"}
{"db_id": "network_1", "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Likes", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "WHERE", "T2.name", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "where", "t2", ".", "name", "=", "value"], "question": "Return the number of likes Kyle has.", "question_toks": ["Return", "the", "number", "of", "likes", "Kyle", "has."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kyle\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) \nFROM Likes \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');"}
{"db_id": "network_1", "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "query_toks": ["SELECT", "avg", "(", "grade", ")", "FROM", "Highschooler", "WHERE", "id", "IN", "(", "SELECT", "T1.student_id", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", ")"], "query_toks_no_value": ["select", "avg", "(", "grade", ")", "from", "highschooler", "where", "id", "in", "(", "select", "t1", ".", "student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", ")"], "question": "Find the average grade of all students who have some friends.", "question_toks": ["Find", "the", "average", "grade", "of", "all", "students", "who", "have", "some", "friends."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 3, false], null]]]], "where": [[false, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(Highschooler.grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend);"}
{"db_id": "network_1", "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "query_toks": ["SELECT", "avg", "(", "grade", ")", "FROM", "Highschooler", "WHERE", "id", "IN", "(", "SELECT", "T1.student_id", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", ")"], "query_toks_no_value": ["select", "avg", "(", "grade", ")", "from", "highschooler", "where", "id", "in", "(", "select", "t1", ".", "student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", ")"], "question": "What is the average grade of students who have friends?", "question_toks": ["What", "is", "the", "average", "grade", "of", "students", "who", "have", "friends?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 3, false], null]]]], "where": [[false, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "AVG(Highschooler.grade) FROM Highschooler WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend);"}
{"db_id": "network_1", "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "query_toks": ["SELECT", "min", "(", "grade", ")", "FROM", "Highschooler", "WHERE", "id", "NOT", "IN", "(", "SELECT", "T1.student_id", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", ")"], "query_toks_no_value": ["select", "min", "(", "grade", ")", "from", "highschooler", "where", "id", "not", "in", "(", "select", "t1", ".", "student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", ")"], "question": "Find the minimum grade of students who have no friends.", "question_toks": ["Find", "the", "minimum", "grade", "of", "students", "who", "have", "no", "friends."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[2, [0, [0, 3, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);"}
{"db_id": "network_1", "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "query_toks": ["SELECT", "min", "(", "grade", ")", "FROM", "Highschooler", "WHERE", "id", "NOT", "IN", "(", "SELECT", "T1.student_id", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", ")"], "query_toks_no_value": ["select", "min", "(", "grade", ")", "from", "highschooler", "where", "id", "not", "in", "(", "select", "t1", ".", "student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", ")"], "question": "What is the lowest grade of students who do not have any friends?", "question_toks": ["What", "is", "the", "lowest", "grade", "of", "students", "who", "do", "not", "have", "any", "friends?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[2, [0, [0, 3, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);"}
{"db_id": "dog_kennels", "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "query_toks": ["SELECT", "professional_id", ",", "last_name", ",", "cell_number", "FROM", "Professionals", "WHERE", "state", "=", "'Indiana", "'", "UNION", "SELECT", "T1.professional_id", ",", "T1.last_name", ",", "T1.cell_number", "FROM", "Professionals", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.professional_id", "=", "T2.professional_id", "GROUP", "BY", "T1.professional_id", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "professional_id", ",", "last_name", ",", "cell_number", "from", "professionals", "where", "state", "=", "value", "union", "select", "t1", ".", "professional_id", ",", "t1", ".", "last_name", ",", "t1", ".", "cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "professional_id", "=", "t2", ".", "professional_id", "group", "by", "t1", ".", "professional_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Which professionals live in Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "question_toks": ["Which", "professionals", "live", "in", "Indiana", "or", "have", "done", "treatment", "on", "more", "than", "2", "treatments?", "List", "his", "or", "her", "id,", "last", "name", "and", "cell", "phone."], "sql": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 40, false], null]], [0, [0, [0, 43, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], "\"Indiana\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 40, false], null]], [0, [0, [0, 43, false], null]]]], "where": [], "groupBy": [[0, 33, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "Prediction": "professional_id, last_name, cell_number \n FROM Professionals \n WHERE state = 'Indiana' OR professional_id IN \n (SELECT professional_id FROM Treatments \n GROUP BY professional_id \n HAVING COUNT(*) > 2)"}
{"db_id": "dog_kennels", "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "query_toks": ["SELECT", "professional_id", ",", "last_name", ",", "cell_number", "FROM", "Professionals", "WHERE", "state", "=", "'Indiana", "'", "UNION", "SELECT", "T1.professional_id", ",", "T1.last_name", ",", "T1.cell_number", "FROM", "Professionals", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.professional_id", "=", "T2.professional_id", "GROUP", "BY", "T1.professional_id", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "professional_id", ",", "last_name", ",", "cell_number", "from", "professionals", "where", "state", "=", "value", "union", "select", "t1", ".", "professional_id", ",", "t1", ".", "last_name", ",", "t1", ".", "cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "professional_id", "=", "t2", ".", "professional_id", "group", "by", "t1", ".", "professional_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the id, last name and cell phone of the professionals who live in Indiana or have performed more than two treatments.", "question_toks": ["Find", "the", "id,", "last", "name", "and", "cell", "phone", "of", "the", "professionals", "who", "live", "in", "Indiana", "or", "have", "performed", "more", "than", "two", "treatments."], "sql": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 40, false], null]], [0, [0, [0, 43, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], "\"Indiana\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 40, false], null]], [0, [0, [0, 43, false], null]]]], "where": [], "groupBy": [[0, 33, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "Prediction": "professional_id, last_name, cell_number \n FROM Professionals \n WHERE state = 'Indiana' OR professional_id IN \n (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2);"}
{"db_id": "dog_kennels", "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "query_toks": ["select", "name", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", "group", "by", "dog_id", "having", "sum", "(", "cost_of_treatment", ")", ">", "1000", ")"], "query_toks_no_value": ["select", "name", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", "group", "by", "dog_id", "having", "sum", "(", "cost_of_treatment", ")", ">", "value", ")"], "question": "What are the names of the dogs for which the owner spent more than 1000 for treatment?", "question_toks": ["What", "are", "the", "names", "of", "the", "dogs", "for", "which", "the", "owner", "spent", "more", "than", "1000", "for", "treatment?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [[true, 8, [0, [0, 20, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 45, false], null]]]], "where": [], "groupBy": [[0, 45, false]], "having": [[false, 3, [0, [4, 49, false], null], 1000.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Dogs.name \nFROM Dogs \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nJOIN Owners ON Dogs.owner_id = Owners.owner_id \nWHERE Treatments.cost_of_treatment > 1000;"}
{"db_id": "dog_kennels", "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.owner_id", ",", "T2.first_name", ",", "T2.last_name", "FROM", "Dogs", "AS", "T1", "JOIN", "Owners", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id", "GROUP", "BY", "T1.owner_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "owner_id", ",", "t2", ".", "first_name", ",", "t2", ".", "last_name", "from", "dogs", "as", "t1", "join", "owners", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id", "group", "by", "t1", ".", "owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which person has the most dogs? List the id, first name and last name.", "question_toks": ["Which", "person", "has", "the", "most", "dogs?", "List", "the", "id,", "first", "name", "and", "last", "name."], "sql": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 21, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 21, false], null]], [0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 21, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Owners.owner_id, Owners.first_name, Owners.last_name\n FROM Owners\n JOIN Dogs ON Dogs.owner_id = Owners.owner_id\n GROUP BY Owners.owner_id\n ORDER BY COUNT(Dogs.dog_id) DESC\n LIMIT 1;"}
{"db_id": "dog_kennels", "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.owner_id", ",", "T2.first_name", ",", "T2.last_name", "FROM", "Dogs", "AS", "T1", "JOIN", "Owners", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id", "GROUP", "BY", "T1.owner_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "owner_id", ",", "t2", ".", "first_name", ",", "t2", ".", "last_name", "from", "dogs", "as", "t1", "join", "owners", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id", "group", "by", "t1", ".", "owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the id, first name and last name of the person who has the most dogs.", "question_toks": ["Return", "the", "id,", "first", "name", "and", "last", "name", "of", "the", "person", "who", "has", "the", "most", "dogs."], "sql": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 21, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 21, false], null]], [0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 21, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Owners.owner_id, Owners.first_name, Owners.last_name\nFROM Owners\nWHERE Owners.owner_id = (\n    SELECT Dogs.owner_id\n    FROM Dogs\n    GROUP BY Dogs.owner_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);"}
{"db_id": "dog_kennels", "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.professional_id", ",", "T1.role_code", ",", "T1.first_name", "FROM", "Professionals", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.professional_id", "=", "T2.professional_id", "GROUP", "BY", "T1.professional_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "professional_id", ",", "t1", ".", "role_code", ",", "t1", ".", "first_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "professional_id", "=", "t2", ".", "professional_id", "group", "by", "t1", ".", "professional_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which doctors have done at least two treatments? List theid, role, and first name.", "question_toks": ["Which", "doctors", "have", "done", "at", "least", "two", "treatments?", "List", "theid,", "role,", "and", "first", "name."], "sql": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 34, false], null]], [0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [[0, 33, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Professionals.professional_id, Professionals.role_code, Professionals.first_name\nFROM Professionals\nINNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id\nGROUP BY Professionals.professional_id\nHAVING COUNT(Treatments.treatment_id) >= 2;"}
{"db_id": "dog_kennels", "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.professional_id", ",", "T1.role_code", ",", "T1.first_name", "FROM", "Professionals", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.professional_id", "=", "T2.professional_id", "GROUP", "BY", "T1.professional_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "professional_id", ",", "t1", ".", "role_code", ",", "t1", ".", "first_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "professional_id", "=", "t2", ".", "professional_id", "group", "by", "t1", ".", "professional_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the id, role, and first name of the people who have performed two or more treatments?", "question_toks": ["What", "are", "the", "id,", "role,", "and", "first", "name", "of", "the", "people", "who", "have", "performed", "two", "or", "more", "treatments?"], "sql": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 34, false], null]], [0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [[0, 33, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Professionals.professional_id, Professionals.role_code, Professionals.first_name\nFROM Professionals\nINNER JOIN Treatments ON Treatments.professional_id = Professionals.professional_id\nGROUP BY Professionals.professional_id\nHAVING COUNT(Treatments.treatment_id) >= 2;"}
{"db_id": "dog_kennels", "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "query_toks": ["SELECT", "T1.treatment_type_description", "FROM", "Treatment_types", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.treatment_type_code", "=", "T2.treatment_type_code", "GROUP", "BY", "T1.treatment_type_code", "ORDER", "BY", "sum", "(", "cost_of_treatment", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "treatment_type_description", "from", "treatment_types", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "treatment_type_code", "=", "t2", ".", "treatment_type_code", "group", "by", "t1", ".", "treatment_type_code", "order", "by", "sum", "(", "cost_of_treatment", ")", "asc", "limit", "value"], "question": "What is the description of the treatment type that is the cheapest overall?", "question_toks": ["What", "is", "the", "description", "of", "the", "treatment", "type", "that", "is", "the", "cheapest", "overall?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 47, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": ["asc", [[0, [4, 49, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Treatment_Types.treatment_type_description \nFROM Treatments \nJOIN Treatment_Types ON Treatments.treatment_type_code=Treatment_Types.treatment_type_code \nGROUP BY Treatments.treatment_type_code \nORDER BY SUM(Treatments.cost_of_treatment) ASC \nLIMIT 1;"}
{"db_id": "dog_kennels", "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "query_toks": ["SELECT", "T1.treatment_type_description", "FROM", "Treatment_types", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.treatment_type_code", "=", "T2.treatment_type_code", "GROUP", "BY", "T1.treatment_type_code", "ORDER", "BY", "sum", "(", "cost_of_treatment", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "treatment_type_description", "from", "treatment_types", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "treatment_type_code", "=", "t2", ".", "treatment_type_code", "group", "by", "t1", ".", "treatment_type_code", "order", "by", "sum", "(", "cost_of_treatment", ")", "asc", "limit", "value"], "question": "Give me the description of the treatment type that is least expensive.", "question_toks": ["Give", "me", "the", "description", "of", "the", "treatment", "type", "that", "is", "least", "expensive."], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 47, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": ["asc", [[0, [4, 49, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Treatment_Types.treatment_type_description \nFROM Treatments \nJOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code \nORDER BY Treatments.cost_of_treatment ASC \nLIMIT 1;"}
{"db_id": "dog_kennels", "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "query_toks": ["SELECT", "T1.owner_id", ",", "T1.zip_code", "FROM", "Owners", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id", "JOIN", "Treatments", "AS", "T3", "ON", "T2.dog_id", "=", "T3.dog_id", "GROUP", "BY", "T1.owner_id", "ORDER", "BY", "sum", "(", "T3.cost_of_treatment", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "owner_id", ",", "t1", ".", "zip_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id", "join", "treatments", "as", "t3", "on", "t2", ".", "dog_id", "=", "t3", ".", "dog_id", "group", "by", "t1", ".", "owner_id", "order", "by", "sum", "(", "t3", ".", "cost_of_treatment", ")", "desc", "limit", "value"], "question": "Who has paid the largest amount of money in total for their dogs? Show the id and zip code.", "question_toks": ["Who", "has", "paid", "the", "largest", "amount", "of", "money", "in", "total", "for", "their", "dogs?", "Show", "the", "id", "and", "zip", "code."], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null], "and", [false, 2, [0, [0, 20, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 16, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [4, 49, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Dogs.owner_id, Owners.zip_code\n FROM Dogs\n JOIN Owners ON Dogs.owner_id = Owners.owner_id\n JOIN Charges ON Dogs.dog_id = Charges.dog_id\n GROUP BY Dogs.owner_id\n ORDER BY SUM(Charges.charge_amount) DESC\n LIMIT 1;"}
{"db_id": "dog_kennels", "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "query_toks": ["SELECT", "T1.owner_id", ",", "T1.zip_code", "FROM", "Owners", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id", "JOIN", "Treatments", "AS", "T3", "ON", "T2.dog_id", "=", "T3.dog_id", "GROUP", "BY", "T1.owner_id", "ORDER", "BY", "sum", "(", "T3.cost_of_treatment", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "owner_id", ",", "t1", ".", "zip_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id", "join", "treatments", "as", "t3", "on", "t2", ".", "dog_id", "=", "t3", ".", "dog_id", "group", "by", "t1", ".", "owner_id", "order", "by", "sum", "(", "t3", ".", "cost_of_treatment", ")", "desc", "limit", "value"], "question": "Find the id and zip code of the person who spent the most money in total for his or her dogs.", "question_toks": ["Find", "the", "id", "and", "zip", "code", "of", "the", "person", "who", "spent", "the", "most", "money", "in", "total", "for", "his", "or", "her", "dogs."], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null], "and", [false, 2, [0, [0, 20, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 16, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [4, 49, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Owners.owner_id, Owners.zip_code\n FROM Owners\n JOIN Dogs ON Dogs.owner_id = Owners.owner_id\n JOIN Treatments ON Treatments.dog_id = Dogs.dog_id\n JOIN Charges ON Charges.charge_id = Treatments.treatment_id\n GROUP BY Owners.owner_id\n ORDER BY SUM(Charges.charge_amount) DESC\n LIMIT 1;"}
{"db_id": "dog_kennels", "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "query_toks": ["SELECT", "DISTINCT", "T1.first_name", ",", "T1.last_name", "FROM", "Professionals", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "WHERE", "cost_of_treatment", "<", "(", "SELECT", "avg", "(", "cost_of_treatment", ")", "FROM", "Treatments", ")"], "query_toks_no_value": ["select", "distinct", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "where", "cost_of_treatment", "<", "(", "select", "avg", "(", "cost_of_treatment", ")", "from", "treatments", ")"], "question": "What are the first name and last name of the professionals who have done treatment cheaper than average?", "question_toks": ["What", "are", "the", "first", "name", "and", "last", "name", "of", "the", "professionals", "who", "have", "done", "treatment", "cheaper", "than", "average?"], "sql": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": []}, "select": [true, [[0, [0, [0, 35, false], null]], [0, [0, [0, 40, false], null]]]], "where": [[false, 4, [0, [0, 49, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[5, [0, [0, 49, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Professionals.first_name, Professionals.last_name\nFROM Professionals\nINNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id\nWHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)"}
{"db_id": "dog_kennels", "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "query_toks": ["SELECT", "DISTINCT", "T1.first_name", ",", "T1.last_name", "FROM", "Professionals", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "WHERE", "cost_of_treatment", "<", "(", "SELECT", "avg", "(", "cost_of_treatment", ")", "FROM", "Treatments", ")"], "query_toks_no_value": ["select", "distinct", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "where", "cost_of_treatment", "<", "(", "select", "avg", "(", "cost_of_treatment", ")", "from", "treatments", ")"], "question": "Which professionals have operated a treatment that is less expansive than the average? Give me theor first names and last names.", "question_toks": ["Which", "professionals", "have", "operated", "a", "treatment", "that", "is", "less", "expansive", "than", "the", "average?", "Give", "me", "theor", "first", "names", "and", "last", "names."], "sql": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": []}, "select": [true, [[0, [0, [0, 35, false], null]], [0, [0, [0, 40, false], null]]]], "where": [[false, 4, [0, [0, 49, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[5, [0, [0, 49, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Professionals.first_name, Professionals.last_name\nFROM Professionals\nWHERE Professionals.professional_id IN (\n    SELECT Treatments.professional_id\n    FROM Treatments\n    WHERE Treatments.cost_of_treatment < (\n        SELECT AVG(cost_of_treatment)\n        FROM Treatments\n    )\n);"}
{"db_id": "dog_kennels", "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "query_toks": ["SELECT", "T1.first_name", ",", "T2.name", "FROM", "Owners", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id", "WHERE", "T1.state", "=", "'Virginia", "'"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t2", ".", "name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id", "where", "t1", ".", "state", "=", "value"], "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "question_toks": ["Which", "dogs", "are", "owned", "by", "someone", "who", "lives", "in", "Virginia?", "List", "the", "owner's", "first", "name", "and", "the", "dog's", "name."], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 15, false], null], "\"Virginia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Owners.first_name, Dogs.name\n FROM Dogs\n JOIN Owners ON Dogs.owner_id = Owners.owner_id\n WHERE Owners.state = 'Virginia';"}
{"db_id": "dog_kennels", "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "query_toks": ["SELECT", "T1.first_name", ",", "T2.name", "FROM", "Owners", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id", "WHERE", "T1.state", "=", "'Virginia", "'"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t2", ".", "name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id", "where", "t1", ".", "state", "=", "value"], "question": "Find the first names of owners living in Virginia and the names of dogs they own.", "question_toks": ["Find", "the", "first", "names", "of", "owners", "living", "in", "Virginia", "and", "the", "names", "of", "dogs", "they", "own."], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 15, false], null], "\"Virginia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Owners.first_name, Dogs.name \n FROM Owners \n JOIN Dogs ON Owners.owner_id = Dogs.owner_id \n WHERE Owners.state = 'Virginia';"}
{"db_id": "dog_kennels", "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "query_toks": ["SELECT", "T1.last_name", "FROM", "Owners", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id", "WHERE", "T2.age", "=", "(", "SELECT", "max", "(", "age", ")", "FROM", "Dogs", ")"], "query_toks_no_value": ["select", "t1", ".", "last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id", "where", "t2", ".", "age", "=", "(", "select", "max", "(", "age", ")", "from", "dogs", ")"], "question": "List the last name of the owner owning the youngest dog.", "question_toks": ["List", "the", "last", "name", "of", "the", "owner", "owning", "the", "youngest", "dog."], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 26, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[1, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Owners.last_name\nFROM Dogs\nJOIN Owners ON Dogs.owner_id=Owners.owner_id\nWHERE Dogs.age = (SELECT MIN(age) FROM Dogs)"}
{"db_id": "dog_kennels", "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "query_toks": ["SELECT", "T1.last_name", "FROM", "Owners", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id", "WHERE", "T2.age", "=", "(", "SELECT", "max", "(", "age", ")", "FROM", "Dogs", ")"], "query_toks_no_value": ["select", "t1", ".", "last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id", "where", "t2", ".", "age", "=", "(", "select", "max", "(", "age", ")", "from", "dogs", ")"], "question": "Who owns the youngest dog? Give me his or her last name.", "question_toks": ["Who", "owns", "the", "youngest", "dog?", "Give", "me", "his", "or", "her", "last", "name."], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 26, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[1, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Owners.last_name\nFROM Dogs\nJOIN Owners ON Dogs.owner_id=Owners.owner_id\nWHERE Dogs.age = (SELECT MIN(age) FROM Dogs);"}
{"db_id": "dog_kennels", "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "query_toks": ["SELECT", "email_address", "FROM", "Professionals", "WHERE", "state", "=", "'Hawaii", "'", "OR", "state", "=", "'Wisconsin", "'"], "query_toks_no_value": ["select", "email_address", "from", "professionals", "where", "state", "=", "value", "or", "state", "=", "value"], "question": "List the emails of the professionals who live in Hawaii or Wisconsin.", "question_toks": ["List", "the", "emails", "of", "the", "professionals", "who", "live", "in", "Hawaii", "or", "Wisconsin."], "sql": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 41, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], "\"Hawaii\"", null], "or", [false, 2, [0, [0, 38, false], null], "\"Wisconsin\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "email_address FROM Professionals WHERE state='Hawaii' OR state='Wisconsin';"}
{"db_id": "dog_kennels", "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "query_toks": ["SELECT", "email_address", "FROM", "Professionals", "WHERE", "state", "=", "'Hawaii", "'", "OR", "state", "=", "'Wisconsin", "'"], "query_toks_no_value": ["select", "email_address", "from", "professionals", "where", "state", "=", "value", "or", "state", "=", "value"], "question": "What are the emails of the professionals living in either Hawaii or Wisconsin?", "question_toks": ["What", "are", "the", "emails", "of", "the", "professionals", "living", "in", "either", "Hawaii", "or", "Wisconsin?"], "sql": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 41, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], "\"Hawaii\"", null], "or", [false, 2, [0, [0, 38, false], null], "\"Wisconsin\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "email_address FROM Professionals WHERE state='Hawaii' OR state='Wisconsin';"}
{"db_id": "dog_kennels", "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Dogs", "WHERE", "age", "<", "(", "SELECT", "avg", "(", "age", ")", "FROM", "Dogs", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "dogs", "where", "age", "<", "(", "select", "avg", "(", "age", ")", "from", "dogs", ")"], "question": "How many dogs younger than average?", "question_toks": ["How", "many", "dogs", "younger", "than", "average?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 4, [0, [0, 26, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);"}
{"db_id": "dog_kennels", "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Dogs", "WHERE", "age", "<", "(", "SELECT", "avg", "(", "age", ")", "FROM", "Dogs", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "dogs", "where", "age", "<", "(", "select", "avg", "(", "age", ")", "from", "dogs", ")"], "question": "Count the number of dogs that are younger than the average.", "question_toks": ["Count", "the", "number", "of", "dogs", "that", "are", "younger", "than", "the", "average."], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 4, [0, [0, 26, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);"}
{"db_id": "dog_kennels", "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "query_toks": ["SELECT", "cost_of_treatment", "FROM", "Treatments", "ORDER", "BY", "date_of_treatment", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "cost_of_treatment", "from", "treatments", "order", "by", "date_of_treatment", "desc", "limit", "value"], "question": "How much is the most recent treatment?", "question_toks": ["How", "much", "is", "the", "most", "recent", "treatment?"], "sql": {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 49, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 48, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "MAX(cost_of_treatment) FROM Treatments;"}
{"db_id": "dog_kennels", "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "query_toks": ["SELECT", "cost_of_treatment", "FROM", "Treatments", "ORDER", "BY", "date_of_treatment", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "cost_of_treatment", "from", "treatments", "order", "by", "date_of_treatment", "desc", "limit", "value"], "question": "Show me the price of the most recently performed treatment.", "question_toks": ["Show", "me", "the", "price", "of", "the", "most", "recently", "performed", "treatment."], "sql": {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 49, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 48, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;"}
{"db_id": "dog_kennels", "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "query_toks": ["SELECT", "name", ",", "age", ",", "weight", "FROM", "Dogs", "WHERE", "abandoned_yn", "=", "1"], "query_toks_no_value": ["select", "name", ",", "age", ",", "weight", "from", "dogs", "where", "abandoned_yn", "=", "value"], "question": "List the dog name, age and weight of the dogs who have been abandoned?", "question_toks": ["List", "the", "dog", "name,", "age", "and", "weight", "of", "the", "dogs", "who", "have", "been", "abandoned?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]], [0, [0, [0, 26, false], null]], [0, [0, [0, 29, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], 1.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "name, age, weight FROM Dogs WHERE abandoned_yn = 'Y';"}
{"db_id": "dog_kennels", "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "query_toks": ["SELECT", "name", ",", "age", ",", "weight", "FROM", "Dogs", "WHERE", "abandoned_yn", "=", "1"], "query_toks_no_value": ["select", "name", ",", "age", ",", "weight", "from", "dogs", "where", "abandoned_yn", "=", "value"], "question": "What are the dog name, age and weight of the dogs that were abandoned?", "question_toks": ["What", "are", "the", "dog", "name,", "age", "and", "weight", "of", "the", "dogs", "that", "were", "abandoned?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]], [0, [0, [0, 26, false], null]], [0, [0, [0, 29, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], 1.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "name, age, weight FROM Dogs WHERE abandoned_yn = 'Y';"}
{"db_id": "singer", "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "query_toks": ["SELECT", "Name", "FROM", "singer", "ORDER", "BY", "Net_Worth_Millions", "ASC"], "query_toks_no_value": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "asc"], "question": "List the name of singers in ascending order of wealth.", "question_toks": ["List", "the", "name", "of", "singers", "in", "ascending", "order", "of", "wealth."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 4, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM singer ORDER BY Net_Worth_Millions ASC;"}
{"db_id": "singer", "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "query_toks": ["SELECT", "Name", "FROM", "singer", "ORDER", "BY", "Net_Worth_Millions", "ASC"], "query_toks_no_value": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "asc"], "question": "What are the names of singers ordered by ascending wealth?", "question_toks": ["What", "are", "the", "names", "of", "singers", "ordered", "by", "ascending", "wealth?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 4, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM singer ORDER BY Net_Worth_Millions ASC;"}
{"db_id": "singer", "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "query_toks": ["SELECT", "Name", "FROM", "singer", "WHERE", "Citizenship", "!", "=", "``", "France", "''"], "query_toks_no_value": ["select", "name", "from", "singer", "where", "citizenship", "!", "=", "value"], "question": "List the name of singers whose  is not French.", "question_toks": ["List", "the", "name", "of", "singers", "whose", "is", "not", "French."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 7, [0, [0, 5, false], null], "\"France\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM singer WHERE Citizenship != 'French';"}
{"db_id": "singer", "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "query_toks": ["SELECT", "Name", "FROM", "singer", "WHERE", "Citizenship", "!", "=", "``", "France", "''"], "query_toks_no_value": ["select", "name", "from", "singer", "where", "citizenship", "!", "=", "value"], "question": "What are the names of the singers who are not French?", "question_toks": ["What", "are", "the", "names", "of", "the", "singers", "who", "are", "not", "French?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 7, [0, [0, 5, false], null], "\"France\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM singer WHERE Citizenship != 'French';"}
{"db_id": "singer", "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "query_toks": ["SELECT", "Name", "FROM", "singer", "WHERE", "Birth_Year", "=", "1948", "OR", "Birth_Year", "=", "1949"], "query_toks_no_value": ["select", "name", "from", "singer", "where", "birth_year", "=", "value", "or", "birth_year", "=", "value"], "question": "Show the name of singers who were born either 1948 or 1949?", "question_toks": ["Show", "the", "name", "of", "singers", "who", "were", "born", "either", "1948", "or", "1949?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], 1948.0, null], "or", [false, 2, [0, [0, 3, false], null], 1949.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM singer WHERE Birth_Year IN (1948, 1949);"}
{"db_id": "singer", "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "query_toks": ["SELECT", "Name", "FROM", "singer", "WHERE", "Birth_Year", "=", "1948", "OR", "Birth_Year", "=", "1949"], "query_toks_no_value": ["select", "name", "from", "singer", "where", "birth_year", "=", "value", "or", "birth_year", "=", "value"], "question": "What are the names of the singers who born in either 1948 or 1949?", "question_toks": ["What", "are", "the", "names", "of", "the", "singers", "who", "born", "in", "either", "1948", "or", "1949?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], 1948.0, null], "or", [false, 2, [0, [0, 3, false], null], 1949.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM singer WHERE Birth_Year IN (1948, 1949);"}
{"db_id": "singer", "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "singer", "ORDER", "BY", "Net_Worth_Millions", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "desc", "limit", "value"], "question": "What is the name of the singer with the largest wealth?", "question_toks": ["What", "is", "the", "name", "of", "the", "singer", "with", "the", "largest", "wealth?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 4, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;"}
{"db_id": "singer", "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "query_toks": ["SELECT", "Citizenship", ",", "COUNT", "(", "*", ")", "FROM", "singer", "GROUP", "BY", "Citizenship"], "query_toks_no_value": ["select", "citizenship", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "citizenship"], "question": "Show different nationalities of singers and the number of singers of each.", "question_toks": ["Show", "different", "nationalities", "of", "singers", "and", "the", "number", "of", "singers", "of", "each."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;"}
{"db_id": "singer", "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "query_toks": ["SELECT", "Citizenship", ",", "COUNT", "(", "*", ")", "FROM", "singer", "GROUP", "BY", "Citizenship"], "query_toks_no_value": ["select", "citizenship", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "citizenship"], "question": "how many singers are from each country?", "question_toks": ["how", "many", "singers", "are", "from", "each", "country?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;"}
{"db_id": "singer", "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Citizenship", "FROM", "singer", "GROUP", "BY", "Citizenship", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "citizenship", "from", "singer", "group", "by", "citizenship", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Please show the most common nationality of singers.", "question_toks": ["Please", "show", "the", "most", "common", "nationality", "of", "singers."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Citizenship, COUNT(*) as count\n FROM singer\n GROUP BY Citizenship\n ORDER BY count DESC\n LIMIT 1;"}
{"db_id": "singer", "query": "select citizenship from singer group by citizenship order by count(*) desc limit 1", "query_toks": ["select", "citizenship", "from", "singer", "group", "by", "citizenship", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "query_toks_no_value": ["select", "citizenship", "from", "singer", "group", "by", "citizenship", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the msot common country for singer?", "question_toks": ["What", "is", "the", "msot", "common", "country", "for", "singer?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "Prediction": "Citizenship, COUNT(*) as count FROM singer GROUP BY Citizenship ORDER BY count DESC LIMIT 1;"}
{"db_id": "singer", "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "query_toks": ["SELECT", "Citizenship", ",", "max", "(", "Net_Worth_Millions", ")", "FROM", "singer", "GROUP", "BY", "Citizenship"], "query_toks_no_value": ["select", "citizenship", ",", "max", "(", "net_worth_millions", ")", "from", "singer", "group", "by", "citizenship"], "question": "Show different nationalities and the maximum net worth of singers of country.", "question_toks": ["Show", "different", "nationalities", "and", "the", "maximum", "net", "worth", "of", "singers", "of", "country."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [1, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;"}
{"db_id": "singer", "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "query_toks": ["SELECT", "Citizenship", ",", "max", "(", "Net_Worth_Millions", ")", "FROM", "singer", "GROUP", "BY", "Citizenship"], "query_toks_no_value": ["select", "citizenship", ",", "max", "(", "net_worth_millions", ")", "from", "singer", "group", "by", "citizenship"], "question": "For each country, what is the maximum net worth?", "question_toks": ["For", "each", "country,", "what", "is", "the", "maximum", "net", "worth?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [1, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;"}
{"db_id": "singer", "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "query_toks": ["SELECT", "DISTINCT", "T1.Name", "FROM", "singer", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.Singer_ID", "=", "T2.Singer_ID", "WHERE", "T2.Sales", ">", "300000"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "singer_id", "=", "t2", ".", "singer_id", "where", "t2", ".", "sales", ">", "value"], "question": "Show distinct names of singers that have songs sell  more than 300000.", "question_toks": ["Show", "distinct", "names", "of", "singers", "that", "have", "songs", "sell", "more", "than", "300000."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 9, false], null], 300000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "DISTINCT singer.Name \nFROM singer \nJOIN song ON singer.Singer_ID = song.Singer_ID \nWHERE song.Sales > 300000;"}
{"db_id": "singer", "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "query_toks": ["SELECT", "DISTINCT", "T1.Name", "FROM", "singer", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.Singer_ID", "=", "T2.Singer_ID", "WHERE", "T2.Sales", ">", "300000"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "singer_id", "=", "t2", ".", "singer_id", "where", "t2", ".", "sales", ">", "value"], "question": "what are the different names of the singers that have  sold than 300000 copies?", "question_toks": ["what", "are", "the", "different", "names", "of", "the", "singers", "that", "have", "sold", "than", "300000", "copies?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 9, false], null], 300000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "Prediction": "singer.Name FROM singer JOIN song ON singer.Singer_ID=song.Singer_ID WHERE song.Sales > 300000;"}
{"db_id": "singer", "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "query_toks": ["SELECT", "Citizenship", "FROM", "singer", "WHERE", "Birth_Year", "<", "1945", "INTERSECT", "SELECT", "Citizenship", "FROM", "singer", "WHERE", "Birth_Year", ">", "1955"], "query_toks_no_value": ["select", "citizenship", "from", "singer", "where", "birth_year", "<", "value", "intersect", "select", "citizenship", "from", "singer", "where", "birth_year", ">", "value"], "question": "Show the citizenship shared by singers born  before 1945 and after 1955.", "question_toks": ["Show", "the", "citizenship", "shared", "by", "singers", "born", "before", "1945", "and", "after", "1955."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 4, [0, [0, 3, false], null], 1945.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 3, [0, [0, 3, false], null], 1955.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "Citizenship \nFROM singer \nWHERE Birth_Year < 1945 OR Birth_Year > 1955;"}
{"db_id": "singer", "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "query_toks": ["SELECT", "Citizenship", "FROM", "singer", "WHERE", "Birth_Year", "<", "1945", "INTERSECT", "SELECT", "Citizenship", "FROM", "singer", "WHERE", "Birth_Year", ">", "1955"], "query_toks_no_value": ["select", "citizenship", "from", "singer", "where", "birth_year", "<", "value", "intersect", "select", "citizenship", "from", "singer", "where", "birth_year", ">", "value"], "question": "What are the citizenships that are shared by singers born  before 1945 and after 1955?", "question_toks": ["What", "are", "the", "citizenships", "that", "are", "shared", "by", "singers", "born", "before", "1945", "and", "after", "1955?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 4, [0, [0, 3, false], null], 1945.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 3, [0, [0, 3, false], null], 1955.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "Prediction": "DISTINCT Citizenship \nFROM singer \nWHERE Birth_Year < 1945 AND Birth_Year > 1955;"}
{"db_id": "real_estate_properties", "query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "query_toks": ["SELECT", "property_name", "FROM", "Properties", "WHERE", "property_type_code", "=", "``", "House", "''", "UNION", "SELECT", "property_name", "FROM", "Properties", "WHERE", "property_type_code", "=", "``", "Apartment", "''", "AND", "room_count", ">", "1"], "query_toks_no_value": ["select", "property_name", "from", "properties", "where", "property_type_code", "=", "value", "union", "select", "property_name", "from", "properties", "where", "property_type_code", "=", "value", "and", "room_count", ">", "value"], "question": "What are the names of properties that are either houses or apartments with more than 1 room?", "question_toks": ["What", "are", "the", "names", "of", "properties", "that", "are", "either", "houses", "or", "apartments", "with", "more", "than", "1", "room?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"House\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Apartment\"", null], "and", [false, 3, [0, [0, 15, false], null], 1.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "Prediction": "Properties.property_name \nFROM Properties \nINNER JOIN Ref_Property_Types \nON Properties.property_type_code=Ref_Property_Types.property_type_code \nWHERE (Ref_Property_Types.property_type_description='house' OR Ref_Property_Types.property_type_description='apartment') \nAND Properties.room_count>1;"}
