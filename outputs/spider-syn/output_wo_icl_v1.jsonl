{"db_id": "concert_singer", "SpiderQuestion": "How many singers do we have?", "SpiderSynQuestion": "How many vocalists do we have?", "query": "SELECT count(*) FROM singer", "Prediction": "COUNT(*) FROM singer WHERE Is_male = 0;"}
{"db_id": "concert_singer", "SpiderQuestion": "What is the total number of singers?", "SpiderSynQuestion": "What is the total number of musicians?", "query": "SELECT count(*) FROM singer", "Prediction": "COUNT(*) FROM singer;"}
{"db_id": "concert_singer", "SpiderQuestion": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "SpiderSynQuestion": "Show name, nationality, age for all vocalists ordered by age from the oldest to the youngest.", "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "Prediction": "Name, Country, Age \n FROM singer \n WHERE Is_male = 0 \n ORDER BY Age DESC;"}
{"db_id": "concert_singer", "SpiderQuestion": "What are the names, countries, and ages for every singer in descending order of age?", "SpiderSynQuestion": "What are the names, nationalities, and ages for every musicians in descending order of age?", "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "Prediction": "Name, Country, Age FROM singer ORDER BY Age DESC;"}
{"db_id": "concert_singer", "SpiderQuestion": "What is the average, minimum, and maximum age of all singers from France?", "SpiderSynQuestion": "What is the average, minimum, and maximum age of all vocalists from France?", "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "Prediction": "AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country='France' AND Is_male=0;"}
{"db_id": "concert_singer", "SpiderQuestion": "What is the average, minimum, and maximum age for all French singers?", "SpiderSynQuestion": "What is the average, minimum, and maximum age for all French musicians?", "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "Prediction": "AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country='France'"}
{"db_id": "concert_singer", "SpiderQuestion": "Show the name and the release year of the song by the youngest singer.", "SpiderSynQuestion": "Show the name and the publish year of the song by the youngest vocalists.", "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "Prediction": "Song_Name, Song_release_year \n FROM singer \n WHERE Is_male = 0 \n ORDER BY Age ASC \n LIMIT 1;"}
{"db_id": "concert_singer", "SpiderQuestion": "What are the names and release years for all the songs of the youngest singer?", "SpiderSynQuestion": "What are the names and publish years for all the songs of the youngest musicians?", "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "Prediction": "Song_Name, Song_release_year \n FROM singer \n WHERE Age = (SELECT MIN(Age) FROM singer);"}
{"db_id": "concert_singer", "SpiderQuestion": "What are all distinct countries where singers above age 20 are from?", "SpiderSynQuestion": "What are all distinct nationalities where vocalists above age 20 are from?", "query": "SELECT DISTINCT country FROM singer WHERE age  >  20", "Prediction": "DISTINCT Country FROM singer WHERE Age > 20 AND Is_male = 0;"}
{"db_id": "concert_singer", "SpiderQuestion": "What are  the different countries with singers above age 20?", "SpiderSynQuestion": "What are the different nationalities with musicians above age 20?", "query": "SELECT DISTINCT country FROM singer WHERE age  >  20", "Prediction": "DISTINCT Country FROM singer WHERE Age > 20;"}
{"db_id": "concert_singer", "SpiderQuestion": "Show all countries and the number of singers in each country.", "SpiderSynQuestion": "Show all State and the number of vocalists in each country.", "query": "SELECT country ,  count(*) FROM singer GROUP BY country", "Prediction": "Country, COUNT(DISTINCT Singer_ID) AS Num_of_vocalists\n FROM singer\n GROUP BY Country;"}
{"db_id": "concert_singer", "SpiderQuestion": "How many singers are from each country?", "SpiderSynQuestion": "How many musicians are from each State?", "query": "SELECT country ,  count(*) FROM singer GROUP BY country", "Prediction": "Country, COUNT(*) FROM singer GROUP BY Country;"}
{"db_id": "concert_singer", "SpiderQuestion": "List all song names by singers above the average age.", "SpiderSynQuestion": "List all music titles by vocalists above the average age.", "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "Prediction": "singer.Song_Name \nFROM singer \nWHERE singer.Age > (SELECT AVG(Age) FROM singer) AND singer.Is_male = 0;"}
{"db_id": "concert_singer", "SpiderQuestion": "What are all the song names by singers who are older than average?", "SpiderSynQuestion": "What are all the music titles by musicians who are older than average?", "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "Prediction": "Song_Name \nFROM singer \nWHERE Age > (SELECT AVG(Age) FROM singer);"}
{"db_id": "concert_singer", "SpiderQuestion": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "SpiderSynQuestion": "Show position and name for all stadiums with number of seats between 5000 and 10000.", "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "Prediction": "Position, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;"}
{"db_id": "concert_singer", "SpiderQuestion": "What are the locations and names of all stations with capacity between 5000 and 10000?", "SpiderSynQuestion": "What are the addresses and names of all stations with number of seats between 5000 and 10000?", "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "Prediction": "Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;"}
{"db_id": "concert_singer", "SpiderQuestion": "What is the average and the maximum capacity of all stadiums?", "SpiderSynQuestion": "What is the average and the maximum seats of all stadiums?", "query": "SELECT avg(capacity) ,  max(capacity) FROM stadium", "Prediction": "AVG(Capacity), MAX(Capacity) FROM stadium;"}
{"db_id": "concert_singer", "SpiderQuestion": "What is the average and maximum capacities for all stations?", "SpiderSynQuestion": "What is the average and maximum seats for all stations?", "query": "SELECT avg(capacity) ,  max(capacity) FROM stadium", "Prediction": "AVG(Capacity), MAX(Capacity) FROM stadium;"}
{"db_id": "concert_singer", "SpiderQuestion": "What is the name and capacity for the stadium with highest average attendance?", "SpiderSynQuestion": "What is the name and number of seats for the stadium with highest average attendance?", "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "Prediction": "Name, Capacity \n FROM stadium \n WHERE Average = (SELECT MAX(Average) FROM stadium);"}
{"db_id": "concert_singer", "SpiderQuestion": "What is the name and capacity for the stadium with the highest average attendance?", "SpiderSynQuestion": "What is the name and number of seats for the stadium with the highest average attendance?", "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "Prediction": "Name, Capacity \n FROM stadium \n WHERE Average = (SELECT MAX(Average) FROM stadium);"}
{"db_id": "concert_singer", "SpiderQuestion": "How many concerts are there in year 2014 or 2015?", "SpiderSynQuestion": "How many shows are there in year 2014 or 2015?", "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "Prediction": "COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015;"}
{"db_id": "concert_singer", "SpiderQuestion": "How many concerts occurred in 2014 or 2015?", "SpiderSynQuestion": "How many shows occurred in 2014 or 2015?", "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "Prediction": "COUNT(*) FROM concert WHERE Year IN (2014, 2015);"}
{"db_id": "concert_singer", "SpiderQuestion": "Show the stadium name and the number of concerts in each stadium.", "SpiderSynQuestion": "Show the stadium name and the number of shows in each stadium.", "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "Prediction": "stadium.Name, COUNT(concert.concert_ID)\n FROM stadium\n JOIN concert ON concert.Stadium_ID=stadium.Stadium_ID\n GROUP BY stadium.Name;"}
{"db_id": "concert_singer", "SpiderQuestion": "For each stadium, how many concerts play there?", "SpiderSynQuestion": "For each stadium, how many shows play there?", "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "Prediction": "stadium.Name, COUNT(concert.concert_ID) \n FROM stadium \n LEFT JOIN concert ON stadium.Stadium_ID=concert.Stadium_ID \n GROUP BY stadium.Name;"}
{"db_id": "concert_singer", "SpiderQuestion": "Show the stadium name and capacity with most number of concerts in year 2014 or after.", "SpiderSynQuestion": "Show the stadium name and number of seats with most number of shows in year 2014 or after.", "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "stadium.Name, stadium.Capacity\n FROM stadium\n JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID\n WHERE concert.Year >= 2014\n GROUP BY stadium.Name\n ORDER BY COUNT(concert.concert_ID) DESC\n LIMIT 1;"}
{"db_id": "concert_singer", "SpiderQuestion": "What is the name and capacity of the stadium  with the most concerts after 2013?", "SpiderSynQuestion": "What is the name and number of seats of the stadium with the most shows after 2013?", "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "stadium.Name, stadium.Capacity\n FROM stadium\n JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID\n WHERE concert.Year > 2013\n GROUP BY stadium.Stadium_ID\n ORDER BY COUNT(concert.concert_ID) DESC\n LIMIT 1;"}
{"db_id": "concert_singer", "SpiderQuestion": "Which year has most number of concerts?", "SpiderSynQuestion": "Which year has most number of shows?", "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "Prediction": "Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;"}
{"db_id": "concert_singer", "SpiderQuestion": "What is the year that had the most concerts?", "SpiderSynQuestion": "What is the time that had the most shows?", "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "Prediction": "strftime('%H:%M', concert.Year) AS Time, COUNT(*) AS Num_Shows\n FROM concert\n GROUP BY Time\n ORDER BY Num_Shows DESC\n LIMIT 1;"}
{"db_id": "concert_singer", "SpiderQuestion": "Show the stadium names without any concert.", "SpiderSynQuestion": "Show the stadium names without any shows.", "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "Prediction": "stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID=concert.Stadium_ID WHERE concert_ID IS NULL;"}
{"db_id": "concert_singer", "SpiderQuestion": "What are the names of the stadiums without any concerts?", "SpiderSynQuestion": "What are the names of the stadiums without any shows?", "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "Prediction": "stadium.Name \nFROM stadium \nLEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nWHERE concert.Stadium_ID IS NULL;"}
{"db_id": "concert_singer", "SpiderQuestion": "Show countries where a singer above age 40 and a singer below 30 are from.", "SpiderSynQuestion": "Show States where a singer above age 40 and a singer below 30 are from.", "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "Prediction": "singer.Country \n FROM singer \n WHERE singer.Age > 40 \n AND EXISTS (SELECT * FROM singer WHERE singer.Age < 30)"}
{"db_id": "concert_singer", "SpiderQuestion": "Show names for all stadiums except for stadiums having a concert in year 2014.", "SpiderSynQuestion": "Show names for all stadiums except for stadiums having a shows in year 2014.", "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "Prediction": "stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert WHERE concert.Year=2014);"}
{"db_id": "concert_singer", "SpiderQuestion": "What are the names of all stadiums that did not have a concert in 2014?", "SpiderSynQuestion": "What are the names of all stadiums that did not have a shows in 2014?", "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "Prediction": "stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID=concert.Stadium_ID WHERE concert.Year!=2014 OR concert.Year IS NULL;"}
{"db_id": "concert_singer", "SpiderQuestion": "Show the name and theme for all concerts and the number of singers in each concert.", "SpiderSynQuestion": "Show the name and theme for all shows and the number of vocalists in each shows.", "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id", "Prediction": "concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS num_vocalists\n FROM concert\n JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID\n GROUP BY concert.concert_ID;"}
{"db_id": "concert_singer", "SpiderQuestion": "What are the names, themes, and number of singers for each and every concert?", "SpiderSynQuestion": "What are the names, themes, and number of singers for each and every show?", "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id", "Prediction": "concert_Name, Theme, COUNT(singer_in_concert.Singer_ID) AS num_singers\n FROM concert\n JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID\n GROUP BY concert.concert_ID;"}
{"db_id": "concert_singer", "SpiderQuestion": "List singer names and number of concerts for each singer.", "SpiderSynQuestion": "List singer names and number of shows for each musicians.", "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "Prediction": "singer.Name, COUNT(singer_in_concert.concert_ID) \n FROM singer \n JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \n GROUP BY singer.Name;"}
{"db_id": "concert_singer", "SpiderQuestion": "What are the names of the singers and number of concerts for each person?", "SpiderSynQuestion": "What are the names of the singers and number of shows for each person?", "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "Prediction": "singer.Name, COUNT(singer_in_concert.concert_ID) \n FROM singer \n JOIN singer_in_concert ON singer.Singer_ID=singer_in_concert.Singer_ID \n GROUP BY singer.Name;"}
{"db_id": "concert_singer", "SpiderQuestion": "List all singer names in concerts in year 2014.", "SpiderSynQuestion": "List all vocalist names in shows in year 2014.", "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "Prediction": "singer.Name \nFROM singer \nJOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nJOIN concert ON singer_in_concert.concert_ID = concert.concert_ID \nWHERE concert.Year = 2014 AND singer.Is_male = 0;"}
{"db_id": "concert_singer", "SpiderQuestion": "What are the names of the singers who performed in a concert in 2014?", "SpiderSynQuestion": "What are the names of the musicians who performed in a musical performance in 2014?", "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "Prediction": "singer.Name \nFROM singer \nJOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nJOIN concert ON singer_in_concert.concert_ID = concert.concert_ID \nWHERE concert.Year = 2014;"}
{"db_id": "concert_singer", "SpiderQuestion": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "SpiderSynQuestion": "what is the name and nation of the vocalist who have a song having 'Hey' in its title?", "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "Prediction": "singer.Name, singer.Country\n FROM singer\n WHERE singer.Song_Name LIKE '%Hey%';"}
{"db_id": "concert_singer", "SpiderQuestion": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "SpiderSynQuestion": "What is the name and nationality of origin of every musicians who has a song with the word 'Hey' in its title?", "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "Prediction": "Name, Country \n FROM singer \n WHERE Song_Name LIKE '%Hey%';"}
{"db_id": "concert_singer", "SpiderQuestion": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.", "SpiderSynQuestion": "Find the name and position of the stadiums which some musical performances happened in the years of both 2014 and 2015.", "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "Prediction": "stadium.Name, stadium.Location\n FROM concert\n JOIN stadium ON concert.Stadium_ID=stadium.Stadium_ID\n WHERE concert.Year=2014 AND stadium.Stadium_ID IN \n (SELECT concert.Stadium_ID FROM concert WHERE concert.Year=2015)"}
{"db_id": "concert_singer", "SpiderQuestion": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "SpiderSynQuestion": "What are the names and addresses of the stadiums that had musical performances that occurred in both 2014 and 2015?", "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "Prediction": "stadium.Name, stadium.Location\n FROM stadium\n WHERE stadium.Stadium_ID IN (\n SELECT concert.Stadium_ID\n FROM concert\n WHERE concert.Year = 2014\n INTERSECT\n SELECT concert.Stadium_ID\n FROM concert\n WHERE concert.Year = 2015\n );"}
{"db_id": "concert_singer", "SpiderQuestion": "Find the number of concerts happened in the stadium with the highest capacity.", "SpiderSynQuestion": "Find the number of musical performances happened in the stadium with the highest number of seats.", "query": "SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.Capacity DESC LIMIT 1", "Prediction": "COUNT(*) \nFROM concert \nJOIN stadium ON concert.Stadium_ID=stadium.Stadium_ID \nWHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium);"}
{"db_id": "concert_singer", "SpiderQuestion": "What are the number of concerts that occurred in the stadium with the largest capacity?", "SpiderSynQuestion": "What are the number of musical performances that occurred in the stadium with the largest number of seats?", "query": "SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.Capacity DESC LIMIT 1", "Prediction": "COUNT(*) \nFROM concert \nJOIN stadium ON concert.Stadium_ID=stadium.Stadium_ID \nWHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium);"}
{"db_id": "pets_1", "SpiderQuestion": "Find the number of pets whose weight is heavier than 10.", "SpiderSynQuestion": "Find the number of animals who is heavier than 10.", "query": "SELECT count(*) FROM pets WHERE weight  >  10", "Prediction": "COUNT(*) FROM Pets WHERE weight > 10;"}
{"db_id": "pets_1", "SpiderQuestion": "How many pets have a greater weight than 10?", "SpiderSynQuestion": "How many animals heavier than 10?", "query": "SELECT count(*) FROM pets WHERE weight  >  10", "Prediction": "COUNT(*) FROM Pets WHERE weight > 10;"}
{"db_id": "pets_1", "SpiderQuestion": "Find the weight of the youngest dog.", "SpiderSynQuestion": "Find the weight of the youngest puppy.", "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "Prediction": "MIN(weight) FROM Pets WHERE PetType='puppy' AND pet_age=(SELECT MIN(pet_age) FROM Pets WHERE PetType='puppy');"}
{"db_id": "pets_1", "SpiderQuestion": "How much does the youngest dog weigh?", "SpiderSynQuestion": "How much does the youngest puppy weigh?", "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "Prediction": "MIN(weight) FROM Pets WHERE PetType='puppy' AND pet_age=(SELECT MIN(pet_age) FROM Pets WHERE PetType='puppy');"}
{"db_id": "pets_1", "SpiderQuestion": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "SpiderSynQuestion": "Find the maximum weight for each category of pet. List the maximum weight and pet category.", "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "Prediction": "Pets.PetType, MAX(Pets.weight) \n FROM Pets \n GROUP BY Pets.PetType;"}
{"db_id": "pets_1", "SpiderQuestion": "List the maximum weight and type for each type of pet.", "SpiderSynQuestion": "List the maximum weight and category for each species of domestic animals.", "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "Prediction": "Pets.PetType, MAX(Pets.weight) \n FROM Pets \n WHERE Pets.PetType IN ('cat', 'dog', 'rabbit') \n GROUP BY Pets.PetType;"}
{"db_id": "pets_1", "SpiderQuestion": "Find number of pets owned by students who are older than 20.", "SpiderSynQuestion": "Find number of animals owned by students who are older than 20.", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "Prediction": "COUNT(*) \nFROM Has_Pet \nJOIN Student ON Has_Pet.StuID = Student.StuID \nWHERE Student.Age > 20;"}
{"db_id": "pets_1", "SpiderQuestion": "How many pets are owned by students that have an age greater than 20?", "SpiderSynQuestion": "How many animals are owned by students that have an age greater than 20?", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "Prediction": "COUNT(PetID) FROM Has_Pet \nWHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20)"}
{"db_id": "pets_1", "SpiderQuestion": "Find the number of dog pets that are raised by female students (with sex F).", "SpiderSynQuestion": "Find the number of puppies that are raised by female students (with gender F).", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "Prediction": "COUNT(*) \nFROM Has_Pet \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nJOIN Student ON Has_Pet.StuID = Student.StuID \nWHERE Pets.PetType = 'puppy' AND Student.Sex = 'F';"}
{"db_id": "pets_1", "SpiderQuestion": "How many dog pets are raised by female students?", "SpiderSynQuestion": "How many puppies are raised by female students?", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "Prediction": "COUNT(*) \nFROM Has_Pet \nJOIN Student ON Has_Pet.StuID = Student.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.Sex = 'F' AND Pets.PetType = 'puppy'"}
{"db_id": "pets_1", "SpiderQuestion": "Find the number of distinct type of pets.", "SpiderSynQuestion": "Find the number of distinct species of domestic animals.", "query": "SELECT count(DISTINCT pettype) FROM pets", "Prediction": "COUNT(DISTINCT PetType) FROM Pets WHERE PetType IN ('cat', 'dog', 'rabbit', 'hamster', 'guinea pig', 'bird');"}
{"db_id": "pets_1", "SpiderQuestion": "How many different types of pet are there?", "SpiderSynQuestion": "How many different species of animals are there?", "query": "SELECT count(DISTINCT pettype) FROM pets", "Prediction": "COUNT(DISTINCT PetType) FROM Pets;"}
{"db_id": "pets_1", "SpiderQuestion": "Find the first name of students who have cat or dog pet.", "SpiderSynQuestion": "Find the given name of students who have kitten or puppy pet.", "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "Prediction": "Student.Fname \nFROM Student \nJOIN Has_Pet ON Student.StuID=Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID=Pets.PetID \nWHERE Pets.PetType IN ('kitten', 'puppy')"}
{"db_id": "pets_1", "SpiderQuestion": "What are the first names of every student who has a cat or dog as a pet?", "SpiderSynQuestion": "What are the given names of every student who has a kitten or puppy as a pet?", "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "Prediction": "Student.Fname \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType IN ('kitten', 'puppy')"}
{"db_id": "pets_1", "SpiderQuestion": "Find the name of students who have both cat and dog pets.", "SpiderSynQuestion": "Find the name of students who have both kitten and puppy pets.", "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "Prediction": "Student.Fname, Student.LName\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'kitten' AND Student.StuID IN (\n  SELECT Has_Pet.StuID\n  FROM Has_Pet\n  JOIN Pets ON Has_Pet.PetID = Pets.PetID\n  WHERE Pets.PetType = 'puppy'\n);"}
{"db_id": "pets_1", "SpiderQuestion": "What are the students' first names who have both cats and dogs as pets?", "SpiderSynQuestion": "What are the students' given names who have both kittens and puppies as pets?", "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "Prediction": "Student.Fname \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'kitten' AND Student.StuID IN \n(SELECT Has_Pet.StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'puppy');"}
{"db_id": "pets_1", "SpiderQuestion": "Find the major and age of students who do not have a cat pet.", "SpiderSynQuestion": "Find the major and age of students who do not have a kitten pet.", "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "Prediction": "Student.Major, Student.Age\n FROM Student\n WHERE Student.StuID NOT IN (\n     SELECT Has_Pet.StuID\n     FROM Has_Pet\n     JOIN Pets ON Has_Pet.PetID = Pets.PetID\n     WHERE Pets.PetType = 'kitten'\n );"}
{"db_id": "pets_1", "SpiderQuestion": "What major is every student who does not own a cat as a pet, and also how old are they?", "SpiderSynQuestion": "What discipline is every student who does not own a kitten as a pet, and also how old are they?", "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "Prediction": "Student.Major, Student.Age\n FROM Student\n WHERE Student.StuID NOT IN (\n     SELECT Has_Pet.StuID\n     FROM Has_Pet\n     JOIN Pets ON Has_Pet.PetID = Pets.PetID\n     WHERE Pets.PetType = 'kitten'\n )"}
{"db_id": "pets_1", "SpiderQuestion": "Find the id of students who do not have a cat pet.", "SpiderSynQuestion": "Find the id of students who do not have a kitten pet.", "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "Prediction": "Student.StuID \nFROM Student \nWHERE Student.StuID NOT IN \n(SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID=Pets.PetID WHERE Pets.PetType='kitten');"}
{"db_id": "pets_1", "SpiderQuestion": "What are the ids of the students who do not own cats as pets?", "SpiderSynQuestion": "What are the ids of the students who do not own kittens as pets?", "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "Prediction": "Has_Pet.StuID\nFROM Has_Pet\nWHERE Has_Pet.PetID NOT IN (SELECT PetID FROM Pets WHERE PetType = 'kitten');"}
{"db_id": "pets_1", "SpiderQuestion": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "SpiderSynQuestion": "Find the given name and age of students who have a puppy but do not have a cat as a pet.", "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "Prediction": "Student.Fname, Student.LName, Student.Age\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'puppy'\nAND Student.StuID NOT IN (\n    SELECT Student.StuID\n    FROM Student\n    JOIN Has_Pet ON Student.StuID = Has_Pet.StuID\n    JOIN Pets ON Has_Pet.PetID = Pets.PetID\n    WHERE Pets.PetType = 'cat'\n)"}
{"db_id": "pets_1", "SpiderQuestion": "What is the first name of every student who has a dog but does not have a cat?", "SpiderSynQuestion": "What is the given name of every student who has a dog but does not have a kitten?", "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "Prediction": "Student.Fname \nFROM Student \nJOIN Has_Pet ON Student.StuID=Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID=Pets.PetID \nWHERE Pets.PetType='dog' AND Student.StuID NOT IN \n(SELECT Student.StuID FROM Student \nJOIN Has_Pet ON Student.StuID=Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID=Pets.PetID \nWHERE Pets.PetType='kitten')"}
{"db_id": "pets_1", "SpiderQuestion": "Find the type and weight of the youngest pet.", "SpiderSynQuestion": "Find the category and weight of the youngest pet.", "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "Prediction": "Pets.PetType, Pets.weight \n FROM Pets \n WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets);"}
{"db_id": "pets_1", "SpiderQuestion": "What type of pet is the youngest animal, and how much does it weigh?", "SpiderSynQuestion": "What species of animal is the youngest animal, and how much does it weigh?", "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "Prediction": "PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);"}
{"db_id": "pets_1", "SpiderQuestion": "Find the id and weight of all pets whose age is older than 1.", "SpiderSynQuestion": "Find the id and weight of all animals whose age is older than 1.", "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "Prediction": "Pets.PetID, Pets.weight \n FROM Pets \n WHERE Pets.pet_age > 1;"}
{"db_id": "pets_1", "SpiderQuestion": "What is the id and weight of every pet who is older than 1?", "SpiderSynQuestion": "What is the id and weight of every animals who is older than 1?", "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "Prediction": "Pets.PetID, Pets.weight \n FROM Pets \n JOIN Has_Pet ON Has_Pet.PetID = Pets.PetID \n WHERE Pets.pet_age > 1;"}
{"db_id": "pets_1", "SpiderQuestion": "Find the average and maximum age for each type of pet.", "SpiderSynQuestion": "Find the average and maximum age for each species of animal.", "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "Prediction": "Pets.PetType, AVG(Pets.pet_age), MAX(Pets.pet_age)\n FROM Has_Pet\n JOIN Pets ON Has_Pet.PetID=Pets.PetID\n GROUP BY Pets.PetType;"}
{"db_id": "pets_1", "SpiderQuestion": "What is the average and maximum age for each pet type?", "SpiderSynQuestion": "What is the average and maximum age for each pet species?", "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "Prediction": "Pets.PetType, AVG(Pets.pet_age), MAX(Pets.pet_age)\n FROM Has_Pet\n JOIN Pets ON Has_Pet.PetID=Pets.PetID\n GROUP BY Pets.PetType;"}
{"db_id": "pets_1", "SpiderQuestion": "Find the average weight for each pet type.", "SpiderSynQuestion": "Find the average weight for each pet category.", "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "Prediction": "Pets.PetType, AVG(Pets.weight) \n FROM Has_Pet \n JOIN Pets ON Has_Pet.PetID=Pets.PetID \n GROUP BY Pets.PetType;"}
{"db_id": "pets_1", "SpiderQuestion": "What is the average weight for each type of pet?", "SpiderSynQuestion": "What is the average weight for each species of pet?", "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "Prediction": "Pets.PetType, AVG(Pets.weight) \n FROM Has_Pet \n JOIN Pets ON Has_Pet.PetID=Pets.PetID \n GROUP BY Pets.PetType;"}
{"db_id": "pets_1", "SpiderQuestion": "Find the first name and age of students who have a pet.", "SpiderSynQuestion": "Find the given name and age of students who have a pet.", "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "Prediction": "Student.Fname, Student.Age\n FROM Student\n JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;"}
{"db_id": "pets_1", "SpiderQuestion": "What are the different first names and ages of the students who do have pets?", "SpiderSynQuestion": "What are the different given names and ages of the students who do have pets?", "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "Prediction": "Student.Fname, Student.Age\n FROM Student\n JOIN Has_Pet ON Student.StuID = Has_Pet.StuID\n JOIN Pets ON Has_Pet.PetID = Pets.PetID;"}
{"db_id": "pets_1", "SpiderQuestion": "Find the id of the pet owned by student whose last name is 'Smith'.", "SpiderSynQuestion": "Find the id of the animals owned by student whose family name is 'Smith'.", "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "Prediction": "Pets.PetID \nFROM Has_Pet \nJOIN Student ON Has_Pet.StuID = Student.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.LName = 'Smith';"}
{"db_id": "pets_1", "SpiderQuestion": "What is the id of the pet owned by the student whose last name is 'Smith'?", "SpiderSynQuestion": "What is the id of the animals owned by the student whose family name is 'Smith'?", "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "Prediction": "Pets.PetID \nFROM Has_Pet \nJOIN Student ON Has_Pet.StuID=Student.StuID \nJOIN Pets ON Has_Pet.PetID=Pets.PetID \nWHERE Student.LName='Smith'"}
{"db_id": "pets_1", "SpiderQuestion": "Find the number of pets for each student who has any pet and student id.", "SpiderSynQuestion": "Find the number of animals for each student who has any pet and student id.", "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "Prediction": "Student.StuID, COUNT(Pets.PetID) AS num_animals\n FROM Has_Pet\n JOIN Pets ON Has_Pet.PetID = Pets.PetID\n JOIN Student ON Has_Pet.StuID = Student.StuID\n GROUP BY Student.StuID;"}
{"db_id": "pets_1", "SpiderQuestion": "For students who have pets, how many pets does each student have?", "SpiderSynQuestion": "For students who have pets, how many animals does each student have?", "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "Prediction": "Student.StuID, COUNT(Has_Pet.PetID) \n FROM Student \n JOIN Has_Pet ON Student.StuID=Has_Pet.StuID \n GROUP BY Student.StuID;"}
{"db_id": "pets_1", "SpiderQuestion": "Find the first name and gender of student who have more than one pet.", "SpiderSynQuestion": "Find the given name and gender of student who have more than one pet.", "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "Prediction": "Student.Fname, Student.Sex \n FROM Student \n JOIN Has_Pet ON Has_Pet.StuID = Student.StuID \n GROUP BY Has_Pet.StuID \n HAVING COUNT(Has_Pet.PetID) > 1;"}
{"db_id": "pets_1", "SpiderQuestion": "What is the first name and gender of the all the students who have more than one pet?", "SpiderSynQuestion": "What is the given name and gender of the all the students who have more than one pet?", "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "Prediction": "Student.Fname, Student.Sex \n FROM Student \n JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \n GROUP BY Student.StuID \n HAVING COUNT(Has_Pet.PetID) > 1;"}
{"db_id": "pets_1", "SpiderQuestion": "Find the last name of the student who has a cat that is age 3.", "SpiderSynQuestion": "Find the family name of the student who has a kitten that is age 3.", "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "Prediction": "Student.LName\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'kitten' AND Pets.pet_age = 3;"}
{"db_id": "pets_1", "SpiderQuestion": "What is the last name of the student who has a cat that is 3 years old?", "SpiderSynQuestion": "What is the family name of the student who has a kitten that is 3 years old?", "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "Prediction": "Student.LName\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'kitten' AND Pets.pet_age = 3;"}
{"db_id": "pets_1", "SpiderQuestion": "Find the average age of students who do not have any pet.", "SpiderSynQuestion": "Find the average age of students who do not have any pet.", "query": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)", "Prediction": "AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);"}
{"db_id": "pets_1", "SpiderQuestion": "What is the average age for all students who do not own any pets?", "SpiderSynQuestion": "What is the average age for all students who do not own any pets?", "query": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)", "Prediction": "AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);"}
{"db_id": "car_1", "SpiderQuestion": "How many continents are there?", "SpiderSynQuestion": "How many continents are there?", "query": "SELECT count(*) FROM CONTINENTS;", "Prediction": "COUNT(*) FROM continents;"}
{"db_id": "car_1", "SpiderQuestion": "What is the number of continents?", "SpiderSynQuestion": "What is the number of continents?", "query": "SELECT count(*) FROM CONTINENTS;", "Prediction": "COUNT(*) FROM continents;"}
{"db_id": "car_1", "SpiderQuestion": "How many countries does each continent have? List the continent id, continent name and the number of countries.", "SpiderSynQuestion": "How many States does each continent have? List the continent id, continent name and the number of nations.", "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "Prediction": "continents.ContId, continents.Continent, COUNT(countries.CountryId) AS NumOfNations\n FROM continents\n JOIN countries ON countries.Continent=continents.ContId\n GROUP BY continents.ContId;"}
{"db_id": "car_1", "SpiderQuestion": "For each continent, list its id, name, and how many countries it has?", "SpiderSynQuestion": "For each continent, list its id, name, and how many States it has?", "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "Prediction": "continents.ContId, continents.Continent, COUNT(countries.CountryId) AS StateCount\n FROM continents\n JOIN countries ON continents.ContId = countries.Continent\n GROUP BY continents.ContId;"}
{"db_id": "car_1", "SpiderQuestion": "How many countries are listed?", "SpiderSynQuestion": "How many States are listed?", "query": "SELECT count(*) FROM COUNTRIES;", "Prediction": "COUNT(*) FROM States;"}
{"db_id": "car_1", "SpiderQuestion": "How many countries exist?", "SpiderSynQuestion": "How many countries exist?", "query": "SELECT count(*) FROM COUNTRIES;", "Prediction": "COUNT(*) FROM countries;"}
{"db_id": "car_1", "SpiderQuestion": "How many models does each car maker produce? List maker full name, id and the number.", "SpiderSynQuestion": "How many models does each car manufacturer produce? List manufacturer full name, id and the number.", "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "Prediction": "car_makers.FullName, car_makers.Id, COUNT(car_names.Model) \n FROM car_makers \n JOIN car_names ON car_makers.Id = car_names.MakeId \n GROUP BY car_makers.Id;"}
{"db_id": "car_1", "SpiderQuestion": "What is the full name of each car maker, along with its id and how many models it produces?", "SpiderSynQuestion": "What is the full name of each car manufacturer, along with its id and how many models it produces?", "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "Prediction": "car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) \n FROM car_makers \n JOIN model_list ON car_makers.Id = model_list.Maker \n GROUP BY car_makers.Id;"}
{"db_id": "car_1", "SpiderQuestion": "Which model of the car has the minimum horsepower?", "SpiderSynQuestion": "Which model of the vehicle has the minimum horsepower?", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "Prediction": "Id FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data);"}
{"db_id": "car_1", "SpiderQuestion": "What is the model of the car with the smallest amount of horsepower?", "SpiderSynQuestion": "What is the model of the vehicle with the smallest amount of power?", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "Prediction": "Model FROM cars_data \nJOIN car_names ON cars_data.Id=car_names.MakeId \nWHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data);"}
{"db_id": "car_1", "SpiderQuestion": "Find the model of the car whose weight is below the average weight.", "SpiderSynQuestion": "Find the model of the vehicle who is lighter than the average.", "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "Prediction": "Model FROM cars_data \nINNER JOIN car_names ON cars_data.Id=car_names.MakeId \nWHERE Weight < (SELECT AVG(Weight) FROM cars_data);"}
{"db_id": "car_1", "SpiderQuestion": "What is the model for the car with a weight smaller than the average?", "SpiderSynQuestion": "What is the model for the vehicle with a weight smaller than the average?", "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "Prediction": "model_list.Model \nFROM cars_data \nJOIN model_list ON cars_data.Id = model_list.ModelId \nWHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);"}
{"db_id": "car_1", "SpiderQuestion": "Find the name of the makers that produced some cars in the year of 1970?", "SpiderSynQuestion": "Find the name of the manufacturer that produced some vehicles in the year of 1970?", "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "Prediction": "car_makers.Maker \n FROM car_makers \n JOIN cars_data ON car_makers.Id = cars_data.Id \n WHERE cars_data.Year = 1970;"}
{"db_id": "car_1", "SpiderQuestion": "What is the name of the different car makers who produced a car in 1970?", "SpiderSynQuestion": "What is the name of the different car manufacturers who produced a vehicle in 1970?", "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "Prediction": "car_makers.Maker \n FROM car_makers \n INNER JOIN cars_data ON car_makers.Id = cars_data.Id \n WHERE cars_data.Year = 1970;"}
{"db_id": "car_1", "SpiderQuestion": "Find the make and production time of the cars that were produced in the earliest year?", "SpiderSynQuestion": "Find the make and production time of the vehicles that were produced in the earliest year?", "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "Prediction": "car_makers.Maker, cars_data.Year \n FROM car_makers \n JOIN car_names ON car_makers.Id = car_names.MakeId \n JOIN cars_data ON car_names.MakeId = cars_data.Id \n WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data);"}
{"db_id": "car_1", "SpiderQuestion": "What is the maker of the car produced in the earliest year and what year was it?", "SpiderSynQuestion": "What is the manufacturer of the vehicle produced in the earliest year and what year was it?", "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "Prediction": "car_makers.Maker, MIN(cars_data.Year)\n FROM car_makers\n JOIN cars_data ON car_makers.Id = cars_data.Id\n GROUP BY car_makers.Maker\n ORDER BY cars_data.Year ASC\n LIMIT 1;"}
{"db_id": "car_1", "SpiderQuestion": "Which distinct car models are the produced after 1980?", "SpiderSynQuestion": "Which distinct vehicle models are the produced after 1980?", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "Prediction": "DISTINCT Model FROM model_list \nINNER JOIN cars_data ON model_list.ModelId=cars_data.Id \nWHERE Year>1980;"}
{"db_id": "car_1", "SpiderQuestion": "What are the different models for the cards produced after 1980?", "SpiderSynQuestion": "What are the different models for the vehicles produced after 1980?", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "Prediction": "car_names.Model \n FROM car_names \n JOIN cars_data ON car_names.MakeId=cars_data.Id \n WHERE cars_data.Year>1980;"}
{"db_id": "car_1", "SpiderQuestion": "How many car makers are there in each continents? List the continent name and the count.", "SpiderSynQuestion": "How many car manufacturers are there in each continents? List the continent name and the count.", "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "Prediction": "countries.Continent, COUNT(DISTINCT car_makers.Maker) \n FROM car_makers \n JOIN countries ON car_makers.Country=countries.CountryId \n GROUP BY countries.Continent;"}
{"db_id": "car_1", "SpiderQuestion": "What is the name of each continent and how many car makers are there in each one?", "SpiderSynQuestion": "What is the name of each continent and how many vehicle manufacturers are there in each one?", "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "Prediction": "countries.Continent, COUNT(car_makers.Id) \n FROM countries \n JOIN car_makers ON car_makers.Country=countries.CountryId \n GROUP BY countries.Continent;"}
{"db_id": "car_1", "SpiderQuestion": "Which of the countries has the most car makers? List the country name.", "SpiderSynQuestion": "Which of the States has the most car manufacturers? List the State name.", "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "Prediction": "countries.CountryName \n FROM car_makers \n JOIN countries ON car_makers.Country=countries.CountryId \n GROUP BY countries.CountryName \n ORDER BY COUNT(car_makers.Id) DESC \n LIMIT 1;"}
{"db_id": "car_1", "SpiderQuestion": "What is the name of the country with the most car makers?", "SpiderSynQuestion": "What is the name of the State with the most vehicle manufacturers?", "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "Prediction": "countries.CountryName \nFROM car_makers \nJOIN countries ON car_makers.Country=countries.CountryId \nGROUP BY countries.CountryName \nORDER BY COUNT(car_makers.Id) DESC \nLIMIT 1;"}
{"db_id": "car_1", "SpiderQuestion": "How many car models are produced by each maker? List the count and the maker full name.", "SpiderSynQuestion": "How many vehicle models are produced by each manufacturer? List the count and the manufacturer full name.", "query": "SELECT Count(*) ,  T2.FullName  FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "Prediction": "car_makers.FullName, COUNT(car_names.Model) \n FROM car_makers \n JOIN car_names ON car_makers.Id = car_names.MakeId \n GROUP BY car_makers.FullName;"}
{"db_id": "car_1", "SpiderQuestion": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "SpiderSynQuestion": "What is the number of vehicle models that are produced by each manufacturer and what is the id and full name of each manufacturer?", "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "Prediction": "car_makers.Id, car_makers.FullName, COUNT(car_names.Model) \n FROM car_makers \n JOIN car_names ON car_makers.Id = car_names.MakeId \n GROUP BY car_makers.Id;"}
{"db_id": "car_1", "SpiderQuestion": "What is the accelerate of the car make amc hornet sportabout (sw)?", "SpiderSynQuestion": "What is the accelerate of the vehicle make amc hornet sportabout (sw)?", "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "Prediction": "cars_data.Accelerate \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nWHERE car_names.Model = 'hornet sportabout (sw)' AND car_names.Make = 'amc'"}
{"db_id": "car_1", "SpiderQuestion": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "SpiderSynQuestion": "How much does the vehicle accelerate that makes out amc hornet sportabout (sw)?", "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "Prediction": "cars_data.Accelerate \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nWHERE car_names.Model = 'Hornet Sportabout (sw)' AND car_names.Make = 'AMC';"}
{"db_id": "car_1", "SpiderQuestion": "How many car makers are there in france?", "SpiderSynQuestion": "How many French car manufacturers are there?", "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "Prediction": "COUNT(*) FROM car_makers WHERE Country = 'France';"}
{"db_id": "car_1", "SpiderQuestion": "What is the number of makers of car in France?", "SpiderSynQuestion": "What is the number of manufacturers of vehicle in France?", "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "Prediction": "COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France');"}
{"db_id": "car_1", "SpiderQuestion": "How many car models are produced in the usa?", "SpiderSynQuestion": "How many vehicle models are produced in the usa?", "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "Prediction": "COUNT(*) FROM cars_data \nJOIN car_makers ON cars_data.Id = car_makers.Id \nWHERE car_makers.Country = 'USA';"}
{"db_id": "car_1", "SpiderQuestion": "What is the count of the car models produced in the United States?", "SpiderSynQuestion": "What is the count of the vehicle models produced in the United States?", "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "Prediction": "COUNT(*) FROM cars_data \nJOIN car_makers ON cars_data.Id = car_makers.Id \nJOIN countries ON car_makers.Country = countries.CountryId \nWHERE countries.CountryName = 'United States';"}
{"db_id": "car_1", "SpiderQuestion": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "SpiderSynQuestion": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "Prediction": "AVG(MPG) FROM cars_data WHERE Cylinders=4;"}
{"db_id": "car_1", "SpiderQuestion": "What is the average miles per gallon of all the cars with 4 cylinders?", "SpiderSynQuestion": "What is the average miles per gallon of all the cars with 4 cylinders?", "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "Prediction": "AVG(MPG) FROM cars_data WHERE Cylinders = 4;"}
{"db_id": "car_1", "SpiderQuestion": "What is the smallest weight of the car produced with 8 cylinders on 1974?", "SpiderSynQuestion": "What is the smallest weight of the car produced with 8 cylinders on 1974?", "query": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  8 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;", "Prediction": "MIN(Weight) FROM cars_data \nWHERE Cylinders=8 AND Year=1974;"}
{"db_id": "car_1", "SpiderQuestion": "What is the minimu weight of the car with 8 cylinders produced in 1974?", "SpiderSynQuestion": "What is the minimu weight of the car with 8 cylinders produced in 1974?", "query": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  8 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;", "Prediction": "MIN(Weight) FROM cars_data JOIN car_names ON cars_data.Id=car_names.MakeId WHERE Cylinders=8 AND Year=1974;"}
{"db_id": "car_1", "SpiderQuestion": "What are all the makers and models?", "SpiderSynQuestion": "What are all the companies and models?", "query": "SELECT Maker ,  Model FROM MODEL_LIST;", "Prediction": "car_makers.Maker, model_list.Model\n FROM car_makers\n JOIN model_list ON car_makers.Id = model_list.Maker;"}
{"db_id": "car_1", "SpiderQuestion": "What are the makers and models?", "SpiderSynQuestion": "What are the manufacturers and models?", "query": "SELECT Maker ,  Model FROM MODEL_LIST;", "Prediction": "car_makers.Maker, model_list.Model\n FROM car_makers\n JOIN model_list ON model_list.Maker = car_makers.Id;"}
{"db_id": "car_1", "SpiderQuestion": "What are the countries having at least one car maker? List name and id.", "SpiderSynQuestion": "What are the States having at least one vehicle manufacturer? List name and id.", "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "Prediction": "car_makers.Country, countries.CountryName\n FROM car_makers\n JOIN countries ON car_makers.Country=countries.CountryId\n GROUP BY car_makers.Country\n HAVING COUNT(DISTINCT car_makers.Id) >= 1;"}
{"db_id": "car_1", "SpiderQuestion": "What are the names and ids of all countries with at least one car maker?", "SpiderSynQuestion": "What are the names and ids of all States with at least one vehicle manufacturer?", "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "Prediction": "car_makers.Id, car_makers.Maker\n FROM car_makers\n WHERE car_makers.Country IN (SELECT countries.CountryId FROM countries)"}
{"db_id": "car_1", "SpiderQuestion": "What is the number of the cars with horsepower more than 150?", "SpiderSynQuestion": "What is the number of the vehicle with power more than 150?", "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "Prediction": "Id FROM cars_data WHERE Horsepower > 150;"}
{"db_id": "car_1", "SpiderQuestion": "What is the number of cars with a horsepower greater than 150?", "SpiderSynQuestion": "What is the number of vehicles with a power greater than 150?", "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "Prediction": "COUNT(*) FROM cars_data WHERE Horsepower > 150;"}
{"db_id": "car_1", "SpiderQuestion": "What is the average weight of cars each year?", "SpiderSynQuestion": "What is the average weight of vehicles each year?", "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "Prediction": "Year, AVG(Weight) FROM cars_data GROUP BY Year;"}
{"db_id": "car_1", "SpiderQuestion": "What is the average weight and year for each year?", "SpiderSynQuestion": "What is the average weight and year for each year?", "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "Prediction": "Year, AVG(Weight), AVG(Year) FROM cars_data GROUP BY Year;"}
{"db_id": "car_1", "SpiderQuestion": "Which countries in europe have at least 3 car manufacturers?", "SpiderSynQuestion": "Which States in europe have at least 3 vehicle manufacturers?", "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "Prediction": "countries.CountryName \nFROM car_makers \nJOIN countries ON car_makers.Country=countries.CountryId \nWHERE countries.Continent='Europe' \nGROUP BY countries.CountryName \nHAVING COUNT(DISTINCT car_makers.Maker) >= 3;"}
{"db_id": "car_1", "SpiderQuestion": "What are the names of all European countries with at least 3 manufacturers?", "SpiderSynQuestion": "What are the names of all European States with at least 3 manufacturers?", "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "Prediction": "countries.CountryName \nFROM countries \nJOIN car_makers ON countries.CountryId = car_makers.Country \nWHERE countries.Continent = 'Europe' \nGROUP BY countries.CountryName \nHAVING COUNT(DISTINCT car_makers.Maker) >= 3;"}
{"db_id": "car_1", "SpiderQuestion": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "SpiderSynQuestion": "What is the maximum power and the manufacturer of the vehicle models with 3 cylinders?", "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "Prediction": "MAX(cars_data.Horsepower), car_makers.Maker\n FROM cars_data\n JOIN car_names ON cars_data.Id=car_names.MakeId\n JOIN car_makers ON car_names.Make=car_makers.FullName\n WHERE cars_data.Cylinders=3;"}
{"db_id": "car_1", "SpiderQuestion": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "SpiderSynQuestion": "What is the largest amount of power for the models with 3 cylinders and what manufacturer is it?", "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "Prediction": "car_makers.Maker, MAX(cars_data.Horsepower) \n FROM car_makers \n JOIN car_names ON car_makers.Id = car_names.MakeId \n JOIN cars_data ON car_names.MakeId = cars_data.Id \n WHERE cars_data.Cylinders = 3;"}
{"db_id": "car_1", "SpiderQuestion": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "SpiderSynQuestion": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "Prediction": "car_names.Model \n FROM car_names \n JOIN cars_data ON car_names.MakeId=cars_data.Id \n WHERE cars_data.MPG=(SELECT MAX(MPG) FROM cars_data);"}
{"db_id": "car_1", "SpiderQuestion": "What is the car model with the highest mpg?", "SpiderSynQuestion": "What is the automobile model with the highest mpg?", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "Prediction": "Model FROM cars_data \nINNER JOIN car_names ON cars_data.Id=car_names.MakeId \nORDER BY MPG DESC LIMIT 1;"}
{"db_id": "car_1", "SpiderQuestion": "What is the average horsepower of the cars before 1980?", "SpiderSynQuestion": "What is the average power of the automobile before 1980?", "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "Prediction": "AVG(Horsepower) FROM cars_data WHERE Year < 1980;"}
{"db_id": "car_1", "SpiderQuestion": "What is the average horsepower for all cars produced before 1980?", "SpiderSynQuestion": "What is the average power for all automobiles produced before 1980?", "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "Prediction": "AVG(Horsepower) FROM cars_data WHERE Year < 1980;"}
{"db_id": "car_1", "SpiderQuestion": "What is the average edispl of the cars of model volvo?", "SpiderSynQuestion": "What is the average edispl of the automobile of model volvo?", "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "Prediction": "AVG(cars_data.Edispl) \n FROM cars_data \n JOIN car_names ON cars_data.Id=car_names.MakeId \n WHERE car_names.Model='volvo';"}
{"db_id": "car_1", "SpiderQuestion": "What is the average edispl for all volvos?", "SpiderSynQuestion": "What is the average edispl for all volvos?", "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "Prediction": "AVG(cars_data.Edispl) FROM cars_data \nJOIN car_names ON cars_data.Id=car_names.MakeId \nJOIN car_makers ON car_names.Make=car_makers.Maker \nWHERE car_makers.FullName LIKE '%Volvo%';"}
{"db_id": "car_1", "SpiderQuestion": "What is the maximum accelerate for different number of cylinders?", "SpiderSynQuestion": "What is the maximum accelerate for different number of cylinders?", "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "Prediction": "Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders;"}
{"db_id": "car_1", "SpiderQuestion": "What is the maximum accelerate for all the different cylinders?", "SpiderSynQuestion": "What is the maximum accelerate for all the different cylinders?", "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "Prediction": "Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders;"}
{"db_id": "car_1", "SpiderQuestion": "Which model has the most version(make) of cars?", "SpiderSynQuestion": "Which model has the most version(make) of automobiles?", "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "Prediction": "car_names.Model\n FROM car_names\n GROUP BY car_names.Model\n ORDER BY COUNT(DISTINCT car_names.Make) DESC\n LIMIT 1;"}
{"db_id": "car_1", "SpiderQuestion": "What model has the most different versions?", "SpiderSynQuestion": "What model has the most different versions?", "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "Prediction": "Model, COUNT(DISTINCT MakeId) AS num_versions\n FROM car_names\n GROUP BY Model\n ORDER BY num_versions DESC\n LIMIT 1;"}
{"db_id": "car_1", "SpiderQuestion": "How many cars have more than 4 cylinders?", "SpiderSynQuestion": "How many vehicles have more than 4 cylinders?", "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "Prediction": "COUNT(*) FROM cars_data WHERE Cylinders > 4;"}
{"db_id": "car_1", "SpiderQuestion": "What is the number of cars with more than 4 cylinders?", "SpiderSynQuestion": "What is the number of vehicles with more than 4 cylinders?", "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "Prediction": "COUNT(*) FROM cars_data WHERE Cylinders > 4;"}
{"db_id": "car_1", "SpiderQuestion": "how many cars were produced in 1980?", "SpiderSynQuestion": "how many automobiles were produced in 1980?", "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "Prediction": "COUNT(*) FROM cars_data WHERE Year=1980;"}
{"db_id": "car_1", "SpiderQuestion": "In 1980, how many cars were made?", "SpiderSynQuestion": "In 1980, how many automobiles were made?", "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "Prediction": "COUNT(*) FROM cars_data WHERE Year=1980;"}
{"db_id": "car_1", "SpiderQuestion": "How many car models were produced by the maker with full name American Motor Company?", "SpiderSynQuestion": "How many automobile models were produced by the manufacturer with full name American Motor Company?", "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "Prediction": "COUNT(*) FROM model_list \nJOIN car_makers ON model_list.Maker=car_makers.Id \nWHERE car_makers.FullName='American Motor Company';"}
{"db_id": "car_1", "SpiderQuestion": "What is the number of car models created by the car maker American Motor Company?", "SpiderSynQuestion": "What is the number of automobile models created by the car manufacturer American Motor Company?", "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "Prediction": "COUNT(*) FROM model_list \nWHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'American Motor Company');"}
{"db_id": "car_1", "SpiderQuestion": "Which makers designed more than 3 car models? List full name and the id.", "SpiderSynQuestion": "Which manufacturers designed more than 3 vehicle models? List full name and the id.", "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "Prediction": "car_makers.Id, car_makers.FullName\n FROM car_makers\n JOIN model_list ON car_makers.Id = model_list.Maker\n GROUP BY car_makers.Id, car_makers.FullName\n HAVING COUNT(model_list.ModelId) > 3;"}
{"db_id": "car_1", "SpiderQuestion": "What are the names and ids of all makers with more than 3 models?", "SpiderSynQuestion": "What are the names and ids of all manufacturers with more than 3 models?", "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "Prediction": "car_makers.Id, car_makers.Maker \n FROM car_makers \n INNER JOIN model_list ON car_makers.Id = model_list.Maker \n GROUP BY car_makers.Id \n HAVING COUNT(model_list.ModelId) > 3;"}
{"db_id": "car_1", "SpiderQuestion": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "SpiderSynQuestion": "Which distinctive types are produced by manufacturer with the full name General Motors or weighing more than 3500?", "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "Prediction": "DISTINCT cars_data.Type \nFROM cars_data \nINNER JOIN car_makers ON cars_data.Id = car_makers.Id \nWHERE (car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500);"}
{"db_id": "car_1", "SpiderQuestion": "What are the different models created by either the car maker General Motors or weighed more than 3500?", "SpiderSynQuestion": "What are the different models created by either the car manufacturer General Motors or weighed more than 3500?", "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "Prediction": "cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year\n FROM cars_data\n JOIN car_makers ON cars_data.Id = car_makers.Id\n WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;"}
{"db_id": "car_1", "SpiderQuestion": "In which years cars were produced weighing no less than 3000 and no more than 4000?", "SpiderSynQuestion": "In which years automobiles were produced weighing no less than 3000 and no more than 4000?", "query": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;", "Prediction": "Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;"}
{"db_id": "car_1", "SpiderQuestion": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000?", "SpiderSynQuestion": "What are the different years in which there were vehicles produced that weighed less than 4000 and also vehicles that weighted more than 3000?", "query": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;", "Prediction": "DISTINCT Year FROM cars_data WHERE Weight < 4000 INTERSECT SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000;"}
{"db_id": "car_1", "SpiderQuestion": "What is the horsepower of the car with the largest accelerate?", "SpiderSynQuestion": "What is the power of the automobile with the largest accelerate?", "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "Prediction": "MAX(Horsepower) FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);"}
{"db_id": "car_1", "SpiderQuestion": "What is the horsepower of the car with the greatest accelerate?", "SpiderSynQuestion": "What is the power of the automobile with the greatest accelerate?", "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "Prediction": "cars_data.Horsepower \n FROM cars_data \n WHERE cars_data.Accelerate = (SELECT MAX(Accelerate) FROM cars_data);"}
{"db_id": "car_1", "SpiderQuestion": "For model volvo, how many cylinders does the car with the least accelerate have?", "SpiderSynQuestion": "For model volvo, how many cylinders does the automobile with the least accelerate have?", "query": "SELECT count(cylinders) FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "Prediction": "MIN(Cylinders) FROM cars_data JOIN car_names ON cars_data.Id=car_names.MakeId WHERE Model='volvo' AND Accelerate=(SELECT MIN(Accelerate) FROM cars_data JOIN car_names ON cars_data.Id=car_names.MakeId WHERE Model='volvo');"}
{"db_id": "car_1", "SpiderQuestion": "For a volvo model, how many cylinders does the version with least accelerate have?", "SpiderSynQuestion": "For a volvo model, how many cylinders does the version with least accelerate have?", "query": "SELECT count(cylinders) FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "Prediction": "MIN(Cylinders) FROM cars_data \nWHERE Id IN (SELECT MakeId FROM car_names WHERE Model LIKE '%volvo%') \nAND Accelerate = (SELECT MIN(Accelerate) FROM cars_data \n                  WHERE Id IN (SELECT MakeId FROM car_names WHERE Model LIKE '%volvo%'))"}
{"db_id": "car_1", "SpiderQuestion": "How many cars have a larger accelerate than the car with the largest horsepower?", "SpiderSynQuestion": "How many automobiles have a larger accelerate than the automobile with the largest power?", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "Prediction": "COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data);"}
{"db_id": "car_1", "SpiderQuestion": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "SpiderSynQuestion": "What is the number of automobiles with a greater accelerate than the one with the most power?", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "Prediction": "COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Accelerate) FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data));"}
{"db_id": "car_1", "SpiderQuestion": "How many countries has more than 2 car makers?", "SpiderSynQuestion": "How many States has more than 2 car manufacturers?", "query": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );", "Prediction": "COUNT(DISTINCT car_makers.Country) FROM car_makers GROUP BY car_makers.Country HAVING COUNT(DISTINCT car_makers.Maker) > 2;"}
{"db_id": "car_1", "SpiderQuestion": "What is the number of countries with more than 2 car makers?", "SpiderSynQuestion": "What is the number of States with more than 2 car manufacturers?", "query": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );", "Prediction": "COUNT(DISTINCT car_makers.Country) FROM car_makers GROUP BY car_makers.Country HAVING COUNT(DISTINCT car_makers.Maker) > 2;"}
{"db_id": "car_1", "SpiderQuestion": "How many cars has over 6 cylinders?", "SpiderSynQuestion": "How many automobiles has over 6 cylinders?", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "Prediction": "COUNT(*) FROM cars_data WHERE Cylinders > 6;"}
{"db_id": "car_1", "SpiderQuestion": "What is the number of cars with over 6 cylinders?", "SpiderSynQuestion": "What is the number of automobiles with over 6 cylinders?", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "Prediction": "COUNT(*) FROM cars_data WHERE Cylinders > 6;"}
{"db_id": "car_1", "SpiderQuestion": "For the cars with 4 cylinders, which model has the largest horsepower?", "SpiderSynQuestion": "For the automobiles with 4 cylinders, which model has the largest power?", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "Prediction": "car_names.Model \n FROM car_names \n JOIN cars_data ON car_names.MakeId=cars_data.Id \n WHERE cars_data.Cylinders=4 \n ORDER BY cars_data.Horsepower DESC \n LIMIT 1;"}
{"db_id": "car_1", "SpiderQuestion": "For all of the 4 cylinder cars, which model has the most horsepower?", "SpiderSynQuestion": "For all of the 4 cylinder automobiles, which model has the most power?", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "Prediction": "Model FROM car_names \nJOIN cars_data ON car_names.MakeId=cars_data.Id \nWHERE Cylinders=4 \nORDER BY Horsepower DESC \nLIMIT 1;"}
{"db_id": "car_1", "SpiderQuestion": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "SpiderSynQuestion": "Among the automobiles with more than lowest power, which ones do not have more than 3 cylinders? List the vehicle makeid and manufacturer name.", "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;", "Prediction": "car_names.MakeId, car_makers.Maker \n FROM cars_data \n JOIN car_names ON cars_data.Id=car_names.MakeId \n JOIN car_makers ON car_names.MakeId=car_makers.Id \n WHERE cars_data.Cylinders <= 3 AND cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data);"}
{"db_id": "car_1", "SpiderQuestion": "Among the cars that do not have the minimum horsepower, what are the make ids and names of al those with less than 4 cylinders?", "SpiderSynQuestion": "Among the automobiles that do not have the minimum power, what are the manufacturer ids and names of al those with less than 4 cylinders?", "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <  4;", "Prediction": "car_makers.Id, car_makers.Maker \n FROM car_makers \n JOIN cars_data ON car_makers.Id = cars_data.Id \n WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data);"}
{"db_id": "car_1", "SpiderQuestion": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?", "SpiderSynQuestion": "What is the maximum miles per gallon of the automobile with 8 cylinders or produced before 1980?", "query": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;", "Prediction": "MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980;"}
{"db_id": "car_1", "SpiderQuestion": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980?", "SpiderSynQuestion": "What is the maximum mpg of the automobiles that had 8 cylinders or that were produced before 1980?", "query": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;", "Prediction": "MAX(MPG) FROM cars_data WHERE (Cylinders = 8 OR Year < 1980);"}
{"db_id": "car_1", "SpiderQuestion": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "SpiderSynQuestion": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "Prediction": "Model FROM car_names \nJOIN cars_data ON car_names.MakeId=cars_data.Id \nJOIN car_makers ON car_names.Make=car_makers.Maker \nWHERE Weight<3500 AND car_makers.Maker!='Ford Motor Company';"}
{"db_id": "car_1", "SpiderQuestion": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "SpiderSynQuestion": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "Prediction": "car_names.Model \n FROM car_names \n JOIN cars_data ON car_names.MakeId=cars_data.Id \n JOIN car_makers ON car_names.Make=car_makers.Maker \n WHERE cars_data.Weight<3500 AND car_makers.Maker!='Ford Motor Company';"}
{"db_id": "car_1", "SpiderQuestion": "What are the name of the countries where there is not a single car maker?", "SpiderSynQuestion": "What are the name of the States where there is not a single automobile maker?", "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "Prediction": "countries.CountryName \nFROM countries \nLEFT JOIN car_makers ON countries.CountryId = car_makers.Country \nWHERE car_makers.Id IS NULL;"}
{"db_id": "car_1", "SpiderQuestion": "What are the names of the countries with no car makers?", "SpiderSynQuestion": "What are the names of the States with no vehicle manufacturers?", "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "Prediction": "countries.CountryName \nFROM countries \nLEFT JOIN car_makers ON countries.CountryId = car_makers.Country \nWHERE car_makers.Id IS NULL;"}
{"db_id": "car_1", "SpiderQuestion": "Which are the car makers which produce at least 2 models and more than 3 car makes? List the id and the maker.", "SpiderSynQuestion": "Which are the automobile manufacturers which produce at least 2 models and more than 3 automobile manufacturers? List the id and the manufacturer.", "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "Prediction": "car_makers.Id, car_makers.Maker \n FROM car_makers \n JOIN car_names ON car_makers.Id = car_names.MakeId \n GROUP BY car_makers.Id \n HAVING COUNT(DISTINCT car_names.Model) >= 2 AND COUNT(DISTINCT car_makers.Id) > 3;"}
{"db_id": "car_1", "SpiderQuestion": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "SpiderSynQuestion": "What are the ids and manufacturers of all automobile manufacturers that produce at least 2 models and make more than 3 automobiles?", "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "Prediction": "car_makers.Id, car_makers.Maker \n FROM car_makers \n JOIN car_names ON car_makers.Id = car_names.MakeId \n GROUP BY car_makers.Id \n HAVING COUNT(DISTINCT car_names.Model) >= 2 AND COUNT(DISTINCT car_names.Make) > 3;"}
{"db_id": "car_1", "SpiderQuestion": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?", "SpiderSynQuestion": "What are the id and names of the nations which have more than 3 vehicle manufacturers or produce the 'fiat' model?", "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "Prediction": "countries.CountryId, countries.CountryName \n FROM countries \n JOIN car_makers ON countries.CountryId = car_makers.Country \n WHERE car_makers.Maker = 'fiat' OR \n       countries.CountryId IN (SELECT car_makers.Country \n                               FROM car_makers \n                               GROUP BY car_makers.Country \n                               HAVING COUNT(DISTINCT car_makers.Maker) > 3);"}
{"db_id": "car_1", "SpiderQuestion": "What are the ids and names of all countries that either have more than 3 car makers or produce fiats?", "SpiderSynQuestion": "What are the ids and names of all States that either have more than 3 automobile manufacturers or produce fiats?", "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "Prediction": "car_makers.Id, car_makers.Maker \n FROM car_makers \n WHERE car_makers.Maker = 'fiat' OR \n       car_makers.Id IN (SELECT car_makers.Id \n                         FROM car_makers \n                         GROUP BY car_makers.Id \n                         HAVING COUNT(*) > 3)"}
{"db_id": "flight_2", "SpiderQuestion": "Which country does Airline \"JetBlue Airways\" belong to?", "SpiderSynQuestion": "Which State does Airways \"JetBlue Airways\" belong to?", "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "Prediction": "airports.State \n FROM airlines \n JOIN airports ON airlines.CountryAbbrev = airports.CountryAbbrev \n WHERE airlines.Airline = \"JetBlue Airways\";"}
{"db_id": "flight_2", "SpiderQuestion": "What country is Jetblue Airways affiliated with?", "SpiderSynQuestion": "What State is Jetblue Airways affiliated with?", "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "Prediction": "airports.Country \n FROM airlines \n JOIN flights ON airlines.Abbreviation = flights.Airline \n JOIN airports ON flights.DestAirport = airports.AirportCode \n WHERE airlines.Airline = 'Jetblue Airways';"}
{"db_id": "flight_2", "SpiderQuestion": "What is the abbreviation of Airline \"JetBlue Airways\"?", "SpiderSynQuestion": "What is the shortened word of Airline \"JetBlue Airways\"?", "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "Prediction": "Abbreviation FROM airlines WHERE Airline = \"JetBlue Airways\";"}
{"db_id": "flight_2", "SpiderQuestion": "Which abbreviation corresponds to Jetblue Airways?", "SpiderSynQuestion": "Which shortened word corresponds to Jetblue Airways?", "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "Prediction": "Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';"}
{"db_id": "flight_2", "SpiderQuestion": "List all airline names and their abbreviations in \"USA\".", "SpiderSynQuestion": "List all airway names and their shortened word in \"USA\".", "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "Prediction": "Airline, Abbreviation FROM airlines WHERE Country = 'USA';"}
{"db_id": "flight_2", "SpiderQuestion": "What are the airline names and abbreviations for airlines in the USA?", "SpiderSynQuestion": "What are the airway names and shortened words for airways in the USA?", "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "Prediction": "Airline, Abbreviation FROM airlines WHERE Country = 'USA';"}
{"db_id": "flight_2", "SpiderQuestion": "List the airport code and name in the city of Anthony.", "SpiderSynQuestion": "List the airport code and name in the city of Anthony.", "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "Prediction": "AirportCode, AirportName \n FROM airports \n WHERE City = 'Anthony';"}
{"db_id": "flight_2", "SpiderQuestion": "Give the airport code and airport name corresonding to the city Anthony.", "SpiderSynQuestion": "Give the airport code and airport name corresonding to the city Anthony.", "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "Prediction": "AirportCode, AirportName FROM airports WHERE City = 'Anthony';"}
{"db_id": "flight_2", "SpiderQuestion": "How many airlines do we have?", "SpiderSynQuestion": "How many airways do we have?", "query": "SELECT count(*) FROM AIRLINES", "Prediction": "COUNT(DISTINCT Airline) FROM flights;"}
{"db_id": "flight_2", "SpiderQuestion": "What is the total number of airlines?", "SpiderSynQuestion": "What is the total amount of airways?", "query": "SELECT count(*) FROM AIRLINES", "Prediction": "COUNT(DISTINCT Airline) FROM flights;"}
{"db_id": "flight_2", "SpiderQuestion": "How many airports do we have?", "SpiderSynQuestion": "How many aerodromes do we have?", "query": "SELECT count(*) FROM AIRPORTS", "Prediction": "COUNT(*) FROM airports;"}
{"db_id": "flight_2", "SpiderQuestion": "Return the number of  airports.", "SpiderSynQuestion": "Return the number of  aerodromes.", "query": "SELECT count(*) FROM AIRPORTS", "Prediction": "COUNT(*) FROM airports;"}
{"db_id": "flight_2", "SpiderQuestion": "How many flights do we have?", "SpiderSynQuestion": "How many flights do we have?", "query": "SELECT count(*) FROM FLIGHTS", "Prediction": "COUNT(*) FROM flights;"}
{"db_id": "flight_2", "SpiderQuestion": "Return the number of flights.", "SpiderSynQuestion": "Return the number of flights.", "query": "SELECT count(*) FROM FLIGHTS", "Prediction": "COUNT(*) FROM flights;"}
{"db_id": "flight_2", "SpiderQuestion": "Which airline has abbreviation 'UAL'?", "SpiderSynQuestion": "Which airway can be shortened as word 'UAL'?", "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "Prediction": "Airline FROM airlines WHERE Abbreviation = 'UAL';"}
{"db_id": "flight_2", "SpiderQuestion": "Give the airline with abbreviation 'UAL'.", "SpiderSynQuestion": "Give the airway with abbreviation 'UAL'.", "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "Prediction": "Airline FROM airlines WHERE Abbreviation = 'UAL';"}
{"db_id": "flight_2", "SpiderQuestion": "How many airlines are from USA?", "SpiderSynQuestion": "How many airways are from USA?", "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "Prediction": "COUNT(*) FROM airlines WHERE Country = 'USA';"}
{"db_id": "flight_2", "SpiderQuestion": "Return the number of airlines in the USA.", "SpiderSynQuestion": "Return the number of airways in the USA.", "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "Prediction": "COUNT(*) FROM airlines WHERE Country = 'USA';"}
{"db_id": "flight_2", "SpiderQuestion": "Which city and country is the Alton airport at?", "SpiderSynQuestion": "Which town and State is the Alton airport at?", "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "Prediction": "City, CountryAbbrev FROM airports WHERE AirportName = 'Alton';"}
{"db_id": "flight_2", "SpiderQuestion": "Give the city and country for the Alton airport.", "SpiderSynQuestion": "Give the town and State for the Alton airport.", "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "Prediction": "City, Country FROM airports WHERE AirportCode = 'Alton';"}
{"db_id": "flight_2", "SpiderQuestion": "What is the airport name for airport 'AKO'?", "SpiderSynQuestion": "What is the aerodrome name for airport 'AKO'?", "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "Prediction": "AirportName FROM airports WHERE AirportCode = 'AKO';"}
{"db_id": "flight_2", "SpiderQuestion": "Return the name of the airport with code 'AKO'.", "SpiderSynQuestion": "Return the name of the aerodrome with code 'AKO'.", "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "Prediction": "AirportName FROM airports WHERE AirportCode = 'AKO';"}
{"db_id": "flight_2", "SpiderQuestion": "What are airport names at City 'Aberdeen'?", "SpiderSynQuestion": "What are aerodrome names at town 'Aberdeen'?", "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "Prediction": "AirportName FROM airports WHERE City = 'Aberdeen';"}
{"db_id": "flight_2", "SpiderQuestion": "What are the names of airports in Aberdeen?", "SpiderSynQuestion": "What are the names of aerodrome in Aberdeen?", "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "Prediction": "AirportName FROM airports WHERE City = 'Aberdeen';"}
{"db_id": "flight_2", "SpiderQuestion": "How many flights depart from 'APG'?", "SpiderSynQuestion": "How many flights depart from 'APG'?", "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "Prediction": "COUNT(*) FROM flights WHERE SourceAirport='APG';"}
{"db_id": "flight_2", "SpiderQuestion": "Count the number of flights departing from 'APG'.", "SpiderSynQuestion": "Count the amount of flights departing from 'APG'.", "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "Prediction": "COUNT(*) FROM flights WHERE SourceAirport='APG';"}
{"db_id": "flight_2", "SpiderQuestion": "How many flights have destination ATO?", "SpiderSynQuestion": "How many flights have terminal ATO?", "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "Prediction": "COUNT(*) FROM flights WHERE DestAirport = 'ATO' OR SourceAirport = 'ATO';"}
{"db_id": "flight_2", "SpiderQuestion": "Count the number of flights into ATO.", "SpiderSynQuestion": "Count the number of flights into ATO.", "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "Prediction": "COUNT(*) FROM flights JOIN airports ON flights.DestAirport=airports.AirportCode WHERE airports.AirportCode='ATO';"}
{"db_id": "flight_2", "SpiderQuestion": "How many flights depart from City Aberdeen?", "SpiderSynQuestion": "How many flights depart from City Aberdeen?", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "Prediction": "COUNT(*) FROM flights \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airports.City = 'Aberdeen';"}
{"db_id": "flight_2", "SpiderQuestion": "Return the number of flights departing from Aberdeen.", "SpiderSynQuestion": "Return the number of flights departing from Aberdeen.", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "Prediction": "COUNT(*) FROM flights \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airports.City = 'Aberdeen';"}
{"db_id": "flight_2", "SpiderQuestion": "How many flights arriving in Aberdeen city?", "SpiderSynQuestion": "How many flights arriving in Aberdeen city?", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "Prediction": "COUNT(*) FROM flights JOIN airports ON flights.DestAirport=airports.AirportCode WHERE airports.City='Aberdeen';"}
{"db_id": "flight_2", "SpiderQuestion": "Return the number of flights arriving in Aberdeen.", "SpiderSynQuestion": "Return the number of flights arriving in Aberdeen.", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "Prediction": "COUNT(*) FROM flights JOIN airports ON flights.DestAirport=airports.AirportCode WHERE airports.City='Aberdeen';"}
{"db_id": "flight_2", "SpiderQuestion": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "SpiderSynQuestion": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "Prediction": "COUNT(*) FROM flights \nJOIN airports ON flights.DestAirport=airports.AirportCode \nJOIN airports AS a2 ON flights.SourceAirport=a2.AirportCode \nWHERE airports.City='Ashley' AND a2.City='Aberdeen';"}
{"db_id": "flight_2", "SpiderQuestion": "How many flights fly from Aberdeen to Ashley?", "SpiderSynQuestion": "How many flights fly from Aberdeen to Ashley?", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "Prediction": "COUNT(*) FROM flights \nWHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') \nAND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley');"}
{"db_id": "flight_2", "SpiderQuestion": "How many flights does airline 'JetBlue Airways' have?", "SpiderSynQuestion": "How many flights does airway 'JetBlue Airways' have?", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "Prediction": "COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways';"}
{"db_id": "flight_2", "SpiderQuestion": "Give the number of Jetblue Airways flights.", "SpiderSynQuestion": "Give the number of Jetblue Airways flights.", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "Prediction": "COUNT(*) FROM flights WHERE Airline = 'Jetblue Airways';"}
{"db_id": "flight_2", "SpiderQuestion": "How many 'United Airlines' flights go to Airport 'ASY'?", "SpiderSynQuestion": "How many 'United Airlines' flights go to Airport 'ASY'?", "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "Prediction": "COUNT(*) FROM flights \nJOIN airlines ON flights.Airline = airlines.Airline \nWHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = 'ASY';"}
{"db_id": "flight_2", "SpiderQuestion": "Count the number of United Airlines flights arriving in ASY Airport.", "SpiderSynQuestion": "Count the number of United Airlines flights arriving in ASY Airport.", "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "Prediction": "COUNT(*) FROM flights \nJOIN airlines ON flights.Airline = airlines.Abbreviation \nJOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'ASY';"}
{"db_id": "flight_2", "SpiderQuestion": "How many 'United Airlines' flights depart from Airport 'AHD'?", "SpiderSynQuestion": "How many 'United Airlines' flights leave from Airport 'AHD'?", "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "Prediction": "COUNT(*) FROM flights \nWHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';"}
{"db_id": "flight_2", "SpiderQuestion": "Return the number of United Airlines flights leaving from AHD Airport.", "SpiderSynQuestion": "Return the number of United Airlines flights leaving from AHD Airport.", "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "Prediction": "COUNT(*) FROM flights \nWHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';"}
{"db_id": "flight_2", "SpiderQuestion": "How many United Airlines flights go to City 'Aberdeen'?", "SpiderSynQuestion": "How many United Airlines flights go to City 'Aberdeen'?", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "Prediction": "COUNT(*) FROM flights \nJOIN airlines ON flights.Airline = airlines.Abbreviation \nJOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';"}
{"db_id": "flight_2", "SpiderQuestion": "Count the number of United Airlines flights that arrive in Aberdeen.", "SpiderSynQuestion": "Count the number of United Airlines flights that arrive in Aberdeen.", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "Prediction": "COUNT(*) FROM flights \nJOIN airlines ON flights.Airline = airlines.Abbreviation \nJOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';"}
{"db_id": "flight_2", "SpiderQuestion": "Which city has most number of arriving flights?", "SpiderSynQuestion": "Which town has most number of arriving flights?", "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "Prediction": "airports.City FROM airports JOIN flights ON airports.AirportCode=flights.DestAirport GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1;"}
{"db_id": "flight_2", "SpiderQuestion": "Which city has the most frequent destination airport?", "SpiderSynQuestion": "Which town has the most frequent terminal aerodrome?", "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "Prediction": "airports.City\nFROM airports\nJOIN flights ON airports.AirportCode = flights.DestAirport OR airports.AirportCode = flights.SourceAirport\nGROUP BY airports.City\nORDER BY COUNT(*) DESC\nLIMIT 1;"}
{"db_id": "flight_2", "SpiderQuestion": "Which city has most number of departing flights?", "SpiderSynQuestion": "Which town has most number of departing flights?", "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "Prediction": "airports.City, COUNT(*) as num_flights\n FROM airports\n JOIN flights ON airports.AirportCode = flights.SourceAirport\n GROUP BY airports.City\n ORDER BY num_flights DESC\n LIMIT 1;"}
{"db_id": "flight_2", "SpiderQuestion": "Which city is the most frequent source airport?", "SpiderSynQuestion": "Which town is the most frequent source aerodrome?", "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "Prediction": "airports.City \nFROM airports \nJOIN flights ON airports.AirportCode = flights.SourceAirport \nGROUP BY airports.City \nORDER BY COUNT(*) DESC \nLIMIT 1;"}
{"db_id": "flight_2", "SpiderQuestion": "What is the code of airport that has the highest number of flights?", "SpiderSynQuestion": "What is the code of aerodrome that has the highest number of flights?", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "Prediction": "airports.AirportCode \nFROM flights \nJOIN airports ON flights.DestAirport=airports.AirportCode \nGROUP BY airports.AirportCode \nORDER BY COUNT(*) DESC \nLIMIT 1;"}
{"db_id": "flight_2", "SpiderQuestion": "What is the airport code of the airport with the most flights?", "SpiderSynQuestion": "What is the aerodrome code of the aerodrome with the most flights?", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "Prediction": "flights.DestAirport, COUNT(*) AS num_flights\n FROM flights\n GROUP BY flights.DestAirport\n ORDER BY num_flights DESC\n LIMIT 1;"}
{"db_id": "flight_2", "SpiderQuestion": "What is the code of airport that has fewest number of flights?", "SpiderSynQuestion": "What is the code of aerodrome that has fewest number of flights?", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "Prediction": "airports.AirportCode \nFROM airports \nLEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport \nGROUP BY airports.AirportCode \nORDER BY COUNT(flights.FlightNo) ASC \nLIMIT 1;"}
{"db_id": "flight_2", "SpiderQuestion": "Give the code of the airport with the least flights.", "SpiderSynQuestion": "Give the code of the aerodrome with the least flights.", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "Prediction": "airports.AirportCode \nFROM airports \nLEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport \nGROUP BY airports.AirportCode \nORDER BY COUNT(flights.FlightNo) ASC \nLIMIT 1;"}
{"db_id": "flight_2", "SpiderQuestion": "Which airline has most number of flights?", "SpiderSynQuestion": "Which airway has most number of flights?", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "Prediction": "Airline, COUNT(*) AS num_flights\n FROM flights\n GROUP BY Airline\n ORDER BY num_flights DESC\n LIMIT 1;"}
{"db_id": "flight_2", "SpiderQuestion": "What airline serves the most flights?", "SpiderSynQuestion": "What airway serves the most flights?", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "Prediction": "Airline, COUNT(*) AS num_flights\n FROM flights\n GROUP BY Airline\n ORDER BY num_flights DESC\n LIMIT 1;"}
{"db_id": "flight_2", "SpiderQuestion": "Find the abbreviation and country of the airline that has fewest number of flights?", "SpiderSynQuestion": "Find the shortened word and State of the airway that has fewest number of flights?", "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "Prediction": "Abbreviation, Country FROM airlines \nWHERE uid = (SELECT Airline FROM flights \n             GROUP BY Airline \n             ORDER BY COUNT(*) ASC \n             LIMIT 1);"}
{"db_id": "flight_2", "SpiderQuestion": "What is the abbreviation of the airilne has the fewest flights and what country is it in?", "SpiderSynQuestion": "What is the shortened word of the airway has the fewest flights and what State is it in?", "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "Prediction": "Abbreviation, airports.Country \n FROM airlines \n JOIN flights ON airlines.Airline = flights.Airline \n JOIN airports ON flights.DestAirport = airports.AirportCode \n GROUP BY airlines.Abbreviation \n ORDER BY COUNT(*) ASC \n LIMIT 1;"}
{"db_id": "flight_2", "SpiderQuestion": "What are airlines that have some flight departing from airport 'AHD'?", "SpiderSynQuestion": "What are airways that have some flight departing from aerodrome 'AHD'?", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "Prediction": "airlines.Airline \nFROM airlines \nJOIN flights ON airlines.Airline = flights.Airline \nWHERE flights.SourceAirport = 'AHD';"}
{"db_id": "flight_2", "SpiderQuestion": "Which airlines have a flight with source airport AHD?", "SpiderSynQuestion": "Which airways have a flight with source airport AHD?", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "Prediction": "Airline FROM flights WHERE SourceAirport='AHD';"}
{"db_id": "flight_2", "SpiderQuestion": "What are airlines that have flights arriving at airport 'AHD'?", "SpiderSynQuestion": "What are airways that have flights arriving at airport 'AHD'?", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "Prediction": "airlines.Airline \nFROM airlines \nJOIN flights ON airlines.uid = flights.Airline \nJOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airports.AirportCode = 'AHD';"}
{"db_id": "flight_2", "SpiderQuestion": "Which airlines have a flight with destination airport AHD?", "SpiderSynQuestion": "Which airways have a flight with terminal airport AHD?", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "Prediction": "Airline FROM flights WHERE DestAirport='AHD' OR SourceAirport='AHD';"}
{"db_id": "flight_2", "SpiderQuestion": "Find all airlines that have flights from both airports 'APG' and 'CVO'.", "SpiderSynQuestion": "Find all airways that have flights from both aerodromes 'APG' and 'CVO'.", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "Prediction": "airlines.Airline \n FROM airlines \n JOIN flights ON airlines.Airline = flights.Airline \n WHERE flights.SourceAirport = 'APG' \n AND airlines.Airline IN (SELECT airlines.Airline \n                          FROM airlines \n                          JOIN flights ON airlines.Airline = flights.Airline \n                          WHERE flights.SourceAirport = 'CVO');"}
{"db_id": "flight_2", "SpiderQuestion": "Which airlines have departing flights from both APG and CVO airports?", "SpiderSynQuestion": "Which airways have departing flights from both APG and CVO aerodromes?", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "Prediction": "airlines.Airline \nFROM airlines \nJOIN flights ON airlines.Airline = flights.Airline \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airports.AirportCode IN ('APG', 'CVO') \nGROUP BY airlines.Airline \nHAVING COUNT(DISTINCT airports.AirportCode) = 2;"}
{"db_id": "flight_2", "SpiderQuestion": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.", "SpiderSynQuestion": "Find all airways that have flights from airport 'CVO' but not from 'APG'.", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "Prediction": "airlines.Airline \nFROM airlines \nINNER JOIN flights ON airlines.uid = flights.Airline \nWHERE flights.SourceAirport = 'CVO' \nAND airlines.Airline NOT IN \n(SELECT airlines.Airline \nFROM airlines \nINNER JOIN flights ON airlines.uid = flights.Airline \nWHERE flights.SourceAirport = 'APG');"}
{"db_id": "flight_2", "SpiderQuestion": "Which airlines have departures from CVO but not from APG airports?", "SpiderSynQuestion": "Which airways have departures from CVO but not from APG airports?", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "Prediction": "Airline FROM flights \nWHERE SourceAirport='CVO' AND Airline NOT IN \n(SELECT Airline FROM flights WHERE SourceAirport='APG');"}
{"db_id": "flight_2", "SpiderQuestion": "Find all airlines that have at least 10 flights.", "SpiderSynQuestion": "Find all airways that have at least 10 flights.", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "Prediction": "Airline \nFROM flights \nGROUP BY Airline \nHAVING COUNT(*) >= 10;"}
{"db_id": "flight_2", "SpiderQuestion": "Which airlines have at least 10 flights?", "SpiderSynQuestion": "Which airways have at least 10 flights?", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "Prediction": "Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;"}
{"db_id": "flight_2", "SpiderQuestion": "Find all airlines that have fewer than 200 flights.", "SpiderSynQuestion": "Find all airways that have fewer than 200 flights.", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "Prediction": "Airline \nFROM airlines \nWHERE uid IN (\n    SELECT Airline \n    FROM flights \n    GROUP BY Airline \n    HAVING COUNT(*) < 200\n);"}
{"db_id": "flight_2", "SpiderQuestion": "Which airlines have less than 200 flights?", "SpiderSynQuestion": "Which airways have less than 200 flights?", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "Prediction": "Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200;"}
{"db_id": "flight_2", "SpiderQuestion": "What are flight numbers of Airline \"United Airlines\"?", "SpiderSynQuestion": "What are flight codes of airway \"United Airlines\"?", "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "Prediction": "FlightNo FROM flights WHERE Airline = \"United Airlines\";"}
{"db_id": "flight_2", "SpiderQuestion": "Which flight numbers correspond to United Airlines flights?", "SpiderSynQuestion": "Which flight codes correspond to United Airlines flights?", "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "Prediction": "FlightNo FROM flights WHERE Airline = 'United Airlines';"}
{"db_id": "flight_2", "SpiderQuestion": "What are flight numbers of flights departing from Airport \"APG\"?", "SpiderSynQuestion": "What are flight codes of flights departing from Airport \"APG\"?", "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "Prediction": "FlightNo FROM flights WHERE SourceAirport = \"APG\";"}
{"db_id": "flight_2", "SpiderQuestion": "Give the flight numbers of flights leaving from APG.", "SpiderSynQuestion": "Give the flight codes of flights leaving from APG.", "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "Prediction": "FlightNo FROM flights WHERE SourceAirport = 'APG';"}
{"db_id": "flight_2", "SpiderQuestion": "What are flight numbers of flights arriving at Airport \"APG\"?", "SpiderSynQuestion": "What are flight codes of flights arriving at Airport \"APG\"?", "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "Prediction": "flights.FlightNo FROM flights \nJOIN airports ON flights.DestAirport=airports.AirportCode \nWHERE airports.AirportCode=\"APG\";"}
{"db_id": "flight_2", "SpiderQuestion": "Give the flight numbers of flights landing at APG.", "SpiderSynQuestion": "Give the flight codes of flights landing at APG.", "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "Prediction": "flights.FlightNo \nFROM flights \nJOIN airports ON flights.DestAirport=airports.AirportCode \nWHERE airports.AirportName='APG';"}
{"db_id": "flight_2", "SpiderQuestion": "What are flight numbers of flights departing from City \"Aberdeen \"?", "SpiderSynQuestion": "What are flight codes of flights departing from City \"Aberdeen \"?", "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "Prediction": "flights.FlightNo \nFROM flights \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airports.City = \"Aberdeen\";"}
{"db_id": "flight_2", "SpiderQuestion": "Give the flight numbers of flights leaving from Aberdeen.", "SpiderSynQuestion": "Give the flight codes of flights leaving from Aberdeen.", "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "Prediction": "flights.FlightNo \n FROM flights \n JOIN airports ON flights.SourceAirport = airports.AirportCode \n WHERE airports.City = 'Aberdeen';"}
{"db_id": "flight_2", "SpiderQuestion": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "SpiderSynQuestion": "What are flight codes of flights arriving in City \"Aberdeen\"?", "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "Prediction": "flights.FlightNo \nFROM flights \nJOIN airports ON flights.DestAirport=airports.AirportCode \nWHERE airports.City='Aberdeen';"}
{"db_id": "flight_2", "SpiderQuestion": "Give the flight numbers of flights arriving in Aberdeen.", "SpiderSynQuestion": "Give the flight codes of flights arriving in Aberdeen.", "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "Prediction": "flights.FlightNo \n FROM flights \n JOIN airports ON flights.DestAirport=airports.AirportCode \n WHERE airports.City='Aberdeen';"}
{"db_id": "flight_2", "SpiderQuestion": "Find the number of flights landing in the city of Aberdeen or Abilene.", "SpiderSynQuestion": "Find the code of flights landing in the city of Aberdeen or Abilene.", "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "Prediction": "flights.FlightNo, flights.DestAirport \n FROM flights \n JOIN airports ON flights.DestAirport=airports.AirportCode \n WHERE airports.City='Aberdeen' OR airports.City='Abilene';"}
{"db_id": "flight_2", "SpiderQuestion": "How many flights land in Aberdeen or Abilene?", "SpiderSynQuestion": "How many flights land in Aberdeen or Abilene?", "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "Prediction": "COUNT(*) FROM flights \nWHERE DestAirport IN ('ABZ', 'ABI')"}
{"db_id": "flight_2", "SpiderQuestion": "Find the name of airports which do not have any flight in and out.", "SpiderSynQuestion": "Find the name of aerodromes which do not have any flight in and out.", "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "Prediction": "AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights);"}
{"db_id": "flight_2", "SpiderQuestion": "Which airports do not have departing or arriving flights?", "SpiderSynQuestion": "Which aerodromes do not have leaving or arriving flights?", "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "Prediction": "airports.AirportName \n FROM airports \n LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport \n WHERE flights.FlightNo IS NULL;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "How many employees are there?", "SpiderSynQuestion": "How many workers are there?", "query": "SELECT count(*) FROM employee", "Prediction": "COUNT(*) FROM employee;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Count the number of employees", "SpiderSynQuestion": "Count the number of staffs", "query": "SELECT count(*) FROM employee", "Prediction": "COUNT(*) FROM employee;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Sort employee names by their age in ascending order.", "SpiderSynQuestion": "Sort worker names by their age in ascending order.", "query": "SELECT name FROM employee ORDER BY age", "Prediction": "Name FROM employee ORDER BY Age ASC;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "List the names of employees and sort in ascending order of age.", "SpiderSynQuestion": "List the names of workers and sort in ascending order of age.", "query": "SELECT name FROM employee ORDER BY age", "Prediction": "Name FROM employee ORDER BY Age ASC;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "What is the number of employees from each city?", "SpiderSynQuestion": "What is the number of workers from each town?", "query": "SELECT count(*) ,  city FROM employee GROUP BY city", "Prediction": "City, COUNT(*) FROM employee GROUP BY City;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Count the number of employees for each city.", "SpiderSynQuestion": "Count the number of staffs for each town.", "query": "SELECT count(*) ,  city FROM employee GROUP BY city", "Prediction": "City, COUNT(*) AS Staff_Count FROM employee GROUP BY City;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Which cities do more than one employee under age 30 come from?", "SpiderSynQuestion": "Which towns do more than one staff under age 30 come from?", "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "Prediction": "employee.City\nFROM employee\nJOIN hiring ON employee.Employee_ID=hiring.Employee_ID\nWHERE employee.Age<30\nGROUP BY employee.City\nHAVING COUNT(DISTINCT employee.Employee_ID)>1;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Find the cities that have more than one employee under age 30.", "SpiderSynQuestion": "Find the towns that have more than one worker under age 30.", "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "Prediction": "employee.City\nFROM employee\nJOIN hiring ON employee.Employee_ID=hiring.Employee_ID\nWHERE employee.Age < 30\nGROUP BY employee.City\nHAVING COUNT(*) > 1;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Find the number of shops in each location.", "SpiderSynQuestion": "Find the number of shops in each city.", "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "Prediction": "City, COUNT(DISTINCT Shop_ID) FROM employee \nJOIN hiring ON employee.Employee_ID=hiring.Employee_ID \nJOIN shop ON hiring.Shop_ID=shop.Shop_ID \nGROUP BY City;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "How many shops are there in each location?", "SpiderSynQuestion": "How many stores are there in each city?", "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "Prediction": "shop.City, COUNT(DISTINCT shop.Shop_ID) \n FROM shop \n GROUP BY shop.City;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Find the manager name and district of the shop whose number of products is the largest.", "SpiderSynQuestion": "Find the head name and district of the shop whose number of commodities is the largest.", "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "Prediction": "shop.Manager_name, shop.District \n FROM shop \n WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop);"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "What are the manager name and district of the shop that sells the largest number of products?", "SpiderSynQuestion": "What are the director name and district of the market that sells the largest number of goods?", "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "Prediction": "shop.Manager_name, shop.District\n FROM shop\n WHERE shop.Number_products = (SELECT MAX(shop.Number_products) FROM shop)"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "find the minimum and maximum number of products of all stores.", "SpiderSynQuestion": "find the minimum and maximum number of merchandises of all stores.", "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "Prediction": "MIN(Number_products), MAX(Number_products) FROM shop;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "What are the minimum and maximum number of products across all the shops?", "SpiderSynQuestion": "What are the minimum and maximum number of goods across all the stores?", "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "Prediction": "MIN(Number_products), MAX(Number_products) FROM shop;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Return the name, location and district of all shops in descending order of number of products.", "SpiderSynQuestion": "Return the name, city and district of all markets in descending order of number of commodities.", "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "Prediction": "Name, Location, District \n FROM shop \n ORDER BY Number_products DESC;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "SpiderSynQuestion": "Sort all the stores by number merchandises in descending order, and return the name, city and district of each store.", "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "Prediction": "Name, Location, District FROM shop ORDER BY Number_products DESC;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Find the names of stores whose number products is more than the average number of products.", "SpiderSynQuestion": "Find the names of stores whose number merchandises is more than the average number of merchandises.", "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "Prediction": "Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Which shops' number products is above the average? Give me the shop names.", "SpiderSynQuestion": "Which shops' number goods is above the average? Give me the store names.", "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "Prediction": "Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "find the name of employee who was awarded the most times in the evaluation.", "SpiderSynQuestion": "find the name of staff who was awarded the most times in the assessment.", "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "Prediction": "employee.Name\nFROM employee\nJOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID\nGROUP BY employee.Employee_ID\nORDER BY COUNT(evaluation.Year_awarded) DESC\nLIMIT 1;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Which employee received the most awards in evaluations? Give me the employee name.", "SpiderSynQuestion": "Which worker received the most awards in assessments? Give me the worker name.", "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "Prediction": "employee.Name \nFROM employee \nJOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID \nGROUP BY employee.Employee_ID \nORDER BY COUNT(evaluation.Year_awarded) DESC \nLIMIT 1;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Find the name of the employee who got the highest one time bonus.", "SpiderSynQuestion": "Find the name of the worker who got the highest one time premium.", "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "Prediction": "employee.Name\nFROM employee\nJOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID\nWHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation)"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Which employee received the biggest bonus? Give me the employee name.", "SpiderSynQuestion": "Which worker received the biggest extra prize? Give me the worker name.", "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "Prediction": "employee.Name\nFROM employee\nJOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID\nORDER BY evaluation.Bonus DESC\nLIMIT 1;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Find the names of employees who never won any award in the evaluation.", "SpiderSynQuestion": "Find the names of staffs who never won any award in the assessment.", "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "Prediction": "employee.Name \nFROM employee \nLEFT JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID \nWHERE evaluation.Employee_ID IS NULL;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "What are the names of the employees who never received any evaluation?", "SpiderSynQuestion": "What are the names of the staffs who never received any assessment?", "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "Prediction": "employee.Name \nFROM employee \nLEFT JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID \nWHERE evaluation.Employee_ID IS NULL;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "What is the name of the shop that is hiring the largest number of employees?", "SpiderSynQuestion": "What is the name of the store that is hiring the largest number of workers?", "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "shop.Name \nFROM shop \nJOIN hiring ON shop.Shop_ID=hiring.Shop_ID \nGROUP BY shop.Name \nORDER BY COUNT(hiring.Employee_ID) DESC \nLIMIT 1;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Which shop has the most employees? Give me the shop name.", "SpiderSynQuestion": "Which shop has the most workers? Give me the store name.", "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "shop.Name \nFROM shop \nJOIN hiring ON shop.Shop_ID=hiring.Shop_ID \nGROUP BY shop.Name \nORDER BY COUNT(hiring.Employee_ID) DESC \nLIMIT 1;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Find the name of the shops that do not hire any employee.", "SpiderSynQuestion": "Find the name of the stores that do not hire any people.", "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "Prediction": "shop.Name \nFROM shop \nLEFT JOIN hiring ON shop.Shop_ID=hiring.Shop_ID \nWHERE hiring.Employee_ID IS NULL;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Which shops run with no employees? Find the shop names", "SpiderSynQuestion": "Which stores run with no workers? Find the store names", "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "Prediction": "shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID=hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Find the number of employees hired in each shop; show the shop name as well.", "SpiderSynQuestion": "Find the number of staffs hired in each store; show the store name as well.", "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "Prediction": "shop.Name, COUNT(hiring.Employee_ID) AS num_staff_hired\n FROM hiring\n JOIN shop ON hiring.Shop_ID = shop.Shop_ID\n GROUP BY shop.Name;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "For each shop, return the number of employees working there and the name of the shop.", "SpiderSynQuestion": "For each store, return the number of people working there and the name of the store.", "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "Prediction": "shop.Name, COUNT(hiring.Employee_ID) AS num_employees\n FROM shop\n JOIN hiring ON shop.Shop_ID=hiring.Shop_ID\n GROUP BY shop.Name;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "What is total bonus given in all evaluations?", "SpiderSynQuestion": "What is total premium given in all assessments?", "query": "SELECT sum(bonus) FROM evaluation", "Prediction": "SUM(Bonus) FROM evaluation;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Find the total amount of bonus given in all the evaluations.", "SpiderSynQuestion": "Find the total amount of extra prize given in all the assessments.", "query": "SELECT sum(bonus) FROM evaluation", "Prediction": "SUM(Bonus) FROM evaluation;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Give me all the information about hiring.", "SpiderSynQuestion": "Give me all the information about hiring.", "query": "SELECT * FROM hiring", "Prediction": "* FROM hiring;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "What is all the information about hiring?", "SpiderSynQuestion": "What is all the information about hiring?", "query": "SELECT * FROM hiring", "Prediction": "* FROM hiring;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "SpiderSynQuestion": "Which district has both stores with less than 3000 goods and stores with more than 10000 goods?", "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "Prediction": "District \nFROM shop \nWHERE Number_products < 3000 \nINTERSECT \nSELECT District \nFROM shop \nWHERE Number_products > 10000;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "SpiderSynQuestion": "Find the districts in which there are both shops selling less than 3000 goods and markets selling more than 10000 goods.", "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "Prediction": "DISTINCT shop.District \n FROM shop \n JOIN hiring ON shop.Shop_ID=hiring.Shop_ID \n WHERE shop.Number_products<3000 AND EXISTS \n (SELECT * FROM shop \n JOIN hiring ON shop.Shop_ID=hiring.Shop_ID \n WHERE shop.Number_products>10000 AND shop.District=hiring.District);"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "How many different store locations are there?", "SpiderSynQuestion": "How many different store city are there?", "query": "SELECT count(DISTINCT LOCATION) FROM shop", "Prediction": "COUNT(DISTINCT Location) FROM shop;"}
{"db_id": "employee_hire_evaluation", "SpiderQuestion": "Count the number of distinct store locations.", "SpiderSynQuestion": "Count the number of distinct store city.", "query": "SELECT count(DISTINCT LOCATION) FROM shop", "Prediction": "COUNT(DISTINCT Location) FROM shop;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "How many documents do we have?", "SpiderSynQuestion": "How many papers do we have?", "query": "SELECT count(*) FROM Documents", "Prediction": "COUNT(*) FROM Documents;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Count the number of documents.", "SpiderSynQuestion": "Count the number of papers.", "query": "SELECT count(*) FROM Documents", "Prediction": "COUNT(*) FROM Documents;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "List document IDs, document names, and document descriptions for all documents.", "SpiderSynQuestion": "List paper IDs, paper names, and paper descriptions for all papers.", "query": "SELECT document_id ,  document_name ,  document_description FROM Documents", "Prediction": "Document_ID, Document_Name, Document_Description FROM Documents;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What are the ids, names, and descriptions for all documents?", "SpiderSynQuestion": "What are the ids, names, and descriptions for all papers?", "query": "SELECT document_id ,  document_name ,  document_description FROM Documents", "Prediction": "Document_ID, Document_Name, Document_Description FROM Documents;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What is the document name and template id for document with description with the letter 'w' in it?", "SpiderSynQuestion": "What is the document name and layout id for document with description with the letter 'w' in it?", "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "Prediction": "Documents.Document_Name, Templates.Template_ID\n FROM Documents\n JOIN Templates ON Documents.Template_ID=Templates.Template_ID\n WHERE Documents.Document_Description LIKE '%w%';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Return the names and template ids for documents that contain the letter w in their description.", "SpiderSynQuestion": "Return the names and layout ids for papers that contain the letter w in their describing content.", "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "Prediction": "Documents.Document_Name, Documents.Template_ID\n FROM Documents\n WHERE Documents.Document_Description LIKE '%w%';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What is the document id, template id and description for document named \"Robbin CV\"?", "SpiderSynQuestion": "What is the paper id, layout id and describing content for paper named \"Robbin CV\"?", "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "Prediction": "Documents.Document_ID, Templates.Template_ID, Documents.Document_Description\n FROM Documents\n JOIN Templates ON Documents.Template_ID = Templates.Template_ID\n WHERE Documents.Document_Name = \"Robbin CV\";"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Return the document id, template id, and description for the document with the name Robbin CV.", "SpiderSynQuestion": "Return the paper id, layout id, and describing details for the paper with the name Robbin CV.", "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "Prediction": "Documents.Document_ID, Templates.Template_ID, Documents.Other_Details\n FROM Documents\n JOIN Templates ON Documents.Template_ID = Templates.Template_ID\n WHERE Documents.Document_Name = 'Robbin CV';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "How many different templates do all document use?", "SpiderSynQuestion": "How many different layout do all document use?", "query": "SELECT count(DISTINCT template_id) FROM Documents", "Prediction": "COUNT(DISTINCT Templates.Template_Type_Code) FROM Templates JOIN Documents ON Templates.Template_ID=Documents.Template_ID JOIN Paragraphs ON Documents.Document_ID=Paragraphs.Document_ID;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Count the number of different templates used for documents.", "SpiderSynQuestion": "Count the number of different layout used for text files.", "query": "SELECT count(DISTINCT template_id) FROM Documents", "Prediction": "COUNT(DISTINCT Documents.Template_ID) FROM Documents WHERE Documents.Template_ID LIKE '%text%';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "How many documents are using the template with type code 'PPT'?", "SpiderSynQuestion": "How many text files are using the layout with type code 'PPT'?", "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "Prediction": "COUNT(*) FROM Documents \nJOIN Templates ON Documents.Template_ID=Templates.Template_ID \nWHERE Templates.Template_Type_Code='PPT' AND Documents.Other_Details LIKE '%.txt';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Count the number of documents that use the PPT template type.", "SpiderSynQuestion": "Count the number of text files that use the PPT template type.", "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "Prediction": "COUNT(*) FROM Documents \nJOIN Templates ON Documents.Template_ID=Templates.Template_ID \nJOIN Ref_Template_Types ON Templates.Template_Type_Code=Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description='PPT' AND Documents.Other_Details LIKE '%.txt';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Show all template ids and number of documents using each template.", "SpiderSynQuestion": "Show all layout ids and number of text files using each layout.", "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "Prediction": "Templates.Template_ID, COUNT(DISTINCT Documents.Document_ID) \n FROM Templates \n JOIN Documents ON Documents.Template_ID = Templates.Template_ID \n GROUP BY Templates.Template_ID;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What are all different template ids used for documents, and how many times were each of them used?", "SpiderSynQuestion": "What are all different layout ids used for papers, and how many times were each of them used?", "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "Prediction": "Template_Details, COUNT(*) FROM Templates WHERE Template_Type_Code = 'paper' GROUP BY Template_Details;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What is the id and type code for the template used by the most documents?", "SpiderSynQuestion": "What is the id and type for the layout used by the most papers?", "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Templates.Template_ID, Templates.Template_Type_Code\n FROM Templates\n WHERE Templates.Template_ID = (\n     SELECT Documents.Template_ID\n     FROM Documents\n     GROUP BY Documents.Template_ID\n     ORDER BY COUNT(*) DESC\n     LIMIT 1\n )"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Return the id and type code of the template that is used for the greatest number of documents.", "SpiderSynQuestion": "Return the id and type of the layout that is used for the greatest number of papers.", "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Templates.Template_Type_Code, COUNT(Documents.Document_ID) AS num_papers\n FROM Documents\n JOIN Templates ON Documents.Template_ID = Templates.Template_ID\n GROUP BY Templates.Template_Type_Code\n ORDER BY num_papers DESC\n LIMIT 1;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Show ids for all templates that are used by more than one document.", "SpiderSynQuestion": "Show ids for all layouts that are used by more than one text file.", "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "Prediction": "Templates.Template_ID \nFROM Templates \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nGROUP BY Templates.Template_ID \nHAVING COUNT(DISTINCT Documents.Document_ID) > 1;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What are the template ids of any templates used in more than a single document?", "SpiderSynQuestion": "What are the template ids of any templates used in more than a single paper?", "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "Prediction": "Templates.Template_ID\nFROM Templates\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID\nHAVING COUNT(DISTINCT Documents.Document_ID) > 1;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Show ids for all templates not used by any document.", "SpiderSynQuestion": "Show ids for all templates not used by any text file.", "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "Prediction": "Templates.Template_ID \nFROM Templates \nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_ID IS NULL;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What are the ids for templates that are not used in any documents?", "SpiderSynQuestion": "What are the ids for layout that are not used in any papers?", "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "Prediction": "Templates.Template_ID \nFROM Templates \nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Template_ID IS NULL AND Templates.Template_Type_Code = 'layout';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "How many templates do we have?", "SpiderSynQuestion": "How many layout do we have?", "query": "SELECT count(*) FROM Templates", "Prediction": "COUNT(DISTINCT Template_Type_Code) FROM Templates;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Count the number of templates.", "SpiderSynQuestion": "Count the number of layout.", "query": "SELECT count(*) FROM Templates", "Prediction": "COUNT(*) FROM Templates WHERE Template_Type_Code = 'layout';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Show template ids, version numbers, and template type codes for all templates.", "SpiderSynQuestion": "Show layout ids, version numbers, and layout type for all layout.", "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "Prediction": "Templates.Template_ID, Templates.Version_Number, Ref_Template_Types.Template_Type_Description\n FROM Templates\n JOIN Ref_Template_Types ON Templates.Template_Type_Code=Ref_Template_Types.Template_Type_Code;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What are the ids, version numbers, and type codes for each template?", "SpiderSynQuestion": "What are the ids, edition numbers, and type name for each layout?", "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "Prediction": "Templates.Template_ID, Templates.Version_Number, Ref_Template_Types.Template_Type_Description\n FROM Templates\n JOIN Ref_Template_Types ON Templates.Template_Type_Code=Ref_Template_Types.Template_Type_Code;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Show all distinct template type codes for all templates.", "SpiderSynQuestion": "Show all distinct layout type names for all layout.", "query": "SELECT DISTINCT template_type_code FROM Templates", "Prediction": "DISTINCT Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code=Ref_Template_Types.Template_Type_Code;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What are the different template type codes?", "SpiderSynQuestion": "What are the different layout type names?", "query": "SELECT DISTINCT template_type_code FROM Templates", "Prediction": "Template_Type_Description FROM Ref_Template_Types;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What are the ids of templates with template type code PP or PPT?", "SpiderSynQuestion": "What are the ids of layout with layout type code PP or PPT?", "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "Prediction": "Templates.Template_ID \nFROM Templates \nINNER JOIN Ref_Template_Types \nON Templates.Template_Type_Code=Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Code='PP' OR Ref_Template_Types.Template_Type_Code='PPT';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Return the ids of templates that have the code PP or PPT.", "SpiderSynQuestion": "Return the ids of layout that have the code PP or PPT.", "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "Prediction": "Templates.Template_ID\nFROM Templates\nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code=Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Code IN ('PP', 'PPT');"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "How many templates have template type code CV?", "SpiderSynQuestion": "How many layout have template type code CV?", "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "Prediction": "COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Count the number of templates of the type CV.", "SpiderSynQuestion": "Count the number of layout of the type CV.", "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "Prediction": "COUNT(*) FROM Templates \nWHERE Template_Type_Code = 'CV';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What is the version number and template type code for the template with version number later than 5?", "SpiderSynQuestion": "What is the edition number and layout type for the layout with edition number later than 5?", "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "Prediction": "Templates.Version_Number, Templates.Template_Type_Code \n FROM Templates \n WHERE Templates.Version_Number > 5;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Return the version numbers and template type codes of templates with a version number greater than 5.", "SpiderSynQuestion": "Return the edition numbers and layout type names of layout with a edition number greater than 5.", "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "Prediction": "Templates.Version_Number, Ref_Template_Types.Template_Type_Description\n FROM Templates\n JOIN Ref_Template_Types ON Templates.Template_Type_Code=Ref_Template_Types.Template_Type_Code\n WHERE Templates.Version_Number > 5;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Show all template type codes and number of templates for each.", "SpiderSynQuestion": "Show all layout type codes and number of layout for each.", "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "Prediction": "Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Number_of_Layouts\n FROM Ref_Template_Types\n LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\n GROUP BY Ref_Template_Types.Template_Type_Code;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What are the different template type codes, and how many templates correspond to each?", "SpiderSynQuestion": "What are the different layout type, and how many layout correspond to each?", "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "Prediction": "Templates.Template_Type_Code, COUNT(Templates.Template_ID) \n FROM Templates \n JOIN Ref_Template_Types ON Templates.Template_Type_Code=Ref_Template_Types.Template_Type_Code \n GROUP BY Templates.Template_Type_Code;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Which template type code has most number of templates?", "SpiderSynQuestion": "Which layout type code has most number of layout?", "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "Prediction": "Templates.Template_Type_Code, COUNT(Templates.Template_ID) AS Layout_Count\nFROM Templates\nGROUP BY Templates.Template_Type_Code\nORDER BY Layout_Count DESC\nLIMIT 1;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Return the type code of the template type that the most templates belong to.", "SpiderSynQuestion": "Return the type name of the layout type that the most layout belong to.", "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "Prediction": "Ref_Template_Types.Template_Type_Description\nFROM Templates\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nJOIN Documents ON Documents.Template_ID = Templates.Template_ID\nGROUP BY Templates.Template_Type_Code\nORDER BY COUNT(Documents.Document_ID) DESC\nLIMIT 1;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Show all template type codes with less than three templates.", "SpiderSynQuestion": "Show all layout types with less than three layouts.", "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "Prediction": "Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description\n FROM Ref_Template_Types\n LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\n GROUP BY Ref_Template_Types.Template_Type_Code\n HAVING COUNT(Templates.Template_ID) < 3;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What are the codes of template types that have fewer than 3 templates?", "SpiderSynQuestion": "What are the names of layout types that have fewer than 3 layouts?", "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "Prediction": "Ref_Template_Types.Template_Type_Description \n FROM Templates \n INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code=Ref_Template_Types.Template_Type_Code \n GROUP BY Templates.Template_Type_Code \n HAVING COUNT(Templates.Template_ID) < 3;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What the smallest version number and its template type code?", "SpiderSynQuestion": "What the smallest edition number and its layout type code?", "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "Prediction": "MIN(Version_Number), Template_Type_Code FROM Templates;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Return the lowest version number, along with its corresponding template type code.", "SpiderSynQuestion": "Return the lowest edition number, along with its corresponding layout type code.", "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "Prediction": "MIN(Version_Number), Template_Type_Code FROM Templates \nJOIN Ref_Template_Types ON Templates.Template_Type_Code=Ref_Template_Types.Template_Type_Code;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What is the template type code of the template used by document with the name \"Data base\"?", "SpiderSynQuestion": "What is the layout type code of the layout used by layout with the name \"Data base\"?", "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "Prediction": "Ref_Layout_Types.Layout_Type_Code \n FROM Layouts \n JOIN Ref_Layout_Types ON Layouts.Layout_Type_Code=Ref_Layout_Types.Layout_Type_Code \n WHERE Layouts.Layout_Name='Data base';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Return the template type code of the template that is used by a document named Data base.", "SpiderSynQuestion": "Return the layout type code of the layout that is used by a text file named Data base.", "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "Prediction": "Templates.Template_Type_Code\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Documents.Document_Name = 'Data base';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Show all document names using templates with template type code BK.", "SpiderSynQuestion": "Show all text file names using layout with layout type code BK.", "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "Prediction": "Documents.Document_Name \nFROM Documents \nJOIN Templates ON Documents.Template_ID=Templates.Template_ID \nWHERE Templates.Template_Type_Code='BK' AND Documents.Document_Name LIKE '%.txt%';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What are the names of documents that use templates with the code BK?", "SpiderSynQuestion": "What are the names of papers that use layouts with the code BK?", "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "Prediction": "Documents.Document_Name \nFROM Documents \nJOIN Templates ON Documents.Template_ID=Templates.Template_ID \nJOIN Ref_Template_Types ON Templates.Template_Type_Code=Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Code='BK';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Show all template type codes and the number of documents using each type.", "SpiderSynQuestion": "Show all layout type names and the number of papers using each type.", "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "Prediction": "Ref_Template_Types.Template_Type_Description, COUNT(DISTINCT Documents.Document_ID)\n FROM Templates\n JOIN Ref_Template_Types ON Templates.Template_Type_Code=Ref_Template_Types.Template_Type_Code\n JOIN Documents ON Documents.Template_ID=Templates.Template_ID\n GROUP BY Ref_Template_Types.Template_Type_Description;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What are the different template type codes, and how many documents use each type?", "SpiderSynQuestion": "What are the different layout types, and how many papers use each type?", "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "Prediction": "Templates.Template_Type_Description, COUNT(DISTINCT Documents.Document_ID) \n FROM Templates \n JOIN Documents ON Templates.Template_ID=Documents.Template_ID \n JOIN Ref_Template_Types ON Templates.Template_Type_Code=Ref_Template_Types.Template_Type_Code \n GROUP BY Templates.Template_Type_Description;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Which template type code is used by most number of documents?", "SpiderSynQuestion": "Which layout type is used by most number of text files?", "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "Prediction": "Templates.Template_Type_Code, COUNT(*) AS num_files\n FROM Documents\n JOIN Templates ON Documents.Template_ID=Templates.Template_ID\n WHERE Documents.Document_Name LIKE '%.txt'\n GROUP BY Templates.Template_Type_Code\n ORDER BY num_files DESC\n LIMIT 1;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Return the code of the template type that is most commonly used in documents.", "SpiderSynQuestion": "Return the code of the layout type that is most commonly used in text files.", "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "Prediction": "Templates.Template_Type_Code\nFROM Templates\nJOIN Documents ON Documents.Template_ID = Templates.Template_ID\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Description = 'text'\nGROUP BY Templates.Template_Type_Code\nORDER BY COUNT(*) DESC\nLIMIT 1;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Show all template type codes that are not used by any document.", "SpiderSynQuestion": "Show all layout types that are not used by any text file.", "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "Prediction": "Ref_Template_Types.Template_Type_Code \n FROM Ref_Template_Types \n LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code \n WHERE Templates.Template_Type_Code IS NULL;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What are the codes of template types that are not used for any document?", "SpiderSynQuestion": "What are the names of layout types that are not used for any text file?", "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "Prediction": "Ref_Template_Types.Template_Type_Description \n FROM Ref_Template_Types \n WHERE Ref_Template_Types.Template_Type_Code NOT IN \n (SELECT Templates.Template_Type_Code FROM Templates \n JOIN Documents ON Templates.Template_ID=Documents.Template_ID \n WHERE Documents.Document_Name LIKE '%.txt%');"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Show all template type codes and descriptions.", "SpiderSynQuestion": "Show all layout type names and describing details.", "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "Prediction": "Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What are the type codes and descriptions for all template types?", "SpiderSynQuestion": "What are the type names and describing details for all layout types?", "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "Prediction": "Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description \n FROM Ref_Template_Types \n WHERE Ref_Template_Types.Template_Type_Description LIKE '%layout%';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What is the template type descriptions for template type code \"AD\".", "SpiderSynQuestion": "What is the layout type describing content for layout type code \"AD\".", "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "Prediction": "Template_Type_Description \n FROM Ref_Template_Types \n WHERE Template_Type_Code = \"AD\";"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Return the template type description of the template type with the code AD.", "SpiderSynQuestion": "Return the layout type describing content of the layout type with the code AD.", "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "Prediction": "Template_Type_Description \nFROM Templates \nJOIN Ref_Template_Types \nON Templates.Template_Type_Code=Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Code='AD';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What is the template type code for template type description \"Book\".", "SpiderSynQuestion": "What is the layout type name for layout type description \"Book\".", "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "Prediction": "Ref_Template_Types.Template_Type_Code \n FROM Ref_Template_Types \n WHERE Ref_Template_Types.Template_Type_Description = \"Book\";"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Return the type code of the template type with the description \"Book\".", "SpiderSynQuestion": "Return the type of the layout type with the description \"Book\".", "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "Prediction": "Ref_Template_Types.Template_Type_Code \n FROM Templates \n JOIN Ref_Template_Types \n ON Templates.Template_Type_Code=Ref_Template_Types.Template_Type_Code \n WHERE Ref_Template_Types.Template_Type_Description='Book';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What are the distinct template type descriptions for the templates ever used by any document?", "SpiderSynQuestion": "What are the distinct layout type descriptions for the layouts ever used by any text file?", "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "Prediction": "DISTINCT Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Return the different descriptions for templates that have been used in a document.", "SpiderSynQuestion": "Return the different describing content for layouts that have been used in a text file.", "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "Prediction": "Documents.Document_Description\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Description = 'text file';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What are the template ids with template type description \"Presentation\".", "SpiderSynQuestion": "What are the layout ids with layout type describing content \"Presentation\".", "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "Prediction": "Templates.Template_ID \nFROM Templates \nJOIN Ref_Template_Types \nON Templates.Template_Type_Code=Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description='Presentation';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Return the ids corresponding to templates with the description 'Presentation'.", "SpiderSynQuestion": "Return the ids corresponding to layouts with the describing content 'Presentation'.", "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "Prediction": "Templates.Template_ID\nFROM Templates\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "How many paragraphs in total?", "SpiderSynQuestion": "How many paragraphs in total?", "query": "SELECT count(*) FROM Paragraphs", "Prediction": "COUNT(*) FROM Paragraphs;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Count the number of paragraphs.", "SpiderSynQuestion": "Count the number of paragraphs.", "query": "SELECT count(*) FROM Paragraphs", "Prediction": "COUNT(*) FROM Paragraphs;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "How many paragraphs for the document with name 'Summer Show'?", "SpiderSynQuestion": "How many paragraphs for the text file with name 'Summer Show'?", "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "Prediction": "COUNT(*) FROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Summer Show';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Count the number of paragraphs in the document named 'Summer Show'.", "SpiderSynQuestion": "Count the number of paragraphs in the text file named 'Summer Show'.", "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "Prediction": "COUNT(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show');"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Show paragraph details for paragraph with text 'Korea'.", "SpiderSynQuestion": "Show paragraph details for paragraph with text 'Korea'.", "query": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'", "Prediction": "* FROM Paragraphs WHERE Paragraph_Text = 'Korea';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What are the details for the paragraph that includes the text 'Korea'?", "SpiderSynQuestion": "What are the details for the paragraph that includes the text 'Korea'?", "query": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'", "Prediction": "* FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "SpiderSynQuestion": "Show all paragraph ids and content for the text file with name 'Welcome to NY'.", "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "Prediction": "Paragraph_ID, Paragraph_Text \n FROM Paragraphs \n WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY');"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "SpiderSynQuestion": "What are the ids and content of paragraphs in the text file titled 'Welcome to NY'?", "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "Prediction": "Paragraph_ID, Paragraph_Text \n FROM Paragraphs \n WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY');"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Show all paragraph texts for the document \"Customer reviews\".", "SpiderSynQuestion": "Show all paragraph content for the text file \"Customer reviews\".", "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "Prediction": "Paragraph_Text FROM Paragraphs \n JOIN Documents ON Paragraphs.Document_ID=Documents.Document_ID \n WHERE Documents.Document_Name=\"Customer reviews\";"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What are the paragraph texts for the document with the name 'Customer reviews'?", "SpiderSynQuestion": "What are the paragraph content for the text file with the name 'Customer reviews'?", "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "Prediction": "Paragraph_Text FROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Customer reviews';"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Show all document ids and the number of paragraphs in each document. Order by document id.", "SpiderSynQuestion": "Show all paper ids and the number of paragraphs in each text file. Order by paper id.", "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "Prediction": "Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS num_paragraphs\n FROM Documents\n JOIN Paragraphs ON Paragraphs.Document_ID=Documents.Document_ID\n GROUP BY Documents.Document_ID\n ORDER BY Documents.Document_ID;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "SpiderSynQuestion": "Return the different paper ids along with the number of paragraphs corresponding to each, ordered by id.", "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "Prediction": "Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS num_paragraphs\n FROM Documents\n JOIN Paragraphs ON Paragraphs.Document_ID=Documents.Document_ID\n GROUP BY Documents.Document_ID\n ORDER BY Documents.Document_ID;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Show all document ids, names and the number of paragraphs in each document.", "SpiderSynQuestion": "Show all text file ids, names and the number of paragraphs in each paper.", "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "Prediction": "Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count\n FROM Documents\n JOIN Paragraphs ON Paragraphs.Document_ID=Documents.Document_ID\n WHERE Documents.Template_ID = 'text'\n GROUP BY Documents.Document_ID;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What are the ids and names of each document, as well as the number of paragraphs in each?", "SpiderSynQuestion": "What are the ids and names of each paper, as well as the number of paragraphs in each?", "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "Prediction": "Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS num_paragraphs\n FROM Documents\n JOIN Paragraphs ON Paragraphs.Document_ID=Documents.Document_ID\n GROUP BY Documents.Document_ID;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "List all document ids with at least two paragraphs.", "SpiderSynQuestion": "List all name ids with at least two paragraphs.", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "Prediction": "Documents.Document_Name, Documents.Document_ID\n FROM Documents\n JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\n GROUP BY Documents.Document_Name, Documents.Document_ID\n HAVING COUNT(Paragraphs.Paragraph_ID) >= 2;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What are the ids of documents that have 2 or more paragraphs?", "SpiderSynQuestion": "What are the ids of text files that have 2 or more paragraphs?", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "Prediction": "Documents.Document_ID \nFROM Documents \nINNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nGROUP BY Documents.Document_ID \nHAVING COUNT(Paragraphs.Paragraph_ID) >= 2;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What is the document id and name with greatest number of paragraphs?", "SpiderSynQuestion": "What is the text file id and name with greatest number of paragraphs?", "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Documents.Document_ID, Documents.Document_Name\n FROM Documents\n JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\n GROUP BY Documents.Document_ID\n ORDER BY COUNT(Paragraphs.Paragraph_ID) DESC\n LIMIT 1;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Return the id and name of the document with the most paragraphs.", "SpiderSynQuestion": "Return the id and name of the paper with the most paragraphs.", "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Documents.Document_ID, Documents.Document_Name\n FROM Documents\n JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\n GROUP BY Documents.Document_ID\n ORDER BY COUNT(Paragraphs.Paragraph_ID) DESC\n LIMIT 1;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What is the document id with least number of paragraphs?", "SpiderSynQuestion": "What is the paper id with least number of paragraphs?", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "Prediction": "Documents.Document_ID \nFROM Documents \nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nGROUP BY Documents.Document_ID \nORDER BY COUNT(Paragraphs.Paragraph_ID) ASC \nLIMIT 1;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Return the id of the document with the fewest paragraphs.", "SpiderSynQuestion": "Return the id of the paper with the fewest paragraphs.", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "Prediction": "Documents.Document_ID\nFROM Documents\nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nORDER BY COUNT(Paragraphs.Paragraph_ID) ASC\nLIMIT 1;"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What is the document id with 1 to 2 paragraphs?", "SpiderSynQuestion": "What is the paper id with 1 to 2 paragraphs?", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "Prediction": "Documents.Document_ID\nFROM Documents\nWHERE Documents.Document_ID IN (\n    SELECT Paragraphs.Document_ID\n    FROM Paragraphs\n    GROUP BY Paragraphs.Document_ID\n    HAVING COUNT(*) BETWEEN 1 AND 2\n);"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Give the ids of documents that have between one and two paragraphs.", "SpiderSynQuestion": "Give the ids of text files that have between one and two paragraphs.", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "Prediction": "Documents.Document_ID \nFROM Documents \nWHERE Documents.Template_ID = 'text' \nAND Documents.Document_ID IN \n(SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2);"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "SpiderSynQuestion": "Show the paper id with paragraph text 'Brazil' and 'Ireland'.", "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "Prediction": "Documents.Document_ID \nFROM Documents \nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland');"}
{"db_id": "cre_Doc_Template_Mgt", "SpiderQuestion": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "SpiderSynQuestion": "What are the ids of text files that contain the paragraph text 'Brazil' and 'Ireland'?", "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "Prediction": "Documents.Document_ID \nFROM Documents \nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE Paragraphs.Paragraph_Text LIKE '%Brazil%' AND Paragraphs.Paragraph_Text LIKE '%Ireland%';"}
{"db_id": "course_teach", "SpiderQuestion": "How many teachers are there?", "SpiderSynQuestion": "How many instructors are there?", "query": "SELECT count(*) FROM teacher", "Prediction": "COUNT(*) FROM teacher;"}
{"db_id": "course_teach", "SpiderQuestion": "What is the total count of teachers?", "SpiderSynQuestion": "What is the total count of faculties?", "query": "SELECT count(*) FROM teacher", "Prediction": "COUNT(*) FROM teacher;"}
{"db_id": "course_teach", "SpiderQuestion": "List the names of teachers in ascending order of age.", "SpiderSynQuestion": "List the names of faculties in ascending order of age.", "query": "SELECT Name FROM teacher ORDER BY Age ASC", "Prediction": "Name FROM teacher ORDER BY Age ASC;"}
{"db_id": "course_teach", "SpiderQuestion": "What are the names of the teachers ordered by ascending age?", "SpiderSynQuestion": "What are the names of the faculties ordered by ascending age?", "query": "SELECT Name FROM teacher ORDER BY Age ASC", "Prediction": "teacher.Name FROM course_arrange \n JOIN teacher ON course_arrange.Teacher_ID=teacher.Teacher_ID \n ORDER BY teacher.Age ASC;"}
{"db_id": "course_teach", "SpiderQuestion": "What are the age and hometown of teachers?", "SpiderSynQuestion": "What are the age and birthplace of instructors?", "query": "SELECT Age ,  Hometown FROM teacher", "Prediction": "Age, Hometown FROM teacher;"}
{"db_id": "course_teach", "SpiderQuestion": "What is the age and hometown of every teacher?", "SpiderSynQuestion": "What is the age and birthplace of every instructor?", "query": "SELECT Age ,  Hometown FROM teacher", "Prediction": "Age, Hometown FROM teacher;"}
{"db_id": "course_teach", "SpiderQuestion": "List the name of teachers whose hometown is not \"Little Lever Urban District\".", "SpiderSynQuestion": "List the name of faculties whose birthplace is not \"Little Lever Urban District\".", "query": "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban District\"", "Prediction": "Name FROM teacher WHERE Hometown != \"Little Lever Urban District\";"}
{"db_id": "course_teach", "SpiderQuestion": "What are the names of the teachers whose hometown is not \"Little Lever Urban District\"?", "SpiderSynQuestion": "What are the names of the faculties whose birthplace is not \"Little Lever Urban District\"?", "query": "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban District\"", "Prediction": "Name FROM teacher WHERE Hometown != \"Little Lever Urban District\";"}
{"db_id": "course_teach", "SpiderQuestion": "Show the name of teachers aged either 32 or 33?", "SpiderSynQuestion": "Show the name of faculties aged either 32 or 33?", "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "Prediction": "Name FROM teacher WHERE Age IN (32,33);"}
{"db_id": "course_teach", "SpiderQuestion": "What are the names of the teachers who are aged either 32 or 33?", "SpiderSynQuestion": "What are the names of the instructors who are aged either 32 or 33?", "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "Prediction": "Name FROM teacher WHERE Age IN (32,33);"}
{"db_id": "course_teach", "SpiderQuestion": "What is the hometown of the youngest teacher?", "SpiderSynQuestion": "What is the birthplace of the youngest instructor?", "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "Prediction": "Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher);"}
{"db_id": "course_teach", "SpiderQuestion": "Where is the youngest teacher from?", "SpiderSynQuestion": "Where is the youngest instructor from?", "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "Prediction": "Hometown FROM teacher ORDER BY Age ASC LIMIT 1;"}
{"db_id": "course_teach", "SpiderQuestion": "Show different hometown of teachers and the number of teachers from each hometown.", "SpiderSynQuestion": "Show different birthplace of instructors and the number of instructors from each birthplace.", "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "Prediction": "Hometown, COUNT(*) FROM teacher GROUP BY Hometown;"}
{"db_id": "course_teach", "SpiderQuestion": "For each hometown, how many teachers are there?", "SpiderSynQuestion": "For each birthplace, how many instructors are there?", "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "Prediction": "Hometown, COUNT(*) FROM teacher GROUP BY Hometown;"}
{"db_id": "course_teach", "SpiderQuestion": "List the most common hometown of teachers.", "SpiderSynQuestion": "List the most common birthplace of instructors.", "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "Prediction": "Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;"}
{"db_id": "course_teach", "SpiderQuestion": "What is the most commmon hometowns for teachers?", "SpiderSynQuestion": "What is the most commmon birthplaces for faculties?", "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "Prediction": "Hometown, COUNT(*) AS count FROM teacher GROUP BY Hometown ORDER BY count DESC LIMIT 1;"}
{"db_id": "course_teach", "SpiderQuestion": "Show the hometowns shared by at least two teachers.", "SpiderSynQuestion": "Show the birthplaces shared by at least two faculties.", "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "Prediction": "Hometown \nFROM teacher \nGROUP BY Hometown \nHAVING COUNT(*) > 1;"}
{"db_id": "course_teach", "SpiderQuestion": "What are the towns from which at least two teachers come from?", "SpiderSynQuestion": "What are the towns from which at least two instructors come from?", "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "Prediction": "Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;"}
{"db_id": "course_teach", "SpiderQuestion": "Show names of teachers and the courses they are arranged to teach.", "SpiderSynQuestion": "Show names of instructors and the curriculums they are arranged to teach.", "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "Prediction": "teacher.Name, course.Course\n FROM course_arrange\n JOIN teacher ON course_arrange.Teacher_ID=teacher.Teacher_ID\n JOIN course ON course_arrange.Course_ID=course.Course_ID;"}
{"db_id": "course_teach", "SpiderQuestion": "What is the name of each teacher and what course they teach?", "SpiderSynQuestion": "What is the name of each faculty and what curriculum they teach?", "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "Prediction": "teacher.Name, course.Course\n FROM teacher\n JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\n JOIN course ON course_arrange.Course_ID = course.Course_ID;"}
{"db_id": "course_teach", "SpiderQuestion": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", "SpiderSynQuestion": "Show names of faculties and the curriculums they are arranged to teach in ascending alphabetical order of the faculty's name.", "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "Prediction": "teacher.Name, course.Course\n FROM teacher\n JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\n JOIN course ON course_arrange.Course_ID = course.Course_ID\n ORDER BY teacher.Name ASC;"}
{"db_id": "course_teach", "SpiderQuestion": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?", "SpiderSynQuestion": "What are the names of the faculties and the curriculums they teach in ascending alphabetical order by the name of the faculty?", "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "Prediction": "course.Course, teacher.Name\n FROM course_arrange\n JOIN course ON course_arrange.Course_ID = course.Course_ID\n JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID\n ORDER BY teacher.Name ASC, course.Course ASC;"}
{"db_id": "course_teach", "SpiderQuestion": "Show the name of the teacher for the math course.", "SpiderSynQuestion": "Show the name of the faculty for the math curriculum.", "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "Prediction": "course_arrange.Grade\n FROM course_arrange\n JOIN course ON course_arrange.Course_ID = course.Course_ID\n WHERE course.Course = 'math';"}
{"db_id": "course_teach", "SpiderQuestion": "What are the names of the people who teach math courses?", "SpiderSynQuestion": "What are the names of the people who teach math?", "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "Prediction": "teacher.Name FROM teacher \n JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \n JOIN course ON course_arrange.Course_ID = course.Course_ID \n WHERE course.Course = 'math';"}
{"db_id": "course_teach", "SpiderQuestion": "Show names of teachers and the number of courses they teach.", "SpiderSynQuestion": "Show names of faculties and the number of curriculums they teach.", "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "Prediction": "teacher.Name, COUNT(course_arrange.Course_ID) \n FROM teacher \n JOIN course_arrange ON course_arrange.Teacher_ID=teacher.Teacher_ID \n GROUP BY teacher.Name;"}
{"db_id": "course_teach", "SpiderQuestion": "What are the names of the teachers and how many courses do they teach?", "SpiderSynQuestion": "What are the names of the instructors and how many curriculums do they teach?", "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "Prediction": "teacher.Name, COUNT(course_arrange.Course_ID) \n FROM teacher \n INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \n GROUP BY teacher.Name;"}
{"db_id": "course_teach", "SpiderQuestion": "Show names of teachers that teach at least two courses.", "SpiderSynQuestion": "Show names of instructors that teach at least two curriculums.", "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "Prediction": "teacher.Name \nFROM course_arrange \nJOIN teacher ON course_arrange.Teacher_ID=teacher.Teacher_ID \nGROUP BY course_arrange.Teacher_ID \nHAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2;"}
{"db_id": "course_teach", "SpiderQuestion": "What are the names of the teachers who teach at least two courses?", "SpiderSynQuestion": "What are the names of the faculties who teach at least two curriculums?", "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "Prediction": "teacher.Name \nFROM teacher \nINNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nGROUP BY teacher.Name \nHAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2;"}
{"db_id": "course_teach", "SpiderQuestion": "List the names of teachers who have not been arranged to teach courses.", "SpiderSynQuestion": "List the names of instructors who have not been arranged to teach curriculums.", "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "Prediction": "teacher.Name \n FROM teacher \n LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \n WHERE course_arrange.Course_ID IS NULL;"}
{"db_id": "course_teach", "SpiderQuestion": "What are the names of the teachers whose courses have not been arranged?", "SpiderSynQuestion": "What are the names of the instructors whose curriculums have not been arranged?", "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "Prediction": "teacher.Name \nFROM teacher \nLEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nWHERE course_arrange.Teacher_ID IS NULL;"}
{"db_id": "museum_visit", "SpiderQuestion": "How many visitors below age 30 are there?", "SpiderSynQuestion": "How many guests below age 30 are there?", "query": "SELECT count(*) FROM visitor WHERE age  <  30", "Prediction": "COUNT(*) FROM visitor WHERE Age < 30 AND Level_of_membership = 'Guest';"}
{"db_id": "museum_visit", "SpiderQuestion": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "SpiderSynQuestion": "Find the names of the guests whose membership level is higher than 4, and order the results by the level from high to low.", "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "Prediction": "Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;"}
{"db_id": "museum_visit", "SpiderQuestion": "What is the average age of the visitors whose membership level is not higher than 4?", "SpiderSynQuestion": "What is the average age of the guests whose membership level is not higher than 4?", "query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "Prediction": "AVG(Age) FROM visitor WHERE Level_of_membership <= 4;"}
{"db_id": "museum_visit", "SpiderQuestion": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", "SpiderSynQuestion": "Find the name and membership level of the guests whose membership level is higher than 4, and sort by their age from old to young.", "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "Prediction": "Name, Level_of_membership \n FROM visitor \n WHERE Level_of_membership > 4 \n ORDER BY Age ASC;"}
{"db_id": "museum_visit", "SpiderQuestion": "Find the id and name of the museum that has the most staff members?", "SpiderSynQuestion": "Find the id and name of the museum that has the most workers?", "query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "Prediction": "Museum_ID, Name \nFROM museum \nWHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum);"}
{"db_id": "museum_visit", "SpiderQuestion": "Find the average number of staff working for the museums that were open before 2009.", "SpiderSynQuestion": "Find the average number of worker working for the museums that were open before 2009.", "query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "Prediction": "AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009;"}
{"db_id": "museum_visit", "SpiderQuestion": "What are the opening year and staff number of the museum named Plaza Museum?", "SpiderSynQuestion": "What are the opening year and worker number of the museum named Plaza Museum?", "query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "Prediction": "Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';"}
{"db_id": "museum_visit", "SpiderQuestion": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "SpiderSynQuestion": "find the names of museums which have more worker than the minimum worker number of all museums opened after 2010.", "query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "Prediction": "Name \nFROM museum \nWHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010);"}
{"db_id": "museum_visit", "SpiderQuestion": "find the id, name and age for visitors who visited some museums more than once.", "SpiderSynQuestion": "find the id, name and age for guests who visited some museums more than once.", "query": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "Prediction": "visitor.ID, visitor.Name, visitor.Age\n FROM visitor\n JOIN visit ON visit.visitor_ID = visitor.ID\n GROUP BY visit.visitor_ID\n HAVING COUNT(DISTINCT visit.Museum_ID) > 1;"}
{"db_id": "museum_visit", "SpiderQuestion": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "SpiderSynQuestion": "What are the id, name and membership level of guests who have spent the largest amount of money in total in all museum tickets?", "query": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "Prediction": "visitor.ID, visitor.Name, visitor.Level_of_membership \n FROM visitor \n JOIN visit ON visitor.ID = visit.visitor_ID \n GROUP BY visitor.ID \n ORDER BY SUM(Total_spent) DESC \n LIMIT 1;"}
{"db_id": "museum_visit", "SpiderQuestion": "What are the id and name of the museum visited most times?", "SpiderSynQuestion": "What are the id and name of the museum visited most times?", "query": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1", "Prediction": "museum.Museum_ID, museum.Name\n FROM museum\n JOIN visit ON museum.Museum_ID = visit.Museum_ID\n GROUP BY museum.Museum_ID\n ORDER BY SUM(visit.Num_of_Ticket) DESC\n LIMIT 1;"}
{"db_id": "museum_visit", "SpiderQuestion": "What is the name of the museum that had no visitor yet?", "SpiderSynQuestion": "What is the name of the museum that had no tourist yet?", "query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)", "Prediction": "Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit);"}
{"db_id": "museum_visit", "SpiderQuestion": "Find the name and age of the visitor who bought the most tickets at once.", "SpiderSynQuestion": "Find the name and age of the tourist who bought the most tickets at once.", "query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "Prediction": "visitor.Name, visitor.Age\n FROM visit\n JOIN visitor ON visit.visitor_ID = visitor.ID\n WHERE visit.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)"}
{"db_id": "museum_visit", "SpiderQuestion": "What are the average and maximum number of tickets bought in all visits?", "SpiderSynQuestion": "What are the average and maximum number of tickets bought in all guests?", "query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "Prediction": "AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit;"}
{"db_id": "museum_visit", "SpiderQuestion": "What is the total ticket expense of the visitors whose membership level is 1?", "SpiderSynQuestion": "What is the total ticket expense of the guests whose membership level is 1?", "query": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "Prediction": "SUM(Total_spent) FROM visit JOIN visitor ON visit.visitor_ID=visitor.ID WHERE Level_of_membership=1;"}
{"db_id": "museum_visit", "SpiderQuestion": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "SpiderSynQuestion": "What is the name of the tourist who visited both a museum opened before 2009 and a museum opened after 2011?", "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011", "Prediction": "visitor.Name \nFROM visit \nJOIN museum ON visit.Museum_ID = museum.Museum_ID \nJOIN visitor ON visit.visitor_ID = visitor.ID \nWHERE museum.Open_Year < 2009 \nAND museum.Open_Year > 2011 \nGROUP BY visitor.Name \nHAVING COUNT(DISTINCT museum.Museum_ID) = 2;"}
{"db_id": "museum_visit", "SpiderQuestion": "Find the number of visitors who did not visit any museum opened after 2010.", "SpiderSynQuestion": "Find the number of guests who did not visit any museum opened after 2010.", "query": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)", "Prediction": "COUNT(DISTINCT visitor_ID) \nFROM visit \nWHERE visitor_ID NOT IN \n    (SELECT visitor_ID \n     FROM visit \n     JOIN museum ON visit.Museum_ID = museum.Museum_ID \n     WHERE museum.Open_Year > 2010)"}
{"db_id": "museum_visit", "SpiderQuestion": "How many museums were opened after 2013 or before 2008?", "SpiderSynQuestion": "How many museums were opened after 2013 or before 2008?", "query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008", "Prediction": "COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008;"}
{"db_id": "wta_1", "SpiderQuestion": "Find the total number of players.", "SpiderSynQuestion": "Find the total number of participants.", "query": "SELECT count(*) FROM players", "Prediction": "COUNT(DISTINCT loser_id) + COUNT(DISTINCT winner_id) FROM matches;"}
{"db_id": "wta_1", "SpiderQuestion": "How many players are there?", "SpiderSynQuestion": "How many participants are there?", "query": "SELECT count(*) FROM players", "Prediction": "COUNT(DISTINCT player_id) FROM players;"}
{"db_id": "wta_1", "SpiderQuestion": "Find the total number of matches.", "SpiderSynQuestion": "Find the total number of competitions.", "query": "SELECT count(*) FROM matches", "Prediction": "COUNT(*) FROM matches;"}
{"db_id": "wta_1", "SpiderQuestion": "Count the number of matches.", "SpiderSynQuestion": "Count the number of competitions.", "query": "SELECT count(*) FROM matches", "Prediction": "COUNT(DISTINCT tourney_id) FROM matches;"}
{"db_id": "wta_1", "SpiderQuestion": "List the first name and birth date of all players from the country with code USA.", "SpiderSynQuestion": "List the given name and birth date of all participants from the country with code USA.", "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "Prediction": "first_name, birth_date \nFROM players \nWHERE country_code = 'USA';"}
{"db_id": "wta_1", "SpiderQuestion": "What are the first names and birth dates of players from the USA?", "SpiderSynQuestion": "What are the given names and birth dates of participants from the USA?", "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "Prediction": "first_name, birth_date FROM players WHERE country_code = 'USA';"}
{"db_id": "wta_1", "SpiderQuestion": "Find the average age of losers and winners of all matches.", "SpiderSynQuestion": "Find the average age of losers and winners of all games.", "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "Prediction": "AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;"}
{"db_id": "wta_1", "SpiderQuestion": "What are the average ages of losers and winners across matches?", "SpiderSynQuestion": "What are the average ages of losers and winners across games?", "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "Prediction": "AVG(loser_age), AVG(winner_age) FROM matches;"}
{"db_id": "wta_1", "SpiderQuestion": "Find the average rank of winners in all matches.", "SpiderSynQuestion": "Find the average rank of winners in all games.", "query": "SELECT avg(winner_rank) FROM matches", "Prediction": "AVG(winner_rank) FROM matches;"}
{"db_id": "wta_1", "SpiderQuestion": "What is the average rank for winners in all matches?", "SpiderSynQuestion": "What is the average rank for winners in all competitions?", "query": "SELECT avg(winner_rank) FROM matches", "Prediction": "AVG(winner_rank) FROM matches;"}
{"db_id": "wta_1", "SpiderQuestion": "Find the highest rank of losers in all matches.", "SpiderSynQuestion": "Find the highest rank of losers in all competitions.", "query": "SELECT min(loser_rank) FROM matches", "Prediction": "MAX(loser_rank) FROM matches;"}
{"db_id": "wta_1", "SpiderQuestion": "What is the best rank of losers across all matches?", "SpiderSynQuestion": "What is the best rank of losers across all contest?", "query": "SELECT min(loser_rank) FROM matches", "Prediction": "MAX(loser_rank) FROM matches;"}
{"db_id": "wta_1", "SpiderQuestion": "find the number of distinct country codes of all players.", "SpiderSynQuestion": "find the number of distinct State codes of all participants.", "query": "SELECT count(DISTINCT country_code) FROM players", "Prediction": "COUNT(DISTINCT players.country_code) FROM players;"}
{"db_id": "wta_1", "SpiderQuestion": "How many distinct countries do players come from?", "SpiderSynQuestion": "How many distinct States do participants come from?", "query": "SELECT count(DISTINCT country_code) FROM players", "Prediction": "COUNT(DISTINCT country_code) FROM players;"}
{"db_id": "wta_1", "SpiderQuestion": "Find the number of distinct name of losers.", "SpiderSynQuestion": "Find the number of distinct name of losers.", "query": "SELECT count(DISTINCT loser_name) FROM matches", "Prediction": "COUNT(DISTINCT loser_name) FROM matches;"}
{"db_id": "wta_1", "SpiderQuestion": "How many different loser names are there?", "SpiderSynQuestion": "How many different loser names are there?", "query": "SELECT count(DISTINCT loser_name) FROM matches", "Prediction": "COUNT(DISTINCT loser_name) FROM matches;"}
{"db_id": "wta_1", "SpiderQuestion": "Find the name of tourney that has more than 10 matches.", "SpiderSynQuestion": "Find the names of tourney that has more than 10 competitions.", "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "Prediction": "tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;"}
{"db_id": "wta_1", "SpiderQuestion": "What are the names of tournaments that have more than 10 matches?", "SpiderSynQuestion": "What are the names of tournaments that have more than 10 competitions?", "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "Prediction": "tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;"}
{"db_id": "wta_1", "SpiderQuestion": "List the names of all winners who played in both 2013 and 2016.", "SpiderSynQuestion": "List the names of all winners who played in both 2013 and 2016.", "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "Prediction": "winner_name \nFROM matches \nWHERE year = 2013 AND winner_name IN (SELECT winner_name FROM matches WHERE year = 2016);"}
{"db_id": "wta_1", "SpiderQuestion": "What are the names of players who won in both 2013 and 2016?", "SpiderSynQuestion": "What are the names of participants who won in both 2013 and 2016?", "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "Prediction": "winner_name \nFROM matches \nJOIN players ON matches.winner_id=players.player_id \nWHERE year=2013 AND winner_name IN \n(SELECT winner_name FROM matches JOIN players ON matches.winner_id=players.player_id WHERE year=2016)"}
{"db_id": "wta_1", "SpiderQuestion": "List the number of all matches who played in years of 2013 or 2016.", "SpiderSynQuestion": "List the number of all competitions who played in years of 2013 or 2016.", "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "Prediction": "COUNT(DISTINCT tourney_id) FROM matches WHERE year IN (2013, 2016);"}
{"db_id": "wta_1", "SpiderQuestion": "How many matches were played in 2013 or 2016?", "SpiderSynQuestion": "How many competitions were played in 2013 or 2016?", "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "Prediction": "COUNT(DISTINCT tourney_id) FROM matches WHERE year = 2013 OR year = 2016;"}
{"db_id": "wta_1", "SpiderQuestion": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "SpiderSynQuestion": "What are the nation code and given name of the participants who won in both tourney WTA Championships and Australian Open?", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "Prediction": "players.country_code, players.first_name \n FROM matches \n JOIN players ON matches.winner_id=players.player_id \n WHERE matches.tourney_name='WTA Championships' AND matches.year=2019 AND matches.winner_id IN \n (SELECT winner_id FROM matches WHERE tourney_name='Australian Open' AND year=2019);"}
{"db_id": "wta_1", "SpiderQuestion": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "SpiderSynQuestion": "What are the given names and State codes for participants who won both the WTA Championships and the Australian Open?", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "Prediction": "players.first_name, players.country_code \n FROM players \n JOIN matches ON matches.winner_id = players.player_id \n WHERE matches.tourney_name = 'WTA Championships' AND matches.best_of = 3 \n AND EXISTS (SELECT 1 FROM matches WHERE matches.winner_id = players.player_id AND matches.tourney_name = 'Australian Open' AND matches.best_of = 5);"}
{"db_id": "wta_1", "SpiderQuestion": "Find the first name and country code of the oldest player.", "SpiderSynQuestion": "Find the given name and State abbreviation of the oldest participant.", "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "Prediction": "players.first_name, players.last_name, players.country_code \nFROM players \nWHERE birth_date = (SELECT MIN(birth_date) FROM players);"}
{"db_id": "wta_1", "SpiderQuestion": "What is the first name and country code of the oldest player?", "SpiderSynQuestion": "What is the given name and nation abbreviation of the oldest participant?", "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "Prediction": "first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players);"}
{"db_id": "wta_1", "SpiderQuestion": "List the first and last name of all players in the order of birth date.", "SpiderSynQuestion": "List the given and family name of all participants in the order of birth date.", "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "Prediction": "first_name, last_name FROM players ORDER BY birth_date;"}
{"db_id": "wta_1", "SpiderQuestion": "What are the full names of all players, sorted by birth date?", "SpiderSynQuestion": "What are the full names of all participants, sorted by birth date?", "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "Prediction": "players.first_name || ' ' || players.last_name AS full_name\nFROM players\nORDER BY players.birth_date;"}
{"db_id": "wta_1", "SpiderQuestion": "List the first and last name of all players who are left / L hand in the order of birth date.", "SpiderSynQuestion": "List the given and family name of all participants who are left / L hand in the order of birth date.", "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "Prediction": "players.first_name, players.last_name \nFROM players \nWHERE players.hand = 'L' \nORDER BY players.birth_date;"}
{"db_id": "wta_1", "SpiderQuestion": "What are the full names of all left handed players, in order of birth date?", "SpiderSynQuestion": "What are the full names of all left handed participants, in order of birth date?", "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "Prediction": "first_name || ' ' || last_name AS full_name\nFROM players\nWHERE hand = 'L'\nORDER BY birth_date;"}
{"db_id": "wta_1", "SpiderQuestion": "Find the first name and country code of the player who did the most number of tours.", "SpiderSynQuestion": "Find the given name and nation abbreviation of the participant who did the most number of tours.", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "Prediction": "players.first_name, players.country_code \n FROM players \n JOIN rankings ON players.player_id = rankings.player_id \n WHERE rankings.tours = (SELECT MAX(tours) FROM rankings);"}
{"db_id": "wta_1", "SpiderQuestion": "What is the first name and country code of the player with the most tours?", "SpiderSynQuestion": "What is the given name and State code of the participant with the most tours?", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "Prediction": "players.first_name, players.country_code \n FROM players \n JOIN rankings ON players.player_id = rankings.player_id \n GROUP BY players.player_id \n ORDER BY SUM(rankings.tours) DESC \n LIMIT 1;"}
{"db_id": "wta_1", "SpiderQuestion": "Find the year that has the most number of matches.", "SpiderSynQuestion": "Find the year that has the most number of competitions.", "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "Prediction": "year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;"}
{"db_id": "wta_1", "SpiderQuestion": "Which year had the most matches?", "SpiderSynQuestion": "Which year had the most competitions?", "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "Prediction": "year, COUNT(*) AS num_competitions\n FROM matches\n GROUP BY year\n ORDER BY num_competitions DESC\n LIMIT 1;"}
{"db_id": "wta_1", "SpiderQuestion": "Find the name and rank points of the winner who won the most times.", "SpiderSynQuestion": "Find the name and rank points of the winner who won the most times.", "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "Prediction": "winner_name, winner_rank_points\n FROM matches\n JOIN players ON matches.winner_id=players.player_id\n GROUP BY winner_name\n ORDER BY COUNT(*) DESC\n LIMIT 1;"}
{"db_id": "wta_1", "SpiderQuestion": "What is the name of the winner who has won the most matches, and how many rank points does this player have?", "SpiderSynQuestion": "What is the name of the winner who has won the most matches, and how many rank points does this player have?", "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "Prediction": "winner_name, SUM(winner_rank_points) AS total_rank_points\n FROM matches\n JOIN players ON matches.winner_id=players.player_id\n GROUP BY winner_name\n ORDER BY COUNT(*) DESC\n LIMIT 1;"}
{"db_id": "wta_1", "SpiderQuestion": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "SpiderSynQuestion": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "Prediction": "winner_name \n FROM matches \n JOIN players ON matches.winner_id=players.player_id \n JOIN rankings ON players.player_id=rankings.player_id \n WHERE tourney_name='Australian Open' \n AND ranking_points=(SELECT MAX(ranking_points) FROM rankings WHERE tourney_name='Australian Open');"}
{"db_id": "wta_1", "SpiderQuestion": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "SpiderSynQuestion": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "Prediction": "winner_name \nFROM matches \nJOIN players ON matches.winner_id=players.player_id \nJOIN rankings ON players.player_id=rankings.player_id \nWHERE tourney_name='Australian Open' \nORDER BY ranking_points DESC \nLIMIT 1;"}
{"db_id": "wta_1", "SpiderQuestion": "find the names of loser and winner who played in the match with greatest number of minutes.", "SpiderSynQuestion": "find the names of loser and winner who played in the competition with greatest number of minutes.", "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "Prediction": "matches.winner_name, matches.loser_name\n FROM matches\n WHERE minutes = (SELECT MAX(minutes) FROM matches);"}
{"db_id": "wta_1", "SpiderQuestion": "What are the names of the winner and loser who played in the longest match?", "SpiderSynQuestion": "What are the names of the winner and loser who played in the longest competition?", "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "Prediction": "matches.winner_name, matches.loser_name\n FROM matches\n WHERE minutes = (SELECT MAX(minutes) FROM matches)"}
{"db_id": "wta_1", "SpiderQuestion": "Find the average ranking for each player and their first name.", "SpiderSynQuestion": "Find the average ranking for each participant and their given name.", "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "Prediction": "players.first_name, players.last_name, AVG(rankings.ranking) \n FROM players \n JOIN rankings ON players.player_id = rankings.player_id \n GROUP BY players.first_name, players.last_name;"}
{"db_id": "wta_1", "SpiderQuestion": "What are the first names of all players, and their average rankings?", "SpiderSynQuestion": "What are the given names of all participants, and their average rankings?", "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "Prediction": "players.first_name, AVG(rankings.ranking) \n FROM players \n JOIN rankings ON players.player_id=rankings.player_id \n GROUP BY players.first_name;"}
{"db_id": "wta_1", "SpiderQuestion": "Find the total ranking points for each player and their first name.", "SpiderSynQuestion": "Find the total ranking points for each participant and their given name.", "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "Prediction": "players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_ranking_points\n FROM players\n JOIN rankings ON players.player_id = rankings.player_id\n GROUP BY players.player_id;"}
{"db_id": "wta_1", "SpiderQuestion": "What are the first names of all players, and their total ranking points?", "SpiderSynQuestion": "What are the given names of all participants, and their total ranking points?", "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "Prediction": "players.first_name, SUM(rankings.ranking_points) \n FROM players \n JOIN rankings ON players.player_id=rankings.player_id \n GROUP BY players.first_name;"}
{"db_id": "wta_1", "SpiderQuestion": "find the number of players for each country.", "SpiderSynQuestion": "find the number of participants for each State.", "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "Prediction": "country_code, COUNT(DISTINCT player_id) FROM players GROUP BY country_code;"}
{"db_id": "wta_1", "SpiderQuestion": "How many players are from each country?", "SpiderSynQuestion": "How many participants are from each State?", "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "Prediction": "players.country_code, COUNT(players.player_id)\n FROM players\n GROUP BY players.country_code;"}
{"db_id": "wta_1", "SpiderQuestion": "find the code of the country where has the greatest number of players.", "SpiderSynQuestion": "find the abbreviation of the State where has the greatest number of participants.", "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "Prediction": "players.country_code, COUNT(*) as num_players\n FROM players\n GROUP BY players.country_code\n ORDER BY num_players DESC\n LIMIT 1;"}
{"db_id": "wta_1", "SpiderQuestion": "What is the code of the country with the most players?", "SpiderSynQuestion": "What is the abbreviation of the nation with the most participants?", "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "Prediction": "country_code FROM players\nGROUP BY country_code\nORDER BY COUNT(*) DESC\nLIMIT 1;"}
{"db_id": "wta_1", "SpiderQuestion": "Find the codes of countries that have more than 50 players.", "SpiderSynQuestion": "Find the abbreviations of nations that have more than 50 participants.", "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "Prediction": "winner_ioc FROM matches GROUP BY winner_ioc HAVING COUNT(DISTINCT winner_id) > 50 OR COUNT(DISTINCT loser_id) > 50;"}
{"db_id": "wta_1", "SpiderQuestion": "What are the codes of countries with more than 50 players?", "SpiderSynQuestion": "What are the abbreviations of nations with more than 50 participants?", "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "Prediction": "DISTINCT winner_ioc FROM matches GROUP BY winner_ioc HAVING COUNT(*) > 50 ORDER BY winner_ioc;"}
{"db_id": "wta_1", "SpiderQuestion": "Find the total number of tours for each ranking date.", "SpiderSynQuestion": "Find the total number of trips for each ranking time.", "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "Prediction": "ranking_date, COUNT(tours) AS total_trips\n FROM rankings\n GROUP BY ranking_date;"}
{"db_id": "wta_1", "SpiderQuestion": "How many total tours were there for each ranking date?", "SpiderSynQuestion": "How many total travels were there for each ranking time?", "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "Prediction": "ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date;"}
{"db_id": "wta_1", "SpiderQuestion": "Find the number of matches happened in each year.", "SpiderSynQuestion": "Find the number of games happened in each year.", "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "Prediction": "year, COUNT(*) AS num_games\n FROM matches\n GROUP BY year;"}
{"db_id": "wta_1", "SpiderQuestion": "How many matches were played in each year?", "SpiderSynQuestion": "How many games were played in each year?", "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "Prediction": "year, COUNT(*) AS games_played\n FROM matches\n GROUP BY year;"}
{"db_id": "wta_1", "SpiderQuestion": "Find the name and rank of the 3 youngest winners across all matches.", "SpiderSynQuestion": "Find the name and rank of the 3 youngest winners across all competitions.", "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "Prediction": "winner_name, winner_rank \n FROM matches \n JOIN players ON matches.winner_id=players.player_id \n ORDER BY winner_age ASC \n LIMIT 3;"}
{"db_id": "wta_1", "SpiderQuestion": "What are the names and ranks of the three youngest winners across all matches?", "SpiderSynQuestion": "What are the names and ranks of the three youngest winners across all games?", "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "Prediction": "winner_name, winner_rank \n FROM matches \n JOIN players ON matches.winner_id=players.player_id \n ORDER BY winner_age ASC \n LIMIT 3;"}
{"db_id": "wta_1", "SpiderQuestion": "How many different winners both participated in the WTA Championships and were left handed?", "SpiderSynQuestion": "How many different winners both participated in the WTA Championships and were left handed?", "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "Prediction": "COUNT(DISTINCT winner_id) FROM matches \nWHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';"}
{"db_id": "wta_1", "SpiderQuestion": "Find the number of left handed winners who participated in the WTA Championships.", "SpiderSynQuestion": "Find the number of left handed winners who participated in the WTA Championships.", "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "Prediction": "COUNT(*) FROM matches \nJOIN players ON matches.winner_id=players.player_id \nWHERE winner_hand='L' AND tourney_name='WTA Championships';"}
{"db_id": "wta_1", "SpiderQuestion": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "SpiderSynQuestion": "Find the given name, nation abbreviation and birth date of the winner who has the highest rank points in all games.", "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "Prediction": "winner_name, winner_ioc, birth_date \n FROM matches \n JOIN players ON matches.winner_id=players.player_id \n JOIN rankings ON players.player_id=rankings.player_id \n WHERE ranking_points = (SELECT MAX(ranking_points) FROM rankings);"}
{"db_id": "wta_1", "SpiderQuestion": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "SpiderSynQuestion": "What is the given name, nation abbreviation, and birth date of the participant with the most winner rank points across all competitions?", "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "Prediction": "players.first_name, players.country_code, players.birth_date\n FROM players\n JOIN matches ON matches.winner_id = players.player_id\n JOIN rankings ON rankings.player_id = players.player_id\n WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)"}
{"db_id": "wta_1", "SpiderQuestion": "Find the number of players for each hand type.", "SpiderSynQuestion": "Find the number of participants for each hand type.", "query": "SELECT count(*) ,  hand FROM players GROUP BY hand", "Prediction": "hand, COUNT(*) AS num_participants FROM players GROUP BY hand;"}
{"db_id": "wta_1", "SpiderQuestion": "How many players are there for each hand type?", "SpiderSynQuestion": "How many participants are there for each hand type?", "query": "SELECT count(*) ,  hand FROM players GROUP BY hand", "Prediction": "hand, COUNT(*) FROM players GROUP BY hand;"}
{"db_id": "battle_death", "SpiderQuestion": "How many ships ended up being 'Captured'?", "SpiderSynQuestion": "How many vessels ended up being 'Captured'?", "query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "Prediction": "COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';"}
{"db_id": "battle_death", "SpiderQuestion": "List the name and tonnage ordered by in descending alphaetical order for the names.", "SpiderSynQuestion": "List the name and tonnage ordered by in descending alphaetical order for the names.", "query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC", "Prediction": "name, tonnage FROM ship ORDER BY name DESC;"}
{"db_id": "battle_death", "SpiderQuestion": "List the name, date and result of each battle.", "SpiderSynQuestion": "List the name, date and result of each battle.", "query": "SELECT name ,  date FROM battle", "Prediction": "name, date, result FROM battle;"}
{"db_id": "battle_death", "SpiderQuestion": "What is maximum and minimum death toll caused each time?", "SpiderSynQuestion": "What is maximum and minimum death toll caused each time?", "query": "SELECT max(killed) ,  min(killed) FROM death", "Prediction": "MAX(killed), MIN(killed) FROM death;"}
{"db_id": "battle_death", "SpiderQuestion": "What is the average number of injuries caused each time?", "SpiderSynQuestion": "What is the average number of injuries caused each time?", "query": "SELECT avg(injured) FROM death", "Prediction": "AVG(injured) FROM death;"}
{"db_id": "battle_death", "SpiderQuestion": "What are the death and injury situations caused by the ship with tonnage 't'?", "SpiderSynQuestion": "What are the death and hurt situations caused by the vessel with tonnage 't'?", "query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "Prediction": "death.note, death.killed, death.injured \nFROM death \nINNER JOIN ship ON death.caused_by_ship_id = ship.id \nWHERE ship.tonnage = 't'"}
{"db_id": "battle_death", "SpiderQuestion": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "SpiderSynQuestion": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "Prediction": "name, result FROM battle WHERE bulgarian_commander != 'Boril';"}
{"db_id": "battle_death", "SpiderQuestion": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "SpiderSynQuestion": "What are the different ids and names of the combat that lost any 'Brig' type vessels?", "query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "Prediction": "battle.id, battle.name \n FROM battle \n JOIN ship ON ship.lost_in_battle = battle.id \n WHERE ship.ship_type = 'Brig';"}
{"db_id": "battle_death", "SpiderQuestion": "What are the ids and names of the battles that led to more than 10 people killed in total.", "SpiderSynQuestion": "What are the ids and names of the combat that led to more than 10 people dead in total.", "query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "Prediction": "battle.id, battle.name \n FROM battle \n JOIN death ON battle.id = death.caused_by_ship_id \n GROUP BY battle.id \n HAVING SUM(death.killed) + SUM(death.injured) > 10;"}
{"db_id": "battle_death", "SpiderQuestion": "What is the ship id and name that caused most total injuries?", "SpiderSynQuestion": "What is the vessel id and name that caused most total injuries?", "query": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "Prediction": "ship.id, ship.name\n FROM ship\n JOIN death ON death.caused_by_ship_id = ship.id\n GROUP BY ship.id\n ORDER BY SUM(death.injured) DESC\n LIMIT 1;"}
{"db_id": "battle_death", "SpiderQuestion": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "SpiderSynQuestion": "What are the distinct combat names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "Prediction": "DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';"}
{"db_id": "battle_death", "SpiderQuestion": "How many different results are there for the battles?", "SpiderSynQuestion": "How many different results are there for the combats?", "query": "SELECT count(DISTINCT RESULT) FROM battle", "Prediction": "COUNT(DISTINCT result) FROM battle;"}
{"db_id": "battle_death", "SpiderQuestion": "How many battles did not lose any ship with tonnage '225'?", "SpiderSynQuestion": "How many combats did not lose any vessel with tonnage '225'?", "query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "Prediction": "COUNT(DISTINCT battle.id) \nFROM battle \nLEFT JOIN ship ON ship.lost_in_battle = battle.id \nWHERE ship.tonnage != 225 OR ship.tonnage IS NULL;"}
{"db_id": "battle_death", "SpiderQuestion": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "SpiderSynQuestion": "List the name and date the combat that has lost the vessel named 'Lettice' and the vessel named 'HMS Atalanta'", "query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "Prediction": "battle.name, battle.date\n FROM battle\n JOIN ship ON ship.lost_in_battle = battle.id\n WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta';"}
{"db_id": "battle_death", "SpiderQuestion": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "SpiderSynQuestion": "Show names, results and bulgarian commanders of the combats with no vessels lost in the 'English Channel'.", "query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "Prediction": "battle.name, battle.result, battle.bulgarian_commander \n FROM battle \n WHERE battle.id NOT IN \n (SELECT ship.lost_in_battle FROM ship WHERE ship.location = 'English Channel');"}
{"db_id": "battle_death", "SpiderQuestion": "What are the notes of the death events which has substring 'East'?", "SpiderSynQuestion": "What are the remark of the death events which has substring 'East'?", "query": "SELECT note FROM death WHERE note LIKE '%East%'", "Prediction": "note FROM death WHERE note LIKE '%East%';"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "what are all the addresses including line 1 and line 2?", "SpiderSynQuestion": "what are all the addresses including line 1 and line 2?", "query": "SELECT line_1 ,  line_2 FROM addresses", "Prediction": "line_1, line_2 FROM Addresses;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the first and second line for all addresses?", "SpiderSynQuestion": "What is the first and second line for all addresses?", "query": "SELECT line_1 ,  line_2 FROM addresses", "Prediction": "line_1, line_2 FROM Addresses;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "How many courses in total are listed?", "SpiderSynQuestion": "How many curriculums in total are listed?", "query": "SELECT count(*) FROM Courses", "Prediction": "COUNT(*) FROM Degree_Programs;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "How many courses are there?", "SpiderSynQuestion": "How many curriculums are there?", "query": "SELECT count(*) FROM Courses", "Prediction": "COUNT(*) FROM Degree_Programs;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "How is the math course described?", "SpiderSynQuestion": "How is the math curriculum described?", "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "Prediction": "course_description FROM Courses WHERE course_name = 'Math';"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What are the descriptions for all the math courses?", "SpiderSynQuestion": "What are the describing content for all the math curriculums?", "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "Prediction": "Courses.course_description FROM Courses WHERE Courses.course_name LIKE '%Math%';"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the zip code of the address in the city Port Chelsea?", "SpiderSynQuestion": "What is the zip code of the position in the city Port Chelsea?", "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "Prediction": "zip_postcode FROM Addresses WHERE city = 'Port Chelsea';"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the zip code for Port Chelsea?", "SpiderSynQuestion": "What is the zip code for Port Chelsea?", "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "Prediction": "zip_postcode FROM Addresses WHERE city = 'Port Chelsea';"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "Which department offers the most number of degrees? List department name and id.", "SpiderSynQuestion": "Which division offers the most number of degrees? List division name and id.", "query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Departments.department_id, Departments.department_name\n FROM Degree_Programs\n JOIN Departments ON Degree_Programs.department_id=Departments.department_id\n GROUP BY Departments.department_id\n ORDER BY COUNT(Degree_Programs.degree_program_id) DESC\n LIMIT 1;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "For each department id, what is the name of the department with the most number of degrees?", "SpiderSynQuestion": "For each division id, what is the name of the division with the most number of degrees?", "query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Departments.department_name \nFROM Departments \nJOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id \nGROUP BY Departments.department_id \nORDER BY COUNT(Degree_Programs.degree_program_id) DESC \nLIMIT 1;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "How many departments offer any degree?", "SpiderSynQuestion": "How many departments offer any degree?", "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "Prediction": "COUNT(DISTINCT Departments.department_id) FROM Departments INNER JOIN Degree_Programs ON Departments.department_id=Degree_Programs.department_id;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "How many different departments offer degrees?", "SpiderSynQuestion": "How many different departments offer degrees?", "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "Prediction": "COUNT(DISTINCT department_id) FROM Degree_Programs;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "How many different degree names are offered?", "SpiderSynQuestion": "How many different degree names are offered?", "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "Prediction": "COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "How many different degrees are offered?", "SpiderSynQuestion": "How many different degrees are offered?", "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "Prediction": "COUNT(DISTINCT degree_program_id) FROM Degree_Programs;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "How many degrees does the engineering department offer?", "SpiderSynQuestion": "How many degrees does the engineering division offer?", "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "Prediction": "COUNT(*) FROM Degree_Programs \nWHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'engineering');"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "How many degrees does the engineering department have?", "SpiderSynQuestion": "How many degrees does the engineering department have?", "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "Prediction": "COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering');"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What are the names and descriptions of all the sections?", "SpiderSynQuestion": "What are the names and describing contents of all the sections?", "query": "SELECT section_name ,  section_description FROM Sections", "Prediction": "section_name, section_description FROM Sections;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What are the names and descriptions for all the sections?", "SpiderSynQuestion": "What are the names and describing details for all the sections?", "query": "SELECT section_name ,  section_description FROM Sections", "Prediction": "section_name, section_description, other_details FROM Sections;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What are the names and id of courses having at most 2 sections?", "SpiderSynQuestion": "What are the names and id of curriculums having at most 2 sections?", "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "Prediction": "Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name \n FROM Degree_Programs \n WHERE Degree_Programs.degree_program_id IN \n (SELECT Sections.course_id FROM Sections GROUP BY Sections.course_id HAVING COUNT(*) <= 2);"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What are the names and ids of every course with less than 2 sections?", "SpiderSynQuestion": "What are the names and ids of every curriculum with less than 2 sections?", "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "Prediction": "degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id IN (SELECT department_id FROM Sections GROUP BY department_id HAVING COUNT(*) < 2);"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "List the section_name in reversed lexicographical order.", "SpiderSynQuestion": "List the section_name in reversed lexicographical order.", "query": "SELECT section_name FROM Sections ORDER BY section_name DESC", "Prediction": "section_name FROM Sections ORDER BY section_name DESC;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What are the names of the sections in reverse alphabetical order?", "SpiderSynQuestion": "What are the names of the sections in reverse alphabetical order?", "query": "SELECT section_name FROM Sections ORDER BY section_name DESC", "Prediction": "section_name FROM Sections ORDER BY section_name DESC;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the semester which most student registered in? Show both the name and the id.", "SpiderSynQuestion": "What is the academic session which most undergraduate registered in? Show both the name and the id.", "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Semesters.semester_id, Semesters.semester_name\n FROM Student_Enrolment\n JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\n JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id\n WHERE Degree_Programs.degree_summary_name LIKE '%Undergraduate%'\n GROUP BY Semesters.semester_id\n ORDER BY COUNT(Student_Enrolment.student_id) DESC\n LIMIT 1;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "For each semester, what is the name and id of the one with the most students registered?", "SpiderSynQuestion": "For each semester, what is the name and id of the one with the most undergraduate registered?", "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Semesters.semester_id, Semesters.semester_name\n FROM Semesters\n JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id\n JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\n WHERE Degree_Programs.degree_summary_name = 'Undergraduate'\n GROUP BY Semesters.semester_id\n ORDER BY COUNT(Student_Enrolment.student_id) DESC\n LIMIT 1;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the description of the department whose name has the substring the computer?", "SpiderSynQuestion": "What is the describing details of the division whose name has the substring the computer?", "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "Prediction": "department_description \n FROM Departments \n WHERE department_name LIKE '%computer%';"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the department description for the one whose name has the word computer?", "SpiderSynQuestion": "What is the division describing details for the one whose name has the word computer?", "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "Prediction": "Degree_Programs.other_details \nFROM Degree_Programs \nJOIN Departments ON Degree_Programs.department_id=Departments.department_id \nWHERE Departments.department_name LIKE '%computer%';"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "SpiderSynQuestion": "Who are enrolled in 2 degree programs in one term? List the given name, middle name and family name and the id.", "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "Prediction": "Students.first_name, Students.middle_name, Students.last_name, Students.student_id\n FROM Students\n JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id\n JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id\n WHERE Student_Enrolment.degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id HAVING COUNT(*) = 2)\n AND Student_Enrolment.semester_id = [insert term id here]\n GROUP BY Students.student_id\n HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?", "SpiderSynQuestion": "What are the given, middle, and family names, along with the ids, of all undergraduates who enrolled in 2 degree programs in one term?", "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "Prediction": "Students.first_name, Students.middle_name, Students.last_name, Students.student_id\nFROM Students\nINNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id\nWHERE Student_Enrolment.degree_program_id IN (\n    SELECT degree_program_id\n    FROM Student_Enrolment\n    GROUP BY student_id, semester_id\n    HAVING COUNT(DISTINCT degree_program_id) = 2\n)\nAND Student_Enrolment.semester_id IN (\n    SELECT semester_id\n    FROM Student_Enrolment\n    GROUP BY student_id, semester_id\n    HAVING COUNT(DISTINCT degree_program_id) = 2\n)\nAND Degree_Programs.other_details LIKE '%undergraduate%';"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "SpiderSynQuestion": "Who is enrolled in a Bachelor degree program? List the given name, middle name, family name.", "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "Prediction": "Students.first_name, Students.middle_name, Students.last_name\n FROM Students\n JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id\n JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\n WHERE Degree_Programs.degree_summary_name = 'Bachelor';"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "SpiderSynQuestion": "What are the given, middle, and family names for everybody enrolled in a Bachelors program?", "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "Prediction": "Students.first_name, Students.middle_name, Students.last_name\n FROM Students\n JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id\n JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\n WHERE Degree_Programs.degree_summary_name = 'Bachelors';"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "Find the kind of program which most number of students are enrolled in?", "SpiderSynQuestion": "Find the kind of program which most number of students are enrolled in?", "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "Prediction": "Degree_Programs.degree_summary_name \nFROM Degree_Programs \nJOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id \nGROUP BY Degree_Programs.degree_program_id \nORDER BY COUNT(Student_Enrolment.student_id) DESC \nLIMIT 1;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the degree summary name that has the most number of students enrolled?", "SpiderSynQuestion": "What is the degree summary name that has the most number of students enrolled?", "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "Prediction": "Degree_Programs.degree_summary_name\nFROM Degree_Programs\nJOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id\nGROUP BY Degree_Programs.degree_summary_name\nORDER BY COUNT(Student_Enrolment.student_id) DESC\nLIMIT 1;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "Find the program which most number of students are enrolled in. List both the id and the summary.", "SpiderSynQuestion": "Find the program which most number of students are enrolled in. List both the id and the summary.", "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name \n FROM Degree_Programs \n JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id \n GROUP BY Degree_Programs.degree_program_id \n ORDER BY COUNT(Student_Enrolment.student_id) DESC \n LIMIT 1;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the program id and the summary of the degree that has the most students enrolled?", "SpiderSynQuestion": "What is the program id and the summary of the degree that has the most students enrolled?", "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name \n FROM Degree_Programs \n JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id \n GROUP BY Degree_Programs.degree_program_id \n ORDER BY COUNT(Student_Enrolment.student_id) DESC \n LIMIT 1;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.", "SpiderSynQuestion": "Which student has enrolled for the most times in any program? List the id, given name, middle name, family name, the number of enrollments and undergraduate id.", "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id) AS num_enrollments, Degree_Programs.degree_program_id\n FROM Student_Enrolment\n JOIN Students ON Student_Enrolment.student_id = Students.student_id\n JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\n GROUP BY Students.student_id\n ORDER BY num_enrollments DESC\n LIMIT 1;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?", "SpiderSynQuestion": "What is the given, middle, and family name, along with the id and number of enrollments, for the undergraduate who enrolled the most in any program?", "query": "SELECT  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Students.first_name, Students.middle_name, Students.last_name, Students.student_id, COUNT(Student_Enrolment.student_enrolment_id) AS num_enrollments\n FROM Students\n JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id\n JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\n WHERE Degree_Programs.degree_summary_name LIKE '%Undergraduate%'\n GROUP BY Students.student_id\n ORDER BY num_enrollments DESC\n LIMIT 1;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "Which semesters do not have any student enrolled? List the semester name.", "SpiderSynQuestion": "Which academic sessions do not have any student enrolled? List the academic session name.", "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "Prediction": "Semesters.semester_name \nFROM Semesters \nLEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id \nWHERE Student_Enrolment.student_enrolment_id IS NULL;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the name of the semester with no students enrolled?", "SpiderSynQuestion": "What is the name of the academic session with no students enrolled?", "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "Prediction": "Semesters.semester_name \nFROM Semesters \nLEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id \nWHERE Student_Enrolment.student_enrolment_id IS NULL;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What are all the course names of the courses which ever have students enrolled in?", "SpiderSynQuestion": "What are all the course names of the curriculums which ever have students enrolled in?", "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "Prediction": "DISTINCT course_name FROM Courses \nINNER JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What are the names of all courses that have some students enrolled?", "SpiderSynQuestion": "What are the names of all curriculums that have some students enrolled?", "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "Prediction": "Degree_Programs.degree_summary_name \nFROM Degree_Programs \nINNER JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What's the name of the course with most number of enrollments?", "SpiderSynQuestion": "What's the name of the curriculum with most number of enrollments?", "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "Prediction": "Degree_Programs.degree_summary_name\nFROM Degree_Programs\nJOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id\nGROUP BY Degree_Programs.degree_summary_name\nORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC\nLIMIT 1;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the name of the course with the most students enrolled?", "SpiderSynQuestion": "What is the name of the curriculum with the most students enrolled?", "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "Prediction": "Degree_Programs.degree_summary_name\nFROM Degree_Programs\nJOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id\nGROUP BY Degree_Programs.degree_program_id\nORDER BY COUNT(Student_Enrolment.student_id) DESC\nLIMIT 1;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "SpiderSynQuestion": "Find the family name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "Prediction": "Students.last_name \n FROM Students \n JOIN Addresses ON Students.current_address_id = Addresses.address_id \n WHERE Addresses.state_province_county = 'North Carolina' \n AND Students.student_id NOT IN (SELECT student_id FROM Student_Enrolment);"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "SpiderSynQuestion": "What are the family name of the students who live in North Carolina but have not registered in any degree programs?", "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "Prediction": "Students.last_name \nFROM Students \nJOIN Addresses ON Students.current_address_id = Addresses.address_id \nWHERE Addresses.state_province_county = 'North Carolina' \nAND Students.student_id NOT IN (SELECT student_id FROM Student_Enrolment);"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "Show the date and id of the transcript with at least 2 course results.", "SpiderSynQuestion": "Show the date and id of the student record with at least 2 curriculum results.", "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "Prediction": "Student_Enrolment.student_id, Transcripts.transcript_date\n FROM Student_Enrolment\n JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id\n JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id\n JOIN Transcripts ON Transcript_Contents.transcript_id = Transcripts.transcript_id\n GROUP BY Student_Enrolment.student_id\n HAVING COUNT(DISTINCT Student_Enrolment_Courses.course_id) >= 2;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the date and id of the transcript with at least 2 courses listed?", "SpiderSynQuestion": "What is the date and id of the student record with at least 2 curriculums listed?", "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "Prediction": "Students.date_first_registered, Students.student_id\n FROM Students\n JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id\n GROUP BY Students.student_id\n HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) >= 2;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "SpiderSynQuestion": "What is the phone number of the man with the given name Timmothy and the family name Ward?", "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "Prediction": "Students.cell_mobile_number \n FROM Students \n WHERE Students.first_name = 'Timmothy' AND Students.last_name = 'Ward';"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the mobile phone number of the student named Timothy Ward?", "SpiderSynQuestion": "What is the phone number of the student named Timothy Ward?", "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "Prediction": "Students.cell_mobile_number FROM Students WHERE Students.first_name='Timothy' AND Students.last_name='Ward';"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "Who is the first student to register? List the first name, middle name and last name.", "SpiderSynQuestion": "Who is the first student to register? List the given name, middle name and family name.", "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "Prediction": "first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the first, middle, and last name of the first student to register?", "SpiderSynQuestion": "What is the given, middle, and family name of the first student to register?", "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "Prediction": "first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students);"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "SpiderSynQuestion": "Who is the earliest graduate of the school? List the given name, middle name and family name.", "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "Prediction": "Students.first_name, Students.middle_name, Students.last_name\n FROM Students\n JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id\n JOIN Transcripts ON Students.student_id = Transcripts.transcript_id\n ORDER BY Transcripts.transcript_date ASC\n LIMIT 1;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the first, middle, and last name of the earliest school graduate?", "SpiderSynQuestion": "What is the given, middle, and family name of the earliest school graduate?", "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "Prediction": "first_name, middle_name, last_name \nFROM Students \nWHERE date_left = (SELECT MIN(date_left) FROM Students);"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "Whose permanent address is different from his or her current address? List his or her first name.", "SpiderSynQuestion": "Whose permanent address is different from his or her current address? List his or her given name.", "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "Prediction": "first_name FROM Students WHERE permanent_address_id != current_address_id;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the first name of the student whose permanent address is different from his or her current one?", "SpiderSynQuestion": "What is the given name of the student whose permanent address is different from his or her current one?", "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "Prediction": "Students.first_name \nFROM Students \nJOIN Addresses ON Students.permanent_address_id = Addresses.address_id \nWHERE Students.current_address_id != Students.permanent_address_id;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "Which address holds the most number of students currently? List the address id and all lines.", "SpiderSynQuestion": "Which place holds the most number of students currently? List the place id and all lines.", "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3\n FROM Students\n JOIN Addresses ON Students.current_address_id = Addresses.address_id\n GROUP BY Addresses.address_id\n ORDER BY COUNT(*) DESC\n LIMIT 1;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the id, line 1, and line 2 of the address with the most students?", "SpiderSynQuestion": "What is the id, line 1, and line 2 of the address with the most students?", "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Addresses.address_id, Addresses.line_1, Addresses.line_2\n FROM Addresses\n JOIN Students ON Students.permanent_address_id = Addresses.address_id OR Students.current_address_id = Addresses.address_id\n GROUP BY Addresses.address_id\n ORDER BY COUNT(*) DESC\n LIMIT 1;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "On average, when were the transcripts printed?", "SpiderSynQuestion": "On average, when were the student record printed?", "query": "SELECT avg(transcript_date) FROM Transcripts", "Prediction": "AVG(transcript_date) FROM Transcripts;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the average transcript date?", "SpiderSynQuestion": "What is the average student record date?", "query": "SELECT avg(transcript_date) FROM Transcripts", "Prediction": "AVG(date_first_registered) FROM Students;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "When is the first transcript released? List the date and details.", "SpiderSynQuestion": "When is the first student record released? List the date and details.", "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "Prediction": "date_first_registered, other_student_details FROM Students ORDER BY date_first_registered ASC LIMIT 1;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the earliest date of a transcript release, and what details can you tell me?", "SpiderSynQuestion": "What is the earliest date of a transcript release, and what particulars can you tell me?", "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "Prediction": "MIN(transcript_date), other_details FROM Transcripts;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "How many transcripts are released?", "SpiderSynQuestion": "How many student record are released?", "query": "SELECT count(*) FROM Transcripts", "Prediction": "COUNT(*) FROM Students;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "How many transcripts are listed?", "SpiderSynQuestion": "How many student records are listed?", "query": "SELECT count(*) FROM Transcripts", "Prediction": "COUNT(*) FROM Students;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the last transcript release date?", "SpiderSynQuestion": "What is the last student record release date?", "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "Prediction": "date_left FROM Students ORDER BY date_left DESC LIMIT 1;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "When was the last transcript released?", "SpiderSynQuestion": "When was the last student record released?", "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "Prediction": "date_left FROM Students ORDER BY date_left DESC LIMIT 1;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "SpiderSynQuestion": "How many times at most can a curriculum enrollment result show in different student records? Also show the curriculum enrollment id.", "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "MAX(enrollment_count), student_enrolment_id\n FROM (\n SELECT COUNT(DISTINCT student_id) as enrollment_count, student_enrolment_id\n FROM Student_Enrolment\n GROUP BY degree_program_id, semester_id\n ) as enrollment_counts;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "SpiderSynQuestion": "What is the maximum number of times that a curriculum shows up in different student records and what is that curriculum's enrollment id?", "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Student_Enrolment.degree_program_id, COUNT(*) AS num_enrollments\n FROM Student_Enrolment\n GROUP BY Student_Enrolment.degree_program_id\n ORDER BY num_enrollments DESC\n LIMIT 1;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "Show the date of the transcript which shows the least number of results, also list the id.", "SpiderSynQuestion": "Show the date of the student record which shows the least number of results, also list the id.", "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "Prediction": "student_id, date_first_registered \n FROM Students \n WHERE student_id IN \n (SELECT student_id FROM Student_Enrolment) \n ORDER BY date_first_registered \n LIMIT 1;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the date and id of the transcript with the least number of results?", "SpiderSynQuestion": "What is the date and id of the student record with the least number of results?", "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "Prediction": "Student_Enrolment.student_id, Student_Enrolment.date_first_registered\n FROM Student_Enrolment\n GROUP BY Student_Enrolment.student_id\n ORDER BY COUNT(*) ASC\n LIMIT 1;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "Find the semester when both Master students and Bachelor students got enrolled in.", "SpiderSynQuestion": "Find the academic session when both Master students and Bachelor students got enrolled in.", "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "Prediction": "Semesters.semester_name\nFROM Semesters\nINNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id\nINNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nWHERE Degree_Programs.degree_summary_name IN ('Master', 'Bachelor')\nGROUP BY Semesters.semester_name\nHAVING COUNT(DISTINCT Degree_Programs.degree_summary_name) = 2;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "SpiderSynQuestion": "What is the id of the academic session that had both Masters and Bachelors students enrolled?", "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "Prediction": "Student_Enrolment.semester_id \nFROM Student_Enrolment \nINNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id \nWHERE Degree_Programs.degree_summary_name IN ('Masters', 'Bachelors') \nGROUP BY Student_Enrolment.semester_id \nHAVING COUNT(DISTINCT Degree_Programs.degree_summary_name) = 2;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "How many different addresses do the students currently live?", "SpiderSynQuestion": "How many different places do the students currently live?", "query": "SELECT count(DISTINCT current_address_id) FROM Students", "Prediction": "COUNT(DISTINCT current_address_id) FROM Students;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What are the different addresses that have students living there?", "SpiderSynQuestion": "What are the different places that have students living there?", "query": "SELECT count(DISTINCT current_address_id) FROM Students", "Prediction": "Addresses.city, Addresses.state_province_county, Addresses.country\n FROM Addresses\n JOIN Students ON Addresses.address_id = Students.current_address_id OR Addresses.address_id = Students.permanent_address_id\n GROUP BY Addresses.city, Addresses.state_province_county, Addresses.country;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "List all the student details in reversed lexicographical order.", "SpiderSynQuestion": "List all the student particulars in reversed lexicographical order.", "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "Prediction": "* FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC;"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What other details can you tell me about students in reverse alphabetical order?", "SpiderSynQuestion": "What other particulars can you tell me about students in reverse alphabetical order?", "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "Prediction": "* FROM Students ORDER BY last_name DESC"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "Describe the section h.", "SpiderSynQuestion": "Describe the section h.", "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "Prediction": "* FROM Students WHERE first_name = 'John';"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What is the description for the section named h?", "SpiderSynQuestion": "What is the description for the section named h?", "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "Prediction": "section_description FROM Sections WHERE section_name = 'h';"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582.", "SpiderSynQuestion": "Find the given name of the students who permanently live in the country Haiti or have the phone number 09700166582.", "query": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'", "Prediction": "Students.first_name \nFROM Students \nJOIN Addresses ON Students.permanent_address_id = Addresses.address_id \nWHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582';"}
{"db_id": "student_transcripts_tracking", "SpiderQuestion": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582?", "SpiderSynQuestion": "What are the given names of the students who live in Haiti permanently or have the phone number 09700166582?", "query": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'", "Prediction": "Students.first_name \nFROM Students \nJOIN Addresses ON Students.permanent_address_id = Addresses.address_id \nWHERE Addresses.country = 'Haiti' \nOR Students.cell_mobile_number = '09700166582';"}
{"db_id": "tvshow", "SpiderQuestion": "List the title of all cartoons in alphabetical order.", "SpiderSynQuestion": "List the name of all animations in alphabetical order.", "query": "SELECT Title FROM Cartoon ORDER BY title", "Prediction": "Title FROM Cartoon ORDER BY Title ASC;"}
{"db_id": "tvshow", "SpiderQuestion": "What are the titles of the cartoons sorted alphabetically?", "SpiderSynQuestion": "What are the names of the animations sorted alphabetically?", "query": "SELECT Title FROM Cartoon ORDER BY title", "Prediction": "Title FROM Cartoon ORDER BY Title ASC;"}
{"db_id": "tvshow", "SpiderQuestion": "List all cartoon directed by \"Ben Jones\".", "SpiderSynQuestion": "List all animation directed by \"Ben Jones\".", "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "Prediction": "Cartoon.Title \nFROM Cartoon \nWHERE Cartoon.Directed_by = \"Ben Jones\";"}
{"db_id": "tvshow", "SpiderQuestion": "What are the names of all cartoons directed by Ben Jones?", "SpiderSynQuestion": "What are the names of all animations directed by Ben Jones?", "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "Prediction": "Title FROM Cartoon WHERE Directed_by = 'Ben Jones';"}
{"db_id": "tvshow", "SpiderQuestion": "How many cartoons were written by \"Joseph Kuhr\"?", "SpiderSynQuestion": "How many animations were written by \"Joseph Kuhr\"?", "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "Prediction": "COUNT(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"}
{"db_id": "tvshow", "SpiderQuestion": "What is the number of cartoones written by Joseph Kuhr?", "SpiderSynQuestion": "What is the number of animations written by Joseph Kuhr?", "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "Prediction": "COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';"}
{"db_id": "tvshow", "SpiderQuestion": "list all cartoon titles and their directors ordered by their air date", "SpiderSynQuestion": "list all animation and their directors ordered by their airdate", "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "Prediction": "Cartoon.Title, Cartoon.Directed_by \n FROM Cartoon \n WHERE Cartoon.Directed_by IS NOT NULL \n ORDER BY Cartoon.Original_air_date;"}
{"db_id": "tvshow", "SpiderQuestion": "What is the name and directors of all the cartoons that are ordered by air date?", "SpiderSynQuestion": "What is the name and directors of all the animation that are ordered by released date?", "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "Prediction": "Title, Directed_by \n FROM Cartoon \n ORDER BY Original_air_date;"}
{"db_id": "tvshow", "SpiderQuestion": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "SpiderSynQuestion": "List the name of all animation directed by \"Ben Jones\" or \"Brandon Vietti\".", "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "Prediction": "Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"}
{"db_id": "tvshow", "SpiderQuestion": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "SpiderSynQuestion": "What are the names of all animation directed by Ben Jones or Brandon Vietti?", "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "Prediction": "Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';"}
{"db_id": "tvshow", "SpiderQuestion": "Which country has the most of TV Channels? List the country and number of TV Channels it has.", "SpiderSynQuestion": "Which country has the most of TV Channels? List the country name and number of TV Channels it has.", "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "Prediction": "Country, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_Channels DESC LIMIT 1;"}
{"db_id": "tvshow", "SpiderQuestion": "What is the country with the most number of TV Channels and how many does it have?", "SpiderSynQuestion": "What is the State with the most number of TV Channels and how many does it have?", "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "Prediction": "TV_Channel.Country, COUNT(TV_Channel.id) AS num_channels\n FROM TV_Channel\n GROUP BY TV_Channel.Country\n ORDER BY num_channels DESC\n LIMIT 1;"}
{"db_id": "tvshow", "SpiderQuestion": "List the number of different series names and contents in the TV Channel table.", "SpiderSynQuestion": "List the number of different serial names and contents in the TV Channel table.", "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "Prediction": "COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;"}
{"db_id": "tvshow", "SpiderQuestion": "How many different series and contents are listed in the TV Channel table?", "SpiderSynQuestion": "How many different serial and contents are listed in the TV Channel table?", "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "Prediction": "COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;"}
{"db_id": "tvshow", "SpiderQuestion": "What is the content of TV Channel with serial name \"Sky Radio\"?", "SpiderSynQuestion": "What is the content of TV Channel with serial name \"Sky Radio\"?", "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "Prediction": "* FROM TV_Channel WHERE series_name = \"Sky Radio\";"}
{"db_id": "tvshow", "SpiderQuestion": "What is the content of the series Sky Radio?", "SpiderSynQuestion": "What is the content of the series Sky Radio?", "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "Prediction": "TV_Channel.Content \nFROM TV_Channel \nINNER JOIN TV_series ON TV_Channel.id = TV_series.Channel \nWHERE TV_Channel.series_name = 'Sky Radio';"}
{"db_id": "tvshow", "SpiderQuestion": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "SpiderSynQuestion": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "Prediction": "Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"}
{"db_id": "tvshow", "SpiderQuestion": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "SpiderSynQuestion": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "Prediction": "TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id=TV_series.Channel WHERE TV_Channel.series_name='Sky Radio';"}
{"db_id": "tvshow", "SpiderQuestion": "How many TV Channel using language English?", "SpiderSynQuestion": "How many TV Channel using language English?", "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "Prediction": "COUNT(*) FROM TV_Channel WHERE Language='English';"}
{"db_id": "tvshow", "SpiderQuestion": "How many TV Channels use the English language?", "SpiderSynQuestion": "How many TV Channels use the English language?", "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "Prediction": "COUNT(*) FROM TV_Channel WHERE Language = 'English';"}
{"db_id": "tvshow", "SpiderQuestion": "List the language used least number of TV Channel. List language and number of TV Channel.", "SpiderSynQuestion": "List the language used least number of TV Channel. List language and number of TV Channel.", "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "Prediction": "Language, COUNT(*) AS num_channels\n FROM TV_Channel\n GROUP BY Language\n ORDER BY num_channels ASC\n LIMIT 1;"}
{"db_id": "tvshow", "SpiderQuestion": "What are the languages used by the least number of TV Channels and how many channels use it?", "SpiderSynQuestion": "What are the languages used by the least number of TV Channels and how many channels use it?", "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "Prediction": "Language, COUNT(*) AS num_channels\n FROM TV_Channel\n GROUP BY Language\n ORDER BY num_channels ASC\n LIMIT 1;"}
{"db_id": "tvshow", "SpiderQuestion": "List each language and the number of TV Channels using it.", "SpiderSynQuestion": "List each language and the number of TV Channels using it.", "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "Prediction": "Language, COUNT(*) FROM TV_Channel GROUP BY Language;"}
{"db_id": "tvshow", "SpiderQuestion": "For each language, list the number of TV Channels that use it.", "SpiderSynQuestion": "For each language, list the number of TV Channels that use it.", "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "Prediction": "Language, COUNT(*) FROM TV_Channel GROUP BY Language;"}
{"db_id": "tvshow", "SpiderQuestion": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "SpiderSynQuestion": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "Prediction": "TV_Channel.series_name \nFROM Cartoon \nJOIN TV_Channel ON Cartoon.Channel=TV_Channel.id \nWHERE Cartoon.Title=\"The Rise of the Blue Beetle!\";"}
{"db_id": "tvshow", "SpiderQuestion": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "SpiderSynQuestion": "What is the serial name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "Prediction": "TV_Channel.series_name \nFROM Cartoon \nJOIN TV_Channel ON Cartoon.Channel=TV_Channel.id \nWHERE Cartoon.Title=\"The Rise of the Blue Beetle\";"}
{"db_id": "tvshow", "SpiderQuestion": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "SpiderSynQuestion": "List the name of all  animations showed on TV Channel with series name \"Sky Radio\".", "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "Prediction": "Cartoon.Title \n FROM Cartoon \n JOIN TV_Channel ON Cartoon.Channel=TV_Channel.id \n WHERE TV_Channel.series_name=\"Sky Radio\";"}
{"db_id": "tvshow", "SpiderQuestion": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "SpiderSynQuestion": "What is the name of all the animations that are on the TV Channel with the series name \"Sky Radio\"?", "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "Prediction": "Cartoon.Title \nFROM Cartoon \nJOIN TV_Channel ON Cartoon.Channel=TV_Channel.id \nWHERE TV_Channel.series_name=\"Sky Radio\";"}
{"db_id": "tvshow", "SpiderQuestion": "List the  Episode of all TV series sorted by rating.", "SpiderSynQuestion": "List the Episode of all TV series sorted by rating.", "query": "SELECT Episode FROM TV_series ORDER BY rating", "Prediction": "Episode FROM TV_series ORDER BY Rating DESC;"}
{"db_id": "tvshow", "SpiderQuestion": "What are all of the episodes ordered by ratings?", "SpiderSynQuestion": "What are all of the episodes ordered by ratings?", "query": "SELECT Episode FROM TV_series ORDER BY rating", "Prediction": "TV_series.Episode \nFROM TV_series \nORDER BY TV_series.Rating DESC;"}
{"db_id": "tvshow", "SpiderQuestion": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "SpiderSynQuestion": "List top 3 highest score  TV series. List the TV series's Episode and score.", "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "Prediction": "Episode, Rating \n FROM TV_series \n ORDER BY Rating DESC \n LIMIT 3;"}
{"db_id": "tvshow", "SpiderQuestion": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", "SpiderSynQuestion": "What are 3 most highly rated episodes in the TV series table and what were those scores?", "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "Prediction": "Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"}
{"db_id": "tvshow", "SpiderQuestion": "What is minimum and maximum share of TV series?", "SpiderSynQuestion": "What is minimum and maximum share of TV series?", "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "Prediction": "MIN(Share), MAX(Share) FROM TV_series;"}
{"db_id": "tvshow", "SpiderQuestion": "What is the maximum and minimum share for the TV series?", "SpiderSynQuestion": "What is the maximum and minimum share for the TV series?", "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "Prediction": "MAX(Share), MIN(Share) FROM TV_series;"}
{"db_id": "tvshow", "SpiderQuestion": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "SpiderSynQuestion": "What is the airdate of TV series with Episode \"A Love of a Lifetime\"?", "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "Prediction": "Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"}
{"db_id": "tvshow", "SpiderQuestion": "When did the episode \"A Love of a Lifetime\" air?", "SpiderSynQuestion": "When did the episode \"A Love of a Lifetime\" released?", "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "Prediction": "Original_air_date FROM Cartoon WHERE Title = \"A Love of a Lifetime\";"}
{"db_id": "tvshow", "SpiderQuestion": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "SpiderSynQuestion": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "Prediction": "Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"}
{"db_id": "tvshow", "SpiderQuestion": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "SpiderSynQuestion": "What is the score per week for the episode \"A Love of a Lifetime\"?", "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "Prediction": "TV_series.Weekly_Rank, TV_series.Rating\n FROM TV_series\n JOIN Cartoon ON TV_series.Channel = Cartoon.Channel\n WHERE Cartoon.Title = \"A Love of a Lifetime\";"}
{"db_id": "tvshow", "SpiderQuestion": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "SpiderSynQuestion": "What is the TV Channel of TV serial with Episode \"A Love of a Lifetime\"? List the TV Channel's serial name.", "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "Prediction": "TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id=TV_series.Channel WHERE TV_series.Episode=\"A Love of a Lifetime\";"}
{"db_id": "tvshow", "SpiderQuestion": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "SpiderSynQuestion": "What is the serial name that has the episode \"A Love of a Lifetime\"?", "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "Prediction": "TV_Channel.series_name \n FROM TV_series \n JOIN TV_Channel ON TV_series.Channel=TV_Channel.id \n WHERE TV_series.Episode=\"A Love of a Lifetime\";"}
{"db_id": "tvshow", "SpiderQuestion": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "SpiderSynQuestion": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "Prediction": "TV_series.Episode \n FROM TV_series \n JOIN TV_Channel ON TV_series.Channel=TV_Channel.id \n WHERE TV_Channel.series_name=\"Sky Radio\";"}
{"db_id": "tvshow", "SpiderQuestion": "What is the episode for the TV series named \"Sky Radio\"?", "SpiderSynQuestion": "What is the episode for the TV series named \"Sky Radio\"?", "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "Prediction": "TV_series.Episode FROM TV_series \nINNER JOIN TV_Channel ON TV_series.Channel=TV_Channel.id \nWHERE TV_Channel.series_name=\"Sky Radio\";"}
{"db_id": "tvshow", "SpiderQuestion": "Find the number of cartoons directed by each of the listed directors.", "SpiderSynQuestion": "Find the number of animations directed by each of the listed directors.", "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "Prediction": "Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by;"}
{"db_id": "tvshow", "SpiderQuestion": "How many cartoons did each director create?", "SpiderSynQuestion": "How many animations did each director create?", "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "Prediction": "Directed_by, COUNT(*) \n FROM Cartoon \n GROUP BY Directed_by;"}
{"db_id": "tvshow", "SpiderQuestion": "Find the production code and channel of the most recently aired cartoon.", "SpiderSynQuestion": "Find the production number and channel of the most recently released cartoon.", "query": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1", "Prediction": "Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon);"}
{"db_id": "tvshow", "SpiderQuestion": "What is the produdction code and channel of the most recent cartoon?", "SpiderSynQuestion": "What is the produdction number and channel of the most recent cartoon?", "query": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1", "Prediction": "Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon);"}
{"db_id": "tvshow", "SpiderQuestion": "Find the package choice and series name of the TV channel that has high definition TV.", "SpiderSynQuestion": "Find the package choice and serial name of the TV channel that has HD TV.", "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "Prediction": "TV_Channel.Package_Option, TV_Channel.series_name \n FROM TV_Channel \n WHERE TV_Channel.Hight_definition_TV = 1;"}
{"db_id": "tvshow", "SpiderQuestion": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "SpiderSynQuestion": "What are the package options and the name of the serial for the TV Channel that supports HD TV?", "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "Prediction": "TV_Channel.Package_Option, TV_Channel.series_name \n FROM TV_Channel \n WHERE TV_Channel.Hight_definition_TV = 1;"}
{"db_id": "tvshow", "SpiderQuestion": "which countries' tv channels are playing some cartoon written by Todd Casey?", "SpiderSynQuestion": "which countries' tv channels are playing some animation written by Todd Casey?", "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "Prediction": "TV_Channel.Country\nFROM Cartoon\nJOIN TV_Channel ON Cartoon.Channel=TV_Channel.id\nWHERE Cartoon.Written_by='Todd Casey';"}
{"db_id": "tvshow", "SpiderQuestion": "What are the countries that have cartoons on TV that were written by Todd Casey?", "SpiderSynQuestion": "What are the State that have animations on TV that were written by Todd Casey?", "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "Prediction": "TV_Channel.Country\nFROM Cartoon\nJOIN TV_Channel ON Cartoon.Channel=TV_Channel.id\nWHERE Cartoon.Written_by='Todd Casey';"}
{"db_id": "tvshow", "SpiderQuestion": "which countries' tv channels are not playing any cartoon written by Todd Casey?", "SpiderSynQuestion": "which countries' tv channels are not playing any animation written by Todd Casey?", "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "Prediction": "TV_Channel.Country\nFROM TV_Channel\nWHERE TV_Channel.id NOT IN (\n  SELECT Cartoon.Channel\n  FROM Cartoon\n  WHERE Cartoon.Written_by = 'Todd Casey'\n);"}
{"db_id": "tvshow", "SpiderQuestion": "What are the countries that are not playing cartoons written by Todd Casey?", "SpiderSynQuestion": "What are the States that are not playing animations written by Todd Casey?", "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "Prediction": "TV_Channel.Country\nFROM Cartoon\nJOIN TV_Channel ON Cartoon.Channel=TV_Channel.id\nWHERE Cartoon.Written_by != 'Todd Casey' AND Cartoon.Title LIKE '%animation%';"}
{"db_id": "tvshow", "SpiderQuestion": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "SpiderSynQuestion": "Find the serial name and State of the tv channel that is playing some animation directed by Ben Jones and Michael Chang?", "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "Prediction": "TV_Channel.series_name, TV_Channel.Country\n FROM Cartoon\n JOIN TV_Channel ON Cartoon.Channel=TV_Channel.id\n WHERE Cartoon.Directed_by='Ben Jones' AND Cartoon.Directed_by='Michael Chang';"}
{"db_id": "tvshow", "SpiderQuestion": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "SpiderSynQuestion": "What is the serial name and nation of all TV channels that are playing animations directed by Ben Jones and animations directed by Michael Chang?", "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "Prediction": "TV_Channel.series_name, TV_Channel.Country \n FROM TV_Channel \n JOIN Cartoon ON Cartoon.Channel=TV_Channel.id \n WHERE Cartoon.Directed_by='Ben Jones' OR Cartoon.Directed_by='Michael Chang'"}
{"db_id": "tvshow", "SpiderQuestion": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "SpiderSynQuestion": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "Prediction": "TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country \n FROM TV_Channel \n WHERE TV_Channel.Language != 'English';"}
{"db_id": "tvshow", "SpiderQuestion": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "SpiderSynQuestion": "What is the pixel aspect ratio and nation of origin for all TV channels that do not use English?", "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "Prediction": "Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';"}
{"db_id": "tvshow", "SpiderQuestion": "find id of the tv channels that from the countries where have more than two tv channels.", "SpiderSynQuestion": "find id of the tv channels that from the States where have more than two tv channels.", "query": "SELECT id FROM tv_channel where country in(select country from tv_channel GROUP BY country HAVING count(*)  >  2)", "Prediction": "TV_Channel.id \nFROM TV_Channel \nWHERE Country = 'States' \nGROUP BY Country \nHAVING COUNT(id) > 2;"}
{"db_id": "tvshow", "SpiderQuestion": "What are the ids of all tv channels that have more than 2 TV channels?", "SpiderSynQuestion": "What are the ids of all tv channels that have more than 2 TV channels?", "query": "SELECT id FROM tv_channel where country in(select country from tv_channel GROUP BY country HAVING count(*)  >  2)", "Prediction": "TV_Channel.id \nFROM TV_Channel \nWHERE (SELECT COUNT(*) FROM TV_Channel) > 2;"}
{"db_id": "tvshow", "SpiderQuestion": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "SpiderSynQuestion": "find the id of tv channels that do not play any animation directed by Ben Jones.", "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "Prediction": "TV_Channel.id \nFROM TV_Channel \nWHERE TV_Channel.id NOT IN \n(SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones');"}
{"db_id": "tvshow", "SpiderQuestion": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "SpiderSynQuestion": "What are the ids of the TV channels that do not have any animations directed by Ben Jones?", "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "Prediction": "TV_Channel.id \nFROM TV_Channel \nLEFT JOIN Cartoon ON Cartoon.Channel=TV_Channel.id \nWHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL;"}
{"db_id": "tvshow", "SpiderQuestion": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "SpiderSynQuestion": "find the package option of the tv channel that do not have any animation directed by Ben Jones.", "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "Prediction": "TV_Channel.Package_Option\nFROM TV_Channel\nWHERE TV_Channel.id NOT IN (\n    SELECT Cartoon.Channel\n    FROM Cartoon\n    WHERE Cartoon.Directed_by = 'Ben Jones'\n);"}
{"db_id": "tvshow", "SpiderQuestion": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "SpiderSynQuestion": "What are the package options of all tv channels that are not playing any animations directed by Ben Jones?", "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "Prediction": "TV_Channel.Package_Option \nFROM TV_Channel \nLEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL;"}
{"db_id": "poker_player", "SpiderQuestion": "How many poker players are there?", "SpiderSynQuestion": "How many car gamers are there?", "query": "SELECT count(*) FROM poker_player", "Prediction": "COUNT(*) FROM people WHERE Nationality = 'car gamer';"}
{"db_id": "poker_player", "SpiderQuestion": "Count the number of poker players.", "SpiderSynQuestion": "Count the number of car gamers.", "query": "SELECT count(*) FROM poker_player", "Prediction": "COUNT(*) FROM gamers WHERE favorite_game = 'Car Racing';"}
{"db_id": "poker_player", "SpiderQuestion": "List the earnings of poker players in descending order.", "SpiderSynQuestion": "List the earnings of poker players in descending order.", "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "Prediction": "Earnings FROM poker_player ORDER BY Earnings DESC;"}
{"db_id": "poker_player", "SpiderQuestion": "What are the earnings of poker players, ordered descending by value?", "SpiderSynQuestion": "What are the earnings of poker players, ordered descending by value?", "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "Prediction": "Earnings FROM poker_player ORDER BY Earnings DESC;"}
{"db_id": "poker_player", "SpiderQuestion": "List the final tables made and the best finishes of poker players.", "SpiderSynQuestion": "List the final tables made and the best finishes of car gamers.", "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "Prediction": "poker_player.Final_Table_Made, poker_player.Best_Finish\n FROM poker_player\n JOIN people ON poker_player.People_ID = people.People_ID\n WHERE people.Nationality = 'car gamer';"}
{"db_id": "poker_player", "SpiderQuestion": "What are the final tables made and best finishes for all poker players?", "SpiderSynQuestion": "What are the final tables made and best finishes for all car gamers?", "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "Prediction": "poker_player.Final_Table_Made, poker_player.Best_Finish \n FROM poker_player \n JOIN people ON poker_player.People_ID=people.People_ID \n WHERE people.Nationality='car gamer'"}
{"db_id": "poker_player", "SpiderQuestion": "What is the average earnings of poker players?", "SpiderSynQuestion": "What is the average revenues of car gamers?", "query": "SELECT avg(Earnings) FROM poker_player", "Prediction": "AVG(Earnings) FROM poker_player;"}
{"db_id": "poker_player", "SpiderQuestion": "Return the average earnings across all poker players.", "SpiderSynQuestion": "Return the average incomes across all car gamers.", "query": "SELECT avg(Earnings) FROM poker_player", "Prediction": "AVG(Earnings) FROM poker_player INNER JOIN people ON poker_player.People_ID=people.People_ID WHERE Nationality='car gamer';"}
{"db_id": "poker_player", "SpiderQuestion": "What is the money rank of the poker player with the highest earnings?", "SpiderSynQuestion": "What is the money rank of the car gamer with the highest incomes?", "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "Prediction": "poker_player.Money_Rank \nFROM poker_player \nJOIN people ON poker_player.People_ID=people.People_ID \nWHERE people.Nationality='car gamer' \nORDER BY poker_player.Earnings DESC \nLIMIT 1;"}
{"db_id": "poker_player", "SpiderQuestion": "Return the money rank of the player with the greatest earnings.", "SpiderSynQuestion": "Return the money rank of the gamer with the greatest revenues.", "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "Prediction": "poker_player.Money_Rank \nFROM poker_player \nWHERE poker_player.Earnings = (SELECT MAX(poker_player.Earnings) FROM poker_player);"}
{"db_id": "poker_player", "SpiderQuestion": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "SpiderSynQuestion": "What is the maximum number of last tables made among car gamers with revenues less than 200000?", "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "Prediction": "MAX(Final_Table_Made) \nFROM poker_player \nINNER JOIN people ON poker_player.People_ID=people.People_ID \nWHERE Nationality='car gamer' AND Earnings<200000;"}
{"db_id": "poker_player", "SpiderQuestion": "Return the maximum final tables made across all poker players who have earnings below 200000.", "SpiderSynQuestion": "Return the maximum final tables made across all car gamers who have revenues below 200000.", "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "Prediction": "MAX(poker_player.Final_Table_Made) \nFROM poker_player \nINNER JOIN people ON poker_player.People_ID=people.People_ID \nWHERE poker_player.Earnings < 200000;"}
{"db_id": "poker_player", "SpiderQuestion": "What are the names of poker players?", "SpiderSynQuestion": "What are the names of car gamers?", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "Prediction": "name FROM gamers WHERE game = 'car'"}
{"db_id": "poker_player", "SpiderQuestion": "Return the names of all the poker players.", "SpiderSynQuestion": "Return the names of all the car gamers.", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "Prediction": "name FROM gamers WHERE game = 'car';"}
{"db_id": "poker_player", "SpiderQuestion": "What are the names of poker players whose earnings is higher than 300000?", "SpiderSynQuestion": "What are the names of car gamers whose incomes is higher than 300000?", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "Prediction": "people.Name FROM people JOIN car_gamer ON people.People_ID=car_gamer.People_ID WHERE car_gamer.Income > 300000;"}
{"db_id": "poker_player", "SpiderQuestion": "Give the names of poker players who have earnings above 300000.", "SpiderSynQuestion": "Give the names of car gamers who have revenues above 300000.", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "Prediction": "people.Name \nFROM people \nJOIN poker_player ON people.People_ID = poker_player.People_ID \nWHERE poker_player.Earnings > 300000;"}
{"db_id": "poker_player", "SpiderQuestion": "List the names of poker players ordered by the final tables made in ascending order.", "SpiderSynQuestion": "List the names of car gamers ordered by the final tables made in ascending order.", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "Prediction": "people.Name \nFROM people \nJOIN poker_player ON people.People_ID = poker_player.People_ID \nORDER BY poker_player.Final_Table_Made ASC;"}
{"db_id": "poker_player", "SpiderQuestion": "What are the names of poker players, ordered ascending by the number of final tables they have made?", "SpiderSynQuestion": "What are the names of car gamers, ordered ascending by the number of final tables they have made?", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "Prediction": "people.Name \nFROM people \nJOIN poker_player ON people.People_ID = poker_player.People_ID \nWHERE poker_player.Final_Table_Made = 1 \nORDER BY poker_player.Final_Table_Made ASC;"}
{"db_id": "poker_player", "SpiderQuestion": "What is the birth date of the poker player with the lowest earnings?", "SpiderSynQuestion": "What is the birth date of the car gamers with the lowest revenues?", "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "Prediction": "people.Birth_Date \n FROM people \n JOIN poker_player ON people.People_ID = poker_player.People_ID \n WHERE poker_player.Best_Finish = (SELECT MIN(Best_Finish) FROM poker_player) \n AND poker_player.Earnings = (SELECT MIN(Earnings) FROM poker_player);"}
{"db_id": "poker_player", "SpiderQuestion": "Return the birth date of the poker player with the lowest earnings.", "SpiderSynQuestion": "Return the birth date of the car gamers with the lowest revenues.", "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "Prediction": "people.Birth_Date\nFROM people\nJOIN poker_player ON people.People_ID = poker_player.People_ID\nWHERE poker_player.Earnings = (\n  SELECT MIN(Earnings)\n  FROM poker_player\n)"}
{"db_id": "poker_player", "SpiderQuestion": "What is the money rank of the tallest poker player?", "SpiderSynQuestion": "What is the money rank of the tallest car gamer?", "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "Prediction": "poker_player.Money_Rank \nFROM poker_player \nJOIN people ON poker_player.People_ID=people.People_ID \nWHERE people.Height = (SELECT MAX(Height) FROM people)"}
{"db_id": "poker_player", "SpiderQuestion": "Return the money rank of the poker player with the greatest height.", "SpiderSynQuestion": "Return the money rank of the car gamer with the greatest height.", "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "Prediction": "poker_player.Money_Rank \nFROM poker_player \nJOIN people ON poker_player.People_ID=people.People_ID \nWHERE people.Height = (SELECT MAX(Height) FROM people)"}
{"db_id": "poker_player", "SpiderQuestion": "What is the average earnings of poker players with height higher than 200?", "SpiderSynQuestion": "What is the average revenues of car gamers with height higher than 200?", "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "Prediction": "AVG(poker_player.Earnings) \nFROM poker_player \nJOIN people ON poker_player.People_ID=people.People_ID \nWHERE people.Height > 200 AND poker_player.Best_Finish = 'car gamer'"}
{"db_id": "poker_player", "SpiderQuestion": "Give average earnings of poker players who are taller than 200.", "SpiderSynQuestion": "Give average revenues of car gamers who are taller than 200.", "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "Prediction": "AVG(poker_player.Earnings) \nFROM poker_player \nJOIN people ON poker_player.People_ID=people.People_ID \nWHERE people.Height > 200;"}
{"db_id": "poker_player", "SpiderQuestion": "What are the names of poker players in descending order of earnings?", "SpiderSynQuestion": "What are the names of car gamers in descending order of revenues?", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "Prediction": "name FROM gamers ORDER BY revenue DESC;"}
{"db_id": "poker_player", "SpiderQuestion": "Return the names of poker players sorted by their earnings descending.", "SpiderSynQuestion": "Return the names of car gamers sorted by their revenues descending.", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "Prediction": "people.Name \nFROM people \nJOIN poker_player ON people.People_ID = poker_player.People_ID \nORDER BY poker_player.Earnings DESC;"}
{"db_id": "poker_player", "SpiderQuestion": "What are different nationalities of people and the corresponding number of people from each nation?", "SpiderSynQuestion": "What are different country of people and the corresponding number of people from each country?", "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "Prediction": "Nationality, COUNT(*) FROM people GROUP BY Nationality;"}
{"db_id": "poker_player", "SpiderQuestion": "How many people are there of each nationality?", "SpiderSynQuestion": "How many people are there of each country?", "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "Prediction": "Nationality, COUNT(*) FROM people GROUP BY Nationality;"}
{"db_id": "poker_player", "SpiderQuestion": "What is the most common nationality of people?", "SpiderSynQuestion": "What is the most common country of people?", "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "Prediction": "Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;"}
{"db_id": "poker_player", "SpiderQuestion": "Give the nationality that is most common across all people.", "SpiderSynQuestion": "Give the country that is most common across all people.", "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "Prediction": "Nationality \nFROM people \nGROUP BY Nationality \nORDER BY COUNT(*) DESC \nLIMIT 1;"}
{"db_id": "poker_player", "SpiderQuestion": "What are the nationalities that are shared by at least two people?", "SpiderSynQuestion": "What are the countries that are shared by at least two people?", "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "Prediction": "Nationality \nFROM people \nGROUP BY Nationality \nHAVING COUNT(*) > 1;"}
{"db_id": "poker_player", "SpiderQuestion": "Return the nationalities for which there are two or more people.", "SpiderSynQuestion": "Return the countries for which there are two or more people.", "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "Prediction": "Nationality\nFROM people\nGROUP BY Nationality\nHAVING COUNT(*) >= 2;"}
{"db_id": "poker_player", "SpiderQuestion": "List the names and birth dates of people in ascending alphabetical order of name.", "SpiderSynQuestion": "List the names and birth dates of people in ascending alphabetical order of name.", "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "Prediction": "Name, Birth_Date FROM people ORDER BY Name ASC;"}
{"db_id": "poker_player", "SpiderQuestion": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "SpiderSynQuestion": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "Prediction": "Name, Birth_Date FROM people ORDER BY Name ASC;"}
{"db_id": "poker_player", "SpiderQuestion": "Show names of people whose nationality is not \"Russia\".", "SpiderSynQuestion": "Show names of people whose nationality is not \"Russia\".", "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "Prediction": "Name FROM people WHERE Nationality != \"Russia\";"}
{"db_id": "poker_player", "SpiderQuestion": "What are the names of people who are not from Russia?", "SpiderSynQuestion": "What are the names of people who are not from Russia?", "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "Prediction": "Name FROM people WHERE Nationality != 'Russia';"}
{"db_id": "poker_player", "SpiderQuestion": "List the names of people that are not poker players.", "SpiderSynQuestion": "List the names of people that are not car gamers.", "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "Prediction": "people.Name \nFROM people \nLEFT JOIN car_gamer ON people.People_ID = car_gamer.People_ID \nWHERE car_gamer.People_ID IS NULL;"}
{"db_id": "poker_player", "SpiderQuestion": "What are the names of people who do not play poker?", "SpiderSynQuestion": "What are the names of people who do not car gamer?", "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "Prediction": "Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);"}
{"db_id": "poker_player", "SpiderQuestion": "How many distinct nationalities are there?", "SpiderSynQuestion": "How many distinct countries are there?", "query": "SELECT count(DISTINCT Nationality) FROM people", "Prediction": "COUNT(DISTINCT Nationality) FROM people;"}
{"db_id": "poker_player", "SpiderQuestion": "Count the number of different nationalities.", "SpiderSynQuestion": "Count the number of different countries.", "query": "SELECT count(DISTINCT Nationality) FROM people", "Prediction": "COUNT(DISTINCT Nationality) FROM people;"}
{"db_id": "voter_1", "SpiderQuestion": "How many states are there?", "SpiderSynQuestion": "How many states are there?", "query": "SELECT count(*) FROM area_code_state", "Prediction": "COUNT(DISTINCT state) FROM VOTES;"}
{"db_id": "voter_1", "SpiderQuestion": "List the contestant numbers and names, ordered by contestant name descending.", "SpiderSynQuestion": "List the competitor numbers and names, ordered by competitor name descending.", "query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC", "Prediction": "contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;"}
{"db_id": "voter_1", "SpiderQuestion": "List the vote ids, phone numbers and states of all votes.", "SpiderSynQuestion": "List the vote ids, telephone numbers and states of all votes.", "query": "SELECT vote_id ,  phone_number ,  state FROM votes", "Prediction": "vote_id, phone_number, state FROM VOTES;"}
{"db_id": "voter_1", "SpiderQuestion": "What are the maximum and minimum values of area codes?", "SpiderSynQuestion": "What are the maximum and minimum values of area codes?", "query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "Prediction": "MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE;"}
{"db_id": "voter_1", "SpiderQuestion": "What is last date created of votes from the state 'CA'?", "SpiderSynQuestion": "What is last date created of votes from the state 'CA'?", "query": "SELECT max(created) FROM votes WHERE state  =  'CA'", "Prediction": "MAX(created) FROM VOTES WHERE state='CA';"}
{"db_id": "voter_1", "SpiderQuestion": "What are the names of the contestants whose names are not 'Jessie Alloway'", "SpiderSynQuestion": "What are the names of the participants whose names are not 'Jessie Alloway'", "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "Prediction": "contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway';"}
{"db_id": "voter_1", "SpiderQuestion": "What are the distinct states and create time of all votes?", "SpiderSynQuestion": "What are the distinct states and set up time of all votes?", "query": "SELECT DISTINCT state ,  created FROM votes", "Prediction": "DISTINCT state, created FROM VOTES;"}
{"db_id": "voter_1", "SpiderQuestion": "What are the contestant numbers and names of the contestants who had at least two votes?", "SpiderSynQuestion": "What are the participant numbers and names of the participants who had at least two votes?", "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2", "Prediction": "CONTESTANTS.contestant_number, CONTESTANTS.contestant_name\nFROM CONTESTANTS\nINNER JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number\nGROUP BY CONTESTANTS.contestant_number, CONTESTANTS.contestant_name\nHAVING COUNT(VOTES.vote_id) >= 2;"}
{"db_id": "voter_1", "SpiderQuestion": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?", "SpiderSynQuestion": "Of all the competitors who got voted, what is the competitor number and name of the competitor who got least votes?", "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1", "Prediction": "CONTESTANTS.contestant_number, CONTESTANTS.contestant_name\n FROM CONTESTANTS\n WHERE CONTESTANTS.contestant_number IN (\n SELECT VOTES.contestant_number\n FROM VOTES\n GROUP BY VOTES.contestant_number\n HAVING COUNT(*) = (\n SELECT MIN(votes_count)\n FROM (\n SELECT COUNT(*) as votes_count\n FROM VOTES\n GROUP BY VOTES.contestant_number\n ) as vote_counts\n )\n )"}
{"db_id": "voter_1", "SpiderQuestion": "What are the number of votes from state 'NY' or 'CA'?", "SpiderSynQuestion": "What are the number of votes from nation 'NY' or 'CA'?", "query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'", "Prediction": "COUNT(*) FROM VOTES WHERE state='NY' OR state='CA';"}
{"db_id": "voter_1", "SpiderQuestion": "How many contestants did not get voted?", "SpiderSynQuestion": "How many competitors did not get voted?", "query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )", "Prediction": "COUNT(*) FROM CONTESTANTS LEFT JOIN VOTES ON CONTESTANTS.contestant_number=VOTES.contestant_number WHERE VOTES.vote_id IS NULL;"}
{"db_id": "voter_1", "SpiderQuestion": "What is the area code in which the most voters voted?", "SpiderSynQuestion": "What is the area number in which the most voters voted?", "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1", "Prediction": "AREA_CODE_STATE.area_code \nFROM VOTES \nJOIN AREA_CODE_STATE ON VOTES.state=AREA_CODE_STATE.state \nGROUP BY AREA_CODE_STATE.area_code \nORDER BY COUNT(*) DESC \nLIMIT 1;"}
{"db_id": "voter_1", "SpiderQuestion": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "SpiderSynQuestion": "What are the set up dates, states, and telephone numbers of the votes that were for the competitor named 'Tabatha Gehling'?", "query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "Prediction": "VOTES.created, VOTES.state, VOTES.phone_number \nFROM VOTES \nJOIN CONTESTANTS ON VOTES.contestant_number=CONTESTANTS.contestant_number \nWHERE CONTESTANTS.contestant_name='Tabatha Gehling';"}
{"db_id": "voter_1", "SpiderQuestion": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.", "SpiderSynQuestion": "List the area codes in which voters voted both for the participant 'Tabatha Gehling' and the participant 'Kelly Clauss'.", "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "Prediction": "DISTINCT SUBSTR(phone_number, 1, 3) AS area_code\nFROM VOTES\nWHERE contestant_number IN (\n  SELECT contestant_number\n  FROM CONTESTANTS\n  WHERE contestant_name = 'Tabatha Gehling'\n) AND contestant_number IN (\n  SELECT contestant_number\n  FROM CONTESTANTS\n  WHERE contestant_name = 'Kelly Clauss'\n)\nGROUP BY area_code\nHAVING COUNT(DISTINCT contestant_number) = 2;"}
{"db_id": "voter_1", "SpiderQuestion": "Return the names the contestants whose names contain the substring 'Al'.", "SpiderSynQuestion": "Return the names the competitors whose names contain the substring 'Al'.", "query": "SELECT contestant_name FROM contestants WHERE contestant_name LIKE \"%Al%\"", "Prediction": "contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';"}
{"db_id": "world_1", "SpiderQuestion": "What are the names of all the countries that became independent after 1950?", "SpiderSynQuestion": "What are the names of all the States that became sovereign after 1950?", "query": "SELECT Name FROM country WHERE IndepYear  >  1950", "Prediction": "Name FROM country WHERE IndepYear > 1950;"}
{"db_id": "world_1", "SpiderQuestion": "Give the names of the nations that were founded after 1950.", "SpiderSynQuestion": "Give the names of the nations that were founded after 1950.", "query": "SELECT Name FROM country WHERE IndepYear  >  1950", "Prediction": "Name FROM country WHERE IndepYear > 1950;"}
{"db_id": "world_1", "SpiderQuestion": "How many countries have a republic as their form of government?", "SpiderSynQuestion": "How many nations have a republic as their form of government?", "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "Prediction": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic';"}
{"db_id": "world_1", "SpiderQuestion": "How many countries have governments that are republics?", "SpiderSynQuestion": "How many nations have governments that are republics?", "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "Prediction": "COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%';"}
{"db_id": "world_1", "SpiderQuestion": "What is the total surface area of the countries in the Caribbean region?", "SpiderSynQuestion": "What is the total territory of the State in the Caribbean region?", "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "Prediction": "SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';"}
{"db_id": "world_1", "SpiderQuestion": "How much surface area do the countires in the Caribbean cover together?", "SpiderSynQuestion": "How much territory do the countires in the Caribbean cover together?", "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "Prediction": "SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean';"}
{"db_id": "world_1", "SpiderQuestion": "Which continent is Anguilla in?", "SpiderSynQuestion": "Which continent is Anguilla in?", "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "Prediction": "country.Continent FROM country WHERE country.Name = 'Anguilla';"}
{"db_id": "world_1", "SpiderQuestion": "What is the continent name which Anguilla belongs to?", "SpiderSynQuestion": "What is the continent name which Anguilla belongs to?", "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "Prediction": "country.Continent FROM country WHERE country.Name='Anguilla';"}
{"db_id": "world_1", "SpiderQuestion": "Which region is the city Kabul located in?", "SpiderSynQuestion": "Which region is the city Kabul located in?", "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "Prediction": "country.Region FROM city JOIN country ON city.CountryCode=country.Code WHERE city.Name='Kabul';"}
{"db_id": "world_1", "SpiderQuestion": "What region is Kabul in?", "SpiderSynQuestion": "What region is Kabul in?", "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "Prediction": "country.Region \nFROM city \nJOIN country ON city.CountryCode=country.Code \nWHERE city.Name='Kabul';"}
{"db_id": "world_1", "SpiderQuestion": "Which language is the most popular in Aruba?", "SpiderSynQuestion": "Which language is the most popular in Aruba?", "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "Prediction": "Language FROM countrylanguage WHERE CountryCode='ABW' AND IsOfficial='T' ORDER BY Percentage DESC LIMIT 1;"}
{"db_id": "world_1", "SpiderQuestion": "What language is predominantly spoken in Aruba?", "SpiderSynQuestion": "What language is predominantly spoken in Aruba?", "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "Prediction": "Language FROM countrylanguage WHERE CountryCode='ABW' AND IsOfficial='T'"}
{"db_id": "world_1", "SpiderQuestion": "What are the population and life expectancies in Brazil?", "SpiderSynQuestion": "What are the population and lifespan in Brazil?", "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "Prediction": "country.Population, country.LifeExpectancy \n FROM country \n WHERE country.Name = 'Brazil';"}
{"db_id": "world_1", "SpiderQuestion": "Give me Brazil's population and life expectancies.", "SpiderSynQuestion": "Give me Brazil's population and lifespan.", "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "Prediction": "Population, LifeExpectancy FROM country WHERE Name = 'Brazil';"}
{"db_id": "world_1", "SpiderQuestion": "What are the region and population of Angola?", "SpiderSynQuestion": "What are the region and number of people of Angola?", "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "Prediction": "Region, Population FROM country WHERE Name='Angola';"}
{"db_id": "world_1", "SpiderQuestion": "What region does Angola belong to and what is its population?", "SpiderSynQuestion": "What region does Angola belong to and what is its number of residents?", "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "Prediction": "country.Region, country.Population\n FROM country\n WHERE country.Name = 'Angola';"}
{"db_id": "world_1", "SpiderQuestion": "What is the average expected life expectancy for countries in the region of Central Africa?", "SpiderSynQuestion": "What is the average lifespan for countries in the region of Central Africa?", "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "Prediction": "AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';"}
{"db_id": "world_1", "SpiderQuestion": "How long is the people\u2019s average life expectancy in Central Africa?", "SpiderSynQuestion": "How long is the people\u2019s average lifespan in Central Africa?", "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "Prediction": "AVG(LifeExpectancy) FROM country WHERE Continent='Africa' AND Region='Central Africa';"}
{"db_id": "world_1", "SpiderQuestion": "What is the name of country that has the shortest life expectancy in Asia?", "SpiderSynQuestion": "What is the name of nation that has the shortest lifespan in Asia?", "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "Prediction": "country.Name \nFROM country \nWHERE country.Continent = 'Asia' \nORDER BY country.LifeExpectancy ASC \nLIMIT 1;"}
{"db_id": "world_1", "SpiderQuestion": "Give the name of the country in Asia with the lowest life expectancy.", "SpiderSynQuestion": "Give the name of the State in Asia with the lowest lifespan.", "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "Prediction": "country.Region \nFROM country \nWHERE country.Continent = 'Asia' \nORDER BY country.LifeExpectancy ASC \nLIMIT 1;"}
{"db_id": "world_1", "SpiderQuestion": "What is the total population and maximum GNP in Asia?", "SpiderSynQuestion": "What is the total number of people and maximum GNP in Asia?", "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "Prediction": "SUM(city.Population), MAX(country.GNP) \n FROM city \n JOIN country ON city.CountryCode=country.Code \n WHERE country.Continent='Asia';"}
{"db_id": "world_1", "SpiderQuestion": "How many people live in Asia, and what is the largest GNP among them?", "SpiderSynQuestion": "How many people live in Asia, and what is the largest GNP among them?", "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "Prediction": "SUM(city.Population), MAX(country.GNP) FROM city JOIN country ON city.CountryCode=country.Code WHERE country.Continent='Asia';"}
{"db_id": "world_1", "SpiderQuestion": "What is the average life expectancy in African countries that are republics?", "SpiderSynQuestion": "What is the average lifespan in African nations that are republics?", "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "Prediction": "AVG(LifeExpectancy) FROM country WHERE Continent='Africa' AND GovernmentForm='Republic';"}
{"db_id": "world_1", "SpiderQuestion": "Give the average life expectancy for countries in Africa which are republics?", "SpiderSynQuestion": "Give the average lifespan for nations in Africa which are republics?", "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "Prediction": "AVG(LifeExpectancy) FROM country WHERE Continent='Africa' AND GovernmentForm='Republic';"}
{"db_id": "world_1", "SpiderQuestion": "What is the total surface area of the continents Asia and Europe?", "SpiderSynQuestion": "What is the total territory of the continents Asia and Europe?", "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "Prediction": "SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');"}
{"db_id": "world_1", "SpiderQuestion": "Give the total surface area covered by countries in Asia or Europe.", "SpiderSynQuestion": "Give the total territory covered by countries in Asia or Europe.", "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "Prediction": "SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');"}
{"db_id": "world_1", "SpiderQuestion": "How many people live in Gelderland district?", "SpiderSynQuestion": "How many people live in Gelderland district?", "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "Prediction": "SUM(Population) FROM city WHERE District = 'Gelderland';"}
{"db_id": "world_1", "SpiderQuestion": "What is the total population of Gelderland district?", "SpiderSynQuestion": "What is the total number of residents of Gelderland district?", "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "Prediction": "SUM(Population) FROM city WHERE District = 'Gelderland';"}
{"db_id": "world_1", "SpiderQuestion": "What is the average GNP and total population in all nations whose government is US territory?", "SpiderSynQuestion": "What is the average GNP and total number of people in all States whose government is US territory?", "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "Prediction": "AVG(country.GNP), SUM(city.Population) \nFROM country \nJOIN city ON city.CountryCode = country.Code \nWHERE country.GovernmentForm LIKE '%US territory%'"}
{"db_id": "world_1", "SpiderQuestion": "Give the mean GNP and total population of nations which are considered US territory.", "SpiderSynQuestion": "Give the mean GNP and total number of people of nations which are considered US territory.", "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "Prediction": "AVG(GNP), SUM(Population) FROM country WHERE Continent = 'North America' AND GovernmentForm LIKE '%territory%';"}
{"db_id": "world_1", "SpiderQuestion": "How many unique languages are spoken in the world?", "SpiderSynQuestion": "How many unique languages are spoken in the world?", "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "Prediction": "COUNT(DISTINCT Language) FROM countrylanguage;"}
{"db_id": "world_1", "SpiderQuestion": "What is the number of distinct languages used around the world?", "SpiderSynQuestion": "What is the number of distinct languages used around the world?", "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "Prediction": "COUNT(DISTINCT Language) FROM countrylanguage;"}
{"db_id": "world_1", "SpiderQuestion": "How many type of governments are in Africa?", "SpiderSynQuestion": "How many type of governments are in Africa?", "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "Prediction": "COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';"}
{"db_id": "world_1", "SpiderQuestion": "How many different forms of governments are there in Africa?", "SpiderSynQuestion": "How many different types of governments are there in Africa?", "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "Prediction": "COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';"}
{"db_id": "world_1", "SpiderQuestion": "What is the total number of languages used in Aruba?", "SpiderSynQuestion": "What is the total number of languages used in Aruba?", "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "Prediction": "COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW';"}
{"db_id": "world_1", "SpiderQuestion": "How many languages are spoken in Aruba?", "SpiderSynQuestion": "How many languages are spoken in Aruba?", "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "Prediction": "COUNT(Language) FROM countrylanguage WHERE CountryCode='ABW';"}
{"db_id": "world_1", "SpiderQuestion": "How many official languages does Afghanistan have?", "SpiderSynQuestion": "How many official languages does Afghanistan have?", "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "Prediction": "COUNT(*) FROM countrylanguage WHERE CountryCode='AFG' AND IsOfficial='T';"}
{"db_id": "world_1", "SpiderQuestion": "How many official languages are spoken in Afghanistan?", "SpiderSynQuestion": "How many official languages are spoken in Afghanistan?", "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "Prediction": "COUNT(Language) FROM countrylanguage WHERE CountryCode='AFG' AND IsOfficial='T';"}
{"db_id": "world_1", "SpiderQuestion": "What is name of the country that speaks the largest number of languages?", "SpiderSynQuestion": "What is name of the nation that speaks the largest number of languages?", "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "Prediction": "country.Name \nFROM country \nJOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nGROUP BY country.Code \nORDER BY COUNT(DISTINCT countrylanguage.Language) DESC \nLIMIT 1;"}
{"db_id": "world_1", "SpiderQuestion": "Give the name of the nation that uses the greatest amount of languages.", "SpiderSynQuestion": "Give the name of the State that uses the greatest amount of languages.", "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "Prediction": "country.Region \nFROM countrylanguage \nJOIN country ON countrylanguage.CountryCode=country.Code \nGROUP BY country.Region \nORDER BY COUNT(DISTINCT countrylanguage.Language) DESC \nLIMIT 1;"}
{"db_id": "world_1", "SpiderQuestion": "Which continent has the most diverse languages?", "SpiderSynQuestion": "Which continent has the most diverse languages?", "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "Prediction": "country.Continent \nFROM country \nJOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nGROUP BY country.Continent \nORDER BY COUNT(DISTINCT countrylanguage.Language) DESC \nLIMIT 1;"}
{"db_id": "world_1", "SpiderQuestion": "Which continent speaks the most languages?", "SpiderSynQuestion": "Which continent speaks the most languages?", "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "Prediction": "Continent, COUNT(DISTINCT Language) AS NumLanguages \n FROM countrylanguage \n JOIN country ON countrylanguage.CountryCode=country.Code \n GROUP BY Continent \n ORDER BY NumLanguages DESC \n LIMIT 1;"}
{"db_id": "world_1", "SpiderQuestion": "How many countries speak both English and Dutch?", "SpiderSynQuestion": "How many States speak both English and Dutch?", "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "Prediction": "COUNT(*) FROM countrylanguage \nWHERE Language = 'English' AND CountryCode IN \n(SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch')"}
{"db_id": "world_1", "SpiderQuestion": "What is the number of nations that use English and Dutch?", "SpiderSynQuestion": "What is the number of countries that use English and Dutch?", "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "Prediction": "COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('English', 'Dutch');"}
{"db_id": "world_1", "SpiderQuestion": "What are the names of nations speak both English and French?", "SpiderSynQuestion": "What are the names of States speak both English and French?", "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "Prediction": "country.Name \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' \nAND country.Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French' AND IsOfficial = 'T') \nORDER BY country.Name;"}
{"db_id": "world_1", "SpiderQuestion": "Give the names of nations that speak both English and French.", "SpiderSynQuestion": "Give the names of countries that speak both English and French.", "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "Prediction": "country.Name \nFROM country \nINNER JOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE countrylanguage.Language='English' AND country.Code IN \n(SELECT CountryCode FROM countrylanguage WHERE Language='French');"}
{"db_id": "world_1", "SpiderQuestion": "What are the names of nations where both English and French are official languages?", "SpiderSynQuestion": "What are the names of States where both English and French are official languages?", "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "Prediction": "country.Region \n FROM country \n JOIN countrylanguage ON country.Code=countrylanguage.CountryCode \n WHERE countrylanguage.Language='English' AND countrylanguage.IsOfficial='T' \n INTERSECT \n SELECT country.Region \n FROM country \n JOIN countrylanguage ON country.Code=countrylanguage.CountryCode \n WHERE countrylanguage.Language='French' AND countrylanguage.IsOfficial='T';"}
{"db_id": "world_1", "SpiderQuestion": "Give the names of countries with English and French as official languages.", "SpiderSynQuestion": "Give the names of nations with English and French as official languages.", "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "Prediction": "country.Name \nFROM country \nINNER JOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE countrylanguage.Language='English' AND countrylanguage.IsOfficial='T' \nINTERSECT \nSELECT country.Name \nFROM country \nINNER JOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE countrylanguage.Language='French' AND countrylanguage.IsOfficial='T';"}
{"db_id": "world_1", "SpiderQuestion": "What is the number of distinct continents where Chinese is spoken?", "SpiderSynQuestion": "What is the number of distinct continents where Chinese is spoken?", "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "Prediction": "COUNT(DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code=countrylanguage.CountryCode WHERE countrylanguage.Language='Chinese' AND countrylanguage.IsOfficial='T';"}
{"db_id": "world_1", "SpiderQuestion": "How many continents speak Chinese?", "SpiderSynQuestion": "How many continents speak Chinese?", "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "Prediction": "COUNT(DISTINCT country.Continent) FROM countrylanguage \nINNER JOIN country ON countrylanguage.CountryCode=country.Code \nWHERE countrylanguage.Language='Chinese' AND countrylanguage.IsOfficial='T';"}
{"db_id": "world_1", "SpiderQuestion": "What are the regions that use English or Dutch?", "SpiderSynQuestion": "What are the regions that use English or Dutch?", "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "Prediction": "country.Region \nFROM country \nJOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE countrylanguage.Language IN ('English', 'Dutch');"}
{"db_id": "world_1", "SpiderQuestion": "Which regions speak Dutch or English?", "SpiderSynQuestion": "Which regions speak Dutch or English?", "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "Prediction": "country.Region\nFROM country\nJOIN countrylanguage ON country.Code=countrylanguage.CountryCode\nWHERE countrylanguage.Language IN ('Dutch', 'English');"}
{"db_id": "world_1", "SpiderQuestion": "What are the countries where either English or Dutch is the official language?", "SpiderSynQuestion": "What are the nations where either English or Dutch is the official language?", "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"", "Prediction": "country.Name \nFROM country \nJOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE (countrylanguage.Language='English' OR countrylanguage.Language='Dutch') AND countrylanguage.IsOfficial='T';"}
{"db_id": "world_1", "SpiderQuestion": "Which countries have either English or Dutch as an official language?", "SpiderSynQuestion": "Which nations have either English or Dutch as an official language?", "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"", "Prediction": "country.Name \nFROM country \nJOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE (countrylanguage.Language='English' OR countrylanguage.Language='Dutch') AND countrylanguage.IsOfficial='T';"}
{"db_id": "world_1", "SpiderQuestion": "Which language is the most popular on the Asian continent?", "SpiderSynQuestion": "Which language is the most popular on the Asian continent?", "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "Prediction": "Language \nFROM countrylanguage \nJOIN country ON countrylanguage.CountryCode=country.Code \nWHERE Continent='Asia' \nORDER BY Percentage DESC \nLIMIT 1;"}
{"db_id": "world_1", "SpiderQuestion": "What is the language that is used by the largest number of Asian nations?", "SpiderSynQuestion": "What is the language that is used by the largest number of Asian nations?", "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "Prediction": "Language \nFROM countrylanguage \nJOIN country ON countrylanguage.CountryCode=country.Code \nWHERE Continent='Asia' \nGROUP BY Language \nORDER BY COUNT(DISTINCT country.Code) DESC \nLIMIT 1;"}
{"db_id": "world_1", "SpiderQuestion": "Which languages are spoken by only one country in republic governments?", "SpiderSynQuestion": "Which languages are spoken by only one country in republic governments?", "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "Prediction": "countrylanguage.Language \nFROM countrylanguage \nJOIN country ON countrylanguage.CountryCode = country.Code \nWHERE country.GovernmentForm LIKE '%Republic%' \nGROUP BY countrylanguage.Language \nHAVING COUNT(DISTINCT countrylanguage.CountryCode) = 1"}
{"db_id": "world_1", "SpiderQuestion": "What languages are only used by a single country with a republic government?", "SpiderSynQuestion": "What languages are only used by a single country with a republic government?", "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "Prediction": "DISTINCT Language \nFROM countrylanguage \nWHERE CountryCode IN (\n    SELECT Code \n    FROM country \n    WHERE GovernmentForm LIKE '%Republic%' \n    AND Code IN (\n        SELECT CountryCode \n        FROM countrylanguage \n        GROUP BY CountryCode \n        HAVING COUNT(*) = 1\n    )\n) \nAND IsOfficial = 'T'"}
{"db_id": "world_1", "SpiderQuestion": "Find the city with the largest population that uses English.", "SpiderSynQuestion": "Find the town with the largest number of people that uses English.", "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "Prediction": "city.Name \nFROM city \nJOIN countrylanguage ON city.CountryCode=countrylanguage.CountryCode \nWHERE countrylanguage.Language='English' \nORDER BY city.Population DESC \nLIMIT 1;"}
{"db_id": "world_1", "SpiderQuestion": "What is the most populace city that speaks English?", "SpiderSynQuestion": "What is the most populace city that speaks English?", "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "Prediction": "city.Name \nFROM city \nJOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode \nWHERE countrylanguage.Language = 'English' \nORDER BY city.Population DESC \nLIMIT 1;"}
{"db_id": "world_1", "SpiderQuestion": "Find the name, population and expected life length of asian country with the largest area?", "SpiderSynQuestion": "Find the name, populace and expected life length of asian country with the largest area?", "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "Prediction": "country.Name, country.Population, country.LifeExpectancy \n FROM country \n WHERE continent = 'Asia' \n ORDER BY SurfaceArea DESC \n LIMIT 1;"}
{"db_id": "world_1", "SpiderQuestion": "What are the name, population, and life expectancy of the largest Asian country by land?", "SpiderSynQuestion": "What are the name, number of residents, and lifespan of the largest Asian country by land?", "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "Prediction": "country.Name, country.Population, country.LifeExpectancy \n FROM country \n WHERE continent='Asia' \n ORDER BY SurfaceArea DESC \n LIMIT 1;"}
{"db_id": "world_1", "SpiderQuestion": "What is average life expectancy in the countries where English is not the official language?", "SpiderSynQuestion": "What is average lifespan in the nations where English is not the official language?", "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "Prediction": "AVG(LifeExpectancy) FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language != 'English' AND IsOfficial = 'F');"}
{"db_id": "world_1", "SpiderQuestion": "Give the mean life expectancy of countries in which English is not the official language.", "SpiderSynQuestion": "Give the mean lifespan of nations in which English is not the official language.", "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "Prediction": "AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')"}
{"db_id": "world_1", "SpiderQuestion": "What is the total number of people living in the nations that do not use English?", "SpiderSynQuestion": "What is the total number of people living in the nations that do not use English?", "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "Prediction": "SUM(city.Population) \nFROM city \nJOIN country ON city.CountryCode=country.Code \nJOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE countrylanguage.Language != 'English' AND countrylanguage.IsOfficial = 'T'"}
{"db_id": "world_1", "SpiderQuestion": "How many people live in countries that do not speak English?", "SpiderSynQuestion": "How many people live in nations that do not speak English?", "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "Prediction": "SUM(city.Population) FROM city \nJOIN country ON city.CountryCode=country.Code \nJOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE countrylanguage.Language != 'English' AND countrylanguage.IsOfficial = 'T';"}
{"db_id": "world_1", "SpiderQuestion": "What is the official language spoken in the country whose head of state is Beatrix?", "SpiderSynQuestion": "What is the official language spoken in the country whose head of state is Beatrix?", "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "Prediction": "countrylanguage.Language \nFROM countrylanguage \nJOIN country ON countrylanguage.CountryCode = country.Code \nWHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';"}
{"db_id": "world_1", "SpiderQuestion": "What is the official language used in the country the name of whose head of state is Beatrix.", "SpiderSynQuestion": "What is the official language used in the country the name of whose leader of country is Beatrix.", "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "Prediction": "countrylanguage.Language \n FROM countrylanguage \n JOIN country ON countrylanguage.CountryCode = country.Code \n WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';"}
{"db_id": "world_1", "SpiderQuestion": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "SpiderSynQuestion": "What is the total number of unique official languages spoken in the nations that are founded before 1930?", "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "Prediction": "COUNT(DISTINCT Language) \nFROM countrylanguage \nJOIN country ON countrylanguage.CountryCode = country.Code \nWHERE IsOfficial = 'T' AND IndepYear < 1930;"}
{"db_id": "world_1", "SpiderQuestion": "For the countries founded before 1930, what is the total number of distinct official languages?", "SpiderSynQuestion": "For the nations founded before 1930, what is the total number of distinct official languages?", "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "Prediction": "COUNT(DISTINCT Language) \nFROM countrylanguage \nJOIN country ON countrylanguage.CountryCode=country.Code \nWHERE IndepYear < 1930 AND IsOfficial = 'T';"}
{"db_id": "world_1", "SpiderQuestion": "What are the countries that have greater surface area than any country in Europe?", "SpiderSynQuestion": "What are the nations that have greater territory than any country in Europe?", "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "Prediction": "Name \nFROM country \nWHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')"}
{"db_id": "world_1", "SpiderQuestion": "Which countries have greater area than that of any country in Europe?", "SpiderSynQuestion": "Which countries have greater territory than that of any country in Europe?", "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "Prediction": "Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');"}
{"db_id": "world_1", "SpiderQuestion": "What are the African countries that have a  population less than any country in Asia?", "SpiderSynQuestion": "What are the African nations that have a  number of residents less than any country in Asia?", "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")", "Prediction": "country.Name \nFROM country \nWHERE country.Continent = 'Africa' \nAND country.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');"}
{"db_id": "world_1", "SpiderQuestion": "Which African countries have a smaller population than that of any country in Asia?", "SpiderSynQuestion": "Which African nations have a smaller number of residents than that of any country in Asia?", "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")", "Prediction": "country.Name \nFROM country \nWHERE country.Continent = 'Africa' \nAND country.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');"}
{"db_id": "world_1", "SpiderQuestion": "Which Asian countries have a population that is larger than any country in Africa?", "SpiderSynQuestion": "Which Asian nations have a number of residents that is larger than any country in Africa?", "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "Prediction": "Name \nFROM country \nWHERE Continent = 'Asia' \nAND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')"}
{"db_id": "world_1", "SpiderQuestion": "What are the Asian countries which have a population larger than that of any country in Africa?", "SpiderSynQuestion": "What are the Asian States which have a number of residents larger than that of any country in Africa?", "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")", "Prediction": "country.Name \nFROM country \nWHERE country.Continent = 'Asia' \nAND country.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')"}
{"db_id": "world_1", "SpiderQuestion": "What are the country codes for countries that do not speak English?", "SpiderSynQuestion": "What are the nation abbreviations for nations that do not speak English?", "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "Prediction": "DISTINCT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');"}
{"db_id": "world_1", "SpiderQuestion": "Return the country codes for countries that do not speak English.", "SpiderSynQuestion": "Return the State abbreviations for States that do not speak English.", "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "Prediction": "country.Code2 \nFROM country \nWHERE country.Code NOT IN \n    (SELECT countrylanguage.CountryCode \n     FROM countrylanguage \n     WHERE countrylanguage.Language = 'English');"}
{"db_id": "world_1", "SpiderQuestion": "What are the country codes of countries where people use languages other than English?", "SpiderSynQuestion": "What are the nation abbreviations of nations where people use languages other than English?", "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "Prediction": "country.Code \nFROM country \nINNER JOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE countrylanguage.Language != 'English';"}
{"db_id": "world_1", "SpiderQuestion": "Give the country codes for countries in which people speak langauges that are not English.", "SpiderSynQuestion": "Give the nation abbreviations for nations in which people speak langauges that are not English.", "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "Prediction": "country.Code \nFROM country \nINNER JOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE countrylanguage.Language != 'English';"}
{"db_id": "world_1", "SpiderQuestion": "What are the codes of the countries that do not speak English and whose government forms are not Republic?", "SpiderSynQuestion": "What are the abbreviations of the nations that do not speak English and whose government types are not Republic?", "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "Prediction": "country.Code \n FROM country \n JOIN countrylanguage ON country.Code=countrylanguage.CountryCode \n WHERE countrylanguage.Language!='English' AND country.GovernmentForm!='Republic';"}
{"db_id": "world_1", "SpiderQuestion": "Return the codes of countries that do not speak English and do not have Republics for governments.", "SpiderSynQuestion": "Return the abbreviations of States that do not speak English and do not have Republics for governments.", "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "Prediction": "country.Code2 \nFROM country \nLEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE countrylanguage.Language != 'English' AND country.GovernmentForm NOT LIKE '%Republic%'"}
{"db_id": "world_1", "SpiderQuestion": "Which cities are in European countries where English is not the official language?", "SpiderSynQuestion": "Which towns are in European countries where English is not the official language?", "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "Prediction": "city.Name \nFROM city \nJOIN country ON city.CountryCode=country.Code \nJOIN countrylanguage ON countrylanguage.CountryCode=country.Code \nWHERE country.Continent='Europe' AND countrylanguage.Language!='English' AND countrylanguage.IsOfficial='F';"}
{"db_id": "world_1", "SpiderQuestion": "What are the names of cities in Europe for which English is not the official language?", "SpiderSynQuestion": "What are the names of towns in Europe for which English is not the official language?", "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "Prediction": "city.Name \nFROM city \nJOIN country ON city.CountryCode=country.Code \nJOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE country.Continent='Europe' AND countrylanguage.Language='English' AND countrylanguage.IsOfficial='F';"}
{"db_id": "world_1", "SpiderQuestion": "Whic`h unique cities are in  Asian countries where Chinese is the official language?", "SpiderSynQuestion": "Whic`h unique towns are in  Asian States where Chinese is the official language?", "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "Prediction": "city.Name \nFROM city \nJOIN country ON city.CountryCode=country.Code \nJOIN countrylanguage ON countrylanguage.CountryCode=country.Code \nWHERE country.Continent='Asia' AND countrylanguage.Language='Chinese' AND countrylanguage.IsOfficial='T' \nGROUP BY city.Name;"}
{"db_id": "world_1", "SpiderQuestion": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "SpiderSynQuestion": "Return the different names of towns that are in Asia and for which Chinese is the official language.", "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "Prediction": "city.Name \nFROM city \nJOIN country ON city.CountryCode=country.Code \nJOIN countrylanguage ON countrylanguage.CountryCode=country.Code \nWHERE country.Continent='Asia' AND countrylanguage.Language='Chinese' AND countrylanguage.IsOfficial='T';"}
{"db_id": "world_1", "SpiderQuestion": "What are the name, independence year, and surface area of the country with the smallest population?", "SpiderSynQuestion": "What are the name, founded year, and territory of the country with the smallest number of residents?", "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "Prediction": "country.Name, country.IndepYear, country.Continent \n FROM country \n WHERE country.Population = (SELECT MIN(Population) FROM country);"}
{"db_id": "world_1", "SpiderQuestion": "Give the name, year of independence, and surface area of the country that has the lowest population.", "SpiderSynQuestion": "Give the name, year of founded, and territory of the country that has the lowest number of people.", "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "Prediction": "country.Name, country.IndepYear, country.Continent \n FROM country \n WHERE country.Population = (SELECT MIN(Population) FROM country);"}
{"db_id": "world_1", "SpiderQuestion": "What are the population, name and leader of the country with the largest area?", "SpiderSynQuestion": "What are the number of residents, name and leader of the country with the largest area?", "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "Prediction": "country.Population, country.Name, country.HeadOfState\n FROM country\n WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);"}
{"db_id": "world_1", "SpiderQuestion": "Give the name, population, and head of state for the country that has the largest area.", "SpiderSynQuestion": "Give the name, number of residents, and leader of country for the country that has the largest territory.", "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "Prediction": "Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;"}
{"db_id": "world_1", "SpiderQuestion": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "SpiderSynQuestion": "Return the nation name and the numbers of languages spoken for each country that speaks at least 3 languages.", "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "Prediction": "country.Name, COUNT(countrylanguage.Language) AS num_languages\nFROM country\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nGROUP BY country.Code\nHAVING COUNT(countrylanguage.Language) >= 3;"}
{"db_id": "world_1", "SpiderQuestion": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "SpiderSynQuestion": "What are the names of nations that speak more than 2 languages, as well as how many languages they speak?", "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "Prediction": "country.Name, COUNT(countrylanguage.Language) AS num_languages\n FROM country\n JOIN countrylanguage ON country.Code=countrylanguage.CountryCode\n GROUP BY country.Name\n HAVING num_languages > 2;"}
{"db_id": "world_1", "SpiderQuestion": "Find the number of cities in each district whose population is greater than the average population of cities?", "SpiderSynQuestion": "Find the number of towns in each district whose number of residents is greater than the average population of towns?", "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "Prediction": "District, COUNT(*) \n FROM city \n WHERE Population > (SELECT AVG(Population) FROM city) \n GROUP BY District;"}
{"db_id": "world_1", "SpiderQuestion": "How many cities in each district have a population that is above the average population across all cities?", "SpiderSynQuestion": "How many towns in each district have a population that is above the average number of residents across all towns?", "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "Prediction": "city.District, COUNT(city.Name)\n FROM city\n WHERE city.Population > (SELECT AVG(city.Population) FROM city)\n GROUP BY city.District;"}
{"db_id": "world_1", "SpiderQuestion": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "SpiderSynQuestion": "Find the government type name and total number of residents for each government type whose average lifespan is longer than 72.", "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "Prediction": "country.GovernmentForm, SUM(country.Population) \n FROM country \n WHERE country.LifeExpectancy > 72 \n GROUP BY country.GovernmentForm;"}
{"db_id": "world_1", "SpiderQuestion": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "SpiderSynQuestion": "What are the different government types and what is the total number of residents of each for government types that have an average lifespan greater than 72?", "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "Prediction": "GovernmentForm, SUM(Population) \nFROM country \nWHERE LifeExpectancy > 72 \nGROUP BY GovernmentForm;"}
{"db_id": "world_1", "SpiderQuestion": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "SpiderSynQuestion": "Find the average lifespan and total number of people for each continent where the average lifespan is shorter than 72?", "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "Prediction": "Continent, AVG(LifeExpectancy), SUM(Population)\n FROM country\n WHERE LifeExpectancy < 72\n GROUP BY Continent;"}
{"db_id": "world_1", "SpiderQuestion": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "SpiderSynQuestion": "What are the different continents and the total number of people and average lifespan corresponding to each, for continents that have an average lifespan less than 72?", "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "Prediction": "Continent, SUM(Population), AVG(LifeExpectancy)\n FROM country JOIN city ON country.Code=city.CountryCode\n WHERE LifeExpectancy < 72\n GROUP BY Continent;"}
{"db_id": "world_1", "SpiderQuestion": "What are the names and areas of countries with the top 5 largest area?", "SpiderSynQuestion": "What are the names and areas of States with the top 5 largest territory?", "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "Prediction": "Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;"}
{"db_id": "world_1", "SpiderQuestion": "Return the names and surface areas of the 5 largest countries.", "SpiderSynQuestion": "Return the names and territory of the 5 largest countries.", "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "Prediction": "Name, SurfaceArea\n FROM country\n ORDER BY SurfaceArea DESC\n LIMIT 5;"}
{"db_id": "world_1", "SpiderQuestion": "What are names of countries with the top 3 largest population?", "SpiderSynQuestion": "What are names of nations with the top 3 largest number of people?", "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "Prediction": "Name FROM country ORDER BY Population DESC LIMIT 3;"}
{"db_id": "world_1", "SpiderQuestion": "Return the names of the 3 most populated countries.", "SpiderSynQuestion": "Return the names of the 3 most populated countries.", "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "Prediction": "Name FROM country ORDER BY Population DESC LIMIT 3;"}
{"db_id": "world_1", "SpiderQuestion": "What are the names of the nations with the 3 lowest populations?", "SpiderSynQuestion": "What are the names of the countries with the 3 lowest number of peoples?", "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "Prediction": "Name FROM country ORDER BY Population ASC LIMIT 3;"}
{"db_id": "world_1", "SpiderQuestion": "Return the names of the 3 countries with the fewest people.", "SpiderSynQuestion": "Return the names of the 3 nations with the fewest people.", "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "Prediction": "Name FROM country ORDER BY Population ASC LIMIT 3;"}
{"db_id": "world_1", "SpiderQuestion": "how many countries are in Asia?", "SpiderSynQuestion": "how many nations are in Asia?", "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "Prediction": "COUNT(*) FROM country WHERE Continent = 'Asia';"}
{"db_id": "world_1", "SpiderQuestion": "Count the number of countries in Asia.", "SpiderSynQuestion": "Count the number of nations in Asia.", "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "Prediction": "COUNT(*) FROM country WHERE Continent = 'Asia';"}
{"db_id": "world_1", "SpiderQuestion": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "SpiderSynQuestion": "What are the names of the States that are in the continent of Europe and have a number of people of 80000?", "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "Prediction": "State \nFROM country \nWHERE Continent = 'Europe' AND Population = 80000;"}
{"db_id": "world_1", "SpiderQuestion": "Give the names of countries that are in Europe and have a population equal to 80000.", "SpiderSynQuestion": "Give the names of nations that are in Europe and have a number of people equal to 80000.", "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "Prediction": "country.Name FROM country JOIN city ON country.Code=city.CountryCode WHERE country.Continent='Europe' AND city.Population=80000;"}
{"db_id": "world_1", "SpiderQuestion": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000\uff1f", "SpiderSynQuestion": "What is the total number of people and average territory of countries in the continent of North America whose territory is bigger than 3000\uff1f", "query": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000", "Prediction": "SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;"}
{"db_id": "world_1", "SpiderQuestion": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000.", "SpiderSynQuestion": "Give the total number of people and average territory corresponding to countries in North America that have a territory greater than 3000.", "query": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000", "Prediction": "SUM(country.Population), AVG(country.SurfaceArea) \nFROM country \nWHERE country.Continent = 'North America' AND country.SurfaceArea > 3000;"}
{"db_id": "world_1", "SpiderQuestion": "What are the cities whose population is between 160000 and 900000?", "SpiderSynQuestion": "What are the towns whose number of residents is between 160000 and 900000?", "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "Prediction": "Name FROM city WHERE Population BETWEEN 160000 AND 900000;"}
{"db_id": "world_1", "SpiderQuestion": "Return the names of cities that have a population between 160000 and 900000.", "SpiderSynQuestion": "Return the names of towns that have a number of people between 160000 and 900000.", "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "Prediction": "Name FROM city WHERE Population BETWEEN 160000 AND 900000;"}
{"db_id": "world_1", "SpiderQuestion": "Which language is spoken by the largest number of countries?", "SpiderSynQuestion": "Which language is spoken by the largest number of nations?", "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "Prediction": "Language \nFROM countrylanguage \nGROUP BY Language \nORDER BY COUNT(DISTINCT CountryCode) DESC \nLIMIT 1;"}
{"db_id": "world_1", "SpiderQuestion": "Give the language that is spoken in the most countries.", "SpiderSynQuestion": "Give the language that is spoken in the most nations.", "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "Prediction": "Language\nFROM countrylanguage\nGROUP BY Language\nORDER BY COUNT(DISTINCT CountryCode) DESC\nLIMIT 1;"}
{"db_id": "world_1", "SpiderQuestion": "What is the language spoken by the largest percentage of people in each country?", "SpiderSynQuestion": "What is the language spoken by most people in each State?", "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "Prediction": "country.Region, countrylanguage.Language\n FROM countrylanguage\n JOIN country ON countrylanguage.CountryCode = country.Code\n JOIN city ON city.CountryCode = country.Code\n GROUP BY country.Region\n HAVING MAX(countrylanguage.Percentage * city.Population)"}
{"db_id": "world_1", "SpiderQuestion": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?", "SpiderSynQuestion": "What are the nation abbreviations of the different nations, and what are the languages spoken by the most people for each?", "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "Prediction": "country.Code, countrylanguage.Language\n FROM country\n JOIN countrylanguage ON country.Code = countrylanguage.CountryCode\n WHERE countrylanguage.Percentage = (\n   SELECT MAX(Percentage)\n   FROM countrylanguage\n   WHERE CountryCode = country.Code\n )\n ORDER BY country.Code;"}
{"db_id": "world_1", "SpiderQuestion": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "SpiderSynQuestion": "What is the total number of nations where Spanish is spoken by most people?", "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "Prediction": "COUNT(DISTINCT CountryCode) \nFROM countrylanguage \nWHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage >= 50;"}
{"db_id": "world_1", "SpiderQuestion": "Count the number of countries for which Spanish is the predominantly spoken language.", "SpiderSynQuestion": "Count the number of nations for which Spanish is the predominantly spoken language.", "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "Prediction": "COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T';"}
{"db_id": "world_1", "SpiderQuestion": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "SpiderSynQuestion": "What are the codes of nations where Spanish is spoken by most people?", "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "Prediction": "country.Code \nFROM country \nJOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE countrylanguage.Language='Spanish' \nORDER BY countrylanguage.Percentage DESC \nLIMIT 1;"}
{"db_id": "world_1", "SpiderQuestion": "Return the codes of countries for which Spanish is the predominantly spoken language.", "SpiderSynQuestion": "Return the codes of States for which Spanish is the predominantly spoken language.", "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "Prediction": "country.Code \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE countrylanguage.Language = 'Spanish' AND countrylanguage.IsOfficial = 'T' AND countrylanguage.Percentage > 50;"}
{"db_id": "orchestra", "SpiderQuestion": "How many conductors are there?", "SpiderSynQuestion": "How many directors are there?", "query": "SELECT count(*) FROM conductor", "Prediction": "COUNT(*) FROM conductor;"}
{"db_id": "orchestra", "SpiderQuestion": "Count the number of conductors.", "SpiderSynQuestion": "Count the number of directors.", "query": "SELECT count(*) FROM conductor", "Prediction": "COUNT(*) FROM conductor;"}
{"db_id": "orchestra", "SpiderQuestion": "List the names of conductors in ascending order of age.", "SpiderSynQuestion": "List the names of directors in ascending order of age.", "query": "SELECT Name FROM conductor ORDER BY Age ASC", "Prediction": "Name FROM conductor ORDER BY Age ASC;"}
{"db_id": "orchestra", "SpiderQuestion": "What are the names of conductors, ordered by age?", "SpiderSynQuestion": "What are the names of directors, ordered by age?", "query": "SELECT Name FROM conductor ORDER BY Age ASC", "Prediction": "Name FROM conductor ORDER BY Age;"}
{"db_id": "orchestra", "SpiderQuestion": "What are the names of conductors whose nationalities are not \"USA\"?", "SpiderSynQuestion": "What are the names of directors whose countries are not \"USA\"?", "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "Prediction": "Name FROM conductor WHERE Nationality != \"USA\";"}
{"db_id": "orchestra", "SpiderQuestion": "Return the names of conductors that do not have the nationality \"USA\".", "SpiderSynQuestion": "Return the names of directors that do not have the country \"USA\".", "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "Prediction": "Name FROM conductor WHERE Nationality != \"USA\";"}
{"db_id": "orchestra", "SpiderQuestion": "What are the record companies of orchestras in descending order of years in which they were founded?", "SpiderSynQuestion": "What are the record enterprise of ensembles in descending order of years in which they were set up?", "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "Prediction": "Orchestra_ID, Record_Company, Year_of_Founded\n FROM orchestra\n ORDER BY Year_of_Founded DESC;"}
{"db_id": "orchestra", "SpiderQuestion": "Return the record companies of orchestras, sorted descending by the years in which they were founded.", "SpiderSynQuestion": "Return the record enterprise of ensembles, sorted descending by the years in which they were set up.", "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "Prediction": "Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;"}
{"db_id": "orchestra", "SpiderQuestion": "What is the average attendance of shows?", "SpiderSynQuestion": "What is the average guest of shows?", "query": "SELECT avg(Attendance) FROM SHOW", "Prediction": "AVG(Attendance) FROM show;"}
{"db_id": "orchestra", "SpiderQuestion": "Return the average attendance across all shows.", "SpiderSynQuestion": "Return the average guest across all shows.", "query": "SELECT avg(Attendance) FROM SHOW", "Prediction": "AVG(Attendance) FROM show;"}
{"db_id": "orchestra", "SpiderQuestion": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "SpiderSynQuestion": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "Prediction": "MAX(Share), MIN(Share) FROM performance WHERE Type != \"Live final\";"}
{"db_id": "orchestra", "SpiderQuestion": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "SpiderSynQuestion": "Return the maximum and minimum shares for performance that do not have the type \"Live final\".", "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "Prediction": "MAX(Share), MIN(Share) FROM performance WHERE Type != \"Live final\";"}
{"db_id": "orchestra", "SpiderQuestion": "How many different nationalities do conductors have?", "SpiderSynQuestion": "How many different countries do directors have?", "query": "SELECT count(DISTINCT Nationality) FROM conductor", "Prediction": "COUNT(DISTINCT Nationality) FROM conductor;"}
{"db_id": "orchestra", "SpiderQuestion": "Count the number of different nationalities of conductors.", "SpiderSynQuestion": "Count the number of different countries of directors.", "query": "SELECT count(DISTINCT Nationality) FROM conductor", "Prediction": "COUNT(DISTINCT Nationality) FROM conductor;"}
{"db_id": "orchestra", "SpiderQuestion": "List names of conductors in descending order of years of work.", "SpiderSynQuestion": "List names of directors in descending order of time of as a director.", "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "Prediction": "Name FROM conductor ORDER BY Year_of_Work DESC;"}
{"db_id": "orchestra", "SpiderQuestion": "What are the names of conductors, sorted descending by the number of years they have worked?", "SpiderSynQuestion": "What are the names of directors, sorted descending by the time they became a director?", "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "Prediction": "Name FROM conductor ORDER BY Year_of_Work DESC;"}
{"db_id": "orchestra", "SpiderQuestion": "List the name of the conductor with the most years of work.", "SpiderSynQuestion": "List the name of the director with the most years of as a director.", "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "Prediction": "Name FROM conductor\nWHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor);"}
{"db_id": "orchestra", "SpiderQuestion": "What is the name of the conductor who has worked the greatest number of years?", "SpiderSynQuestion": "What is the name of the director who has worked the greatest number of years?", "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "Prediction": "conductor.Name \nFROM conductor \nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID \nGROUP BY conductor.Conductor_ID \nORDER BY SUM(orchestra.Year_of_Founded - conductor.Year_of_Work) DESC \nLIMIT 1;"}
{"db_id": "orchestra", "SpiderQuestion": "Show the names of conductors and the orchestras they have conducted.", "SpiderSynQuestion": "Show the names of directors and the ensembles they have directed.", "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "Prediction": "conductor.Name, orchestra.Orchestra\n FROM conductor\n JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;"}
{"db_id": "orchestra", "SpiderQuestion": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "SpiderSynQuestion": "What are the names of directors as well as the corresonding ensembles that they have directed?", "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "Prediction": "conductor.Name, orchestra.Orchestra\n FROM conductor\n JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;"}
{"db_id": "orchestra", "SpiderQuestion": "Show the names of conductors that have conducted more than one orchestras.", "SpiderSynQuestion": "Show the names of directors that have conducted more than one ensembles.", "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "Prediction": "conductor.Name\nFROM conductor\nINNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID\nGROUP BY conductor.Name\nHAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;"}
{"db_id": "orchestra", "SpiderQuestion": "What are the names of conductors who have conducted at more than one orchestra?", "SpiderSynQuestion": "What are the names of directors who have directed at more than one ensemble?", "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "Prediction": "conductor.Name\nFROM conductor\nINNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID\nGROUP BY conductor.Name\nHAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;"}
{"db_id": "orchestra", "SpiderQuestion": "Show the name of the conductor that has conducted the most number of orchestras.", "SpiderSynQuestion": "Show the name of the director that has directed the most number of ensembles.", "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "Prediction": "conductor.Name\nFROM conductor\nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID\nGROUP BY conductor.Conductor_ID\nORDER BY COUNT(orchestra.Orchestra_ID) DESC\nLIMIT 1;"}
{"db_id": "orchestra", "SpiderQuestion": "What is the name of the conductor who has conducted the most orchestras?", "SpiderSynQuestion": "What is the name of the director who has directed the most ensembles?", "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "Prediction": "conductor.Name\nFROM conductor\nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID\nGROUP BY conductor.Conductor_ID\nORDER BY COUNT(orchestra.Orchestra_ID) DESC\nLIMIT 1;"}
{"db_id": "orchestra", "SpiderQuestion": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "SpiderSynQuestion": "Please show the name of the director that has directed ensembles set up after 2008.", "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "Prediction": "conductor.Name \nFROM conductor \nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID \nWHERE orchestra.Year_of_Founded > 2008;"}
{"db_id": "orchestra", "SpiderQuestion": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "SpiderSynQuestion": "What are the names of directors who have conducted ensembles set up after the year 2008?", "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "Prediction": "conductor.Name \nFROM conductor \nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID \nWHERE orchestra.Year_of_Founded > 2008;"}
{"db_id": "orchestra", "SpiderQuestion": "Please show the different record companies and the corresponding number of orchestras.", "SpiderSynQuestion": "Please show the different record enterprise and the corresponding number of ensembles.", "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "Prediction": "Record_Company, COUNT(DISTINCT Orchestra_ID) \n FROM orchestra \n GROUP BY Record_Company;"}
{"db_id": "orchestra", "SpiderQuestion": "How many orchestras does each record company manage?", "SpiderSynQuestion": "How many ensembles does each enterprise manage?", "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "Prediction": "Record_Company, COUNT(DISTINCT Orchestra_ID) \n FROM orchestra \n GROUP BY Record_Company;"}
{"db_id": "orchestra", "SpiderQuestion": "Please show the record formats of orchestras in ascending order of count.", "SpiderSynQuestion": "Please show the record type of ensembles in ascending order of count.", "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "Prediction": "orchestra.Orchestra, COUNT(*) AS count\n FROM orchestra\n GROUP BY orchestra.Orchestra\n ORDER BY count ASC;"}
{"db_id": "orchestra", "SpiderQuestion": "What are the major record formats of orchestras, sorted by their frequency?", "SpiderSynQuestion": "What are the major record formats of ensembles, sorted by their frequency?", "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "Prediction": "Major_Record_Format, COUNT(*) AS Frequency\n FROM orchestra\n GROUP BY Major_Record_Format\n ORDER BY Frequency DESC;"}
{"db_id": "orchestra", "SpiderQuestion": "List the record company shared by the most number of orchestras.", "SpiderSynQuestion": "List the record enterprise shared by the most number of ensembles.", "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "Prediction": "Record_Company\nFROM orchestra\nGROUP BY Record_Company\nORDER BY COUNT(DISTINCT Orchestra_ID) DESC\nLIMIT 1;"}
{"db_id": "orchestra", "SpiderQuestion": "What is the record company used by the greatest number of orchestras?", "SpiderSynQuestion": "What is the record enterprise used by the greatest number of ensembles?", "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "Prediction": "Record_Company\nFROM orchestra\nGROUP BY Record_Company\nORDER BY COUNT(*) DESC\nLIMIT 1;"}
{"db_id": "orchestra", "SpiderQuestion": "List the names of orchestras that have no performance.", "SpiderSynQuestion": "List the names of ensembles that have no performance.", "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "Prediction": "orchestra.Orchestra\nFROM orchestra\nLEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID\nWHERE performance.Performance_ID IS NULL;"}
{"db_id": "orchestra", "SpiderQuestion": "What are the orchestras that do not have any performances?", "SpiderSynQuestion": "What are the ensembles that do not have any performance?", "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "Prediction": "orchestra.Orchestra\nFROM orchestra\nLEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID\nWHERE performance.Performance_ID IS NULL;"}
{"db_id": "orchestra", "SpiderQuestion": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "SpiderSynQuestion": "Show the record enterprises shared by ensembles founded before 2003 and after 2003.", "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "Prediction": "Record_Company FROM orchestra \nWHERE Year_of_Founded < 2003 \nINTERSECT \nSELECT Record_Company FROM orchestra \nWHERE Year_of_Founded > 2003;"}
{"db_id": "orchestra", "SpiderQuestion": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "SpiderSynQuestion": "What are the record enterprises that are used by both ensembles founded before 2003 and those founded after 2003?", "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "Prediction": "Record_Company \n FROM orchestra \n WHERE Year_of_Founded < 2003 \n AND Record_Company IN \n (SELECT Record_Company \n FROM orchestra \n WHERE Year_of_Founded > 2003)"}
{"db_id": "orchestra", "SpiderQuestion": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "SpiderSynQuestion": "Find the number of ensembles whose record type is \"CD\" or \"DVD\".", "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "Prediction": "COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');"}
{"db_id": "orchestra", "SpiderQuestion": "Count the number of orchestras that have CD or DVD as their record format.", "SpiderSynQuestion": "Count the number of ensembles that have CD or DVD as their record type.", "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "Prediction": "COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');"}
{"db_id": "orchestra", "SpiderQuestion": "Show the years in which orchestras that have given more than one performance are founded.", "SpiderSynQuestion": "Show the years in which ensembles that have given more than one performance are set up.", "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "Prediction": "Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1);"}
{"db_id": "orchestra", "SpiderQuestion": "What are years of founding for orchestras that have had more than a single performance?", "SpiderSynQuestion": "What are years of seting up for ensembles that have had more than a single performance?", "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "Prediction": "orchestra.Year_of_Founded\nFROM orchestra\nWHERE orchestra.Orchestra_ID IN (\n    SELECT performance.Orchestra_ID\n    FROM performance\n    GROUP BY performance.Orchestra_ID\n    HAVING COUNT(*) > 1\n)"}
{"db_id": "network_1", "SpiderQuestion": "How many high schoolers are there?", "SpiderSynQuestion": "How many students are there?", "query": "SELECT count(*) FROM Highschooler", "Prediction": "COUNT(*) FROM Highschooler;"}
{"db_id": "network_1", "SpiderQuestion": "Count the number of high schoolers.", "SpiderSynQuestion": "Count the number of students.", "query": "SELECT count(*) FROM Highschooler", "Prediction": "COUNT(*) FROM Highschooler;"}
{"db_id": "network_1", "SpiderQuestion": "Show the names and grades of each high schooler.", "SpiderSynQuestion": "Show the names and grades of each student.", "query": "SELECT name ,  grade FROM Highschooler", "Prediction": "name, grade FROM Highschooler;"}
{"db_id": "network_1", "SpiderQuestion": "What are the names and grades for each high schooler?", "SpiderSynQuestion": "What are the names and grades for each student?", "query": "SELECT name ,  grade FROM Highschooler", "Prediction": "name, grade FROM Highschooler;"}
{"db_id": "network_1", "SpiderQuestion": "Show all the grades of the high schoolers.", "SpiderSynQuestion": "Show all the grades of the students.", "query": "SELECT grade FROM Highschooler", "Prediction": "grade FROM Highschooler;"}
{"db_id": "network_1", "SpiderQuestion": "What is the grade of each high schooler?", "SpiderSynQuestion": "What is the grade of each student?", "query": "SELECT grade FROM Highschooler", "Prediction": "grade FROM Highschooler;"}
{"db_id": "network_1", "SpiderQuestion": "What grade is Kyle in?", "SpiderSynQuestion": "What grade is Kyle in?", "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "Prediction": "grade FROM Highschooler WHERE name = 'Kyle';"}
{"db_id": "network_1", "SpiderQuestion": "Return the grade for the high schooler named Kyle.", "SpiderSynQuestion": "Return the grade for the student named Kyle.", "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "Prediction": "grade FROM Highschooler WHERE name = 'Kyle';"}
{"db_id": "network_1", "SpiderQuestion": "Show the names of all high schoolers in grade 10.", "SpiderSynQuestion": "Show the names of all students in grade 10.", "query": "SELECT name FROM Highschooler WHERE grade  =  10", "Prediction": "name FROM Highschooler WHERE grade = 10;"}
{"db_id": "network_1", "SpiderQuestion": "What are the names of all high schoolers in grade 10?", "SpiderSynQuestion": "What are the names of all students in grade 10?", "query": "SELECT name FROM Highschooler WHERE grade  =  10", "Prediction": "name FROM Highschooler WHERE grade = 10;"}
{"db_id": "network_1", "SpiderQuestion": "Show the ID of the high schooler named Kyle.", "SpiderSynQuestion": "Show the ID of the student named Kyle.", "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "Prediction": "ID FROM Highschooler WHERE name = 'Kyle';"}
{"db_id": "network_1", "SpiderQuestion": "What is Kyle's id?", "SpiderSynQuestion": "What is Kyle's id?", "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "Prediction": "ID FROM Highschooler WHERE name = 'Kyle';"}
{"db_id": "network_1", "SpiderQuestion": "How many high schoolers are there in grade 9 or 10?", "SpiderSynQuestion": "How many students are there in grade 9 or 10?", "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "Prediction": "COUNT(*) FROM Highschooler WHERE grade IN (9,10);"}
{"db_id": "network_1", "SpiderQuestion": "Count the number of high schoolers in grades 9 or 10.", "SpiderSynQuestion": "Count the number of students in grades 9 or 10.", "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "Prediction": "COUNT(*) FROM Highschooler WHERE grade IN (9,10);"}
{"db_id": "network_1", "SpiderQuestion": "Show the number of high schoolers for each grade.", "SpiderSynQuestion": "Show the number of students for each grade.", "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "Prediction": "grade, COUNT(*) FROM Highschooler GROUP BY grade;"}
{"db_id": "network_1", "SpiderQuestion": "How many high schoolers are in each grade?", "SpiderSynQuestion": "How many students are in each grade?", "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "Prediction": "grade, COUNT(*) FROM Highschooler GROUP BY grade;"}
{"db_id": "network_1", "SpiderQuestion": "Which grade has the most high schoolers?", "SpiderSynQuestion": "Which grade has the most students?", "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "Prediction": "grade FROM Highschooler\nGROUP BY grade\nORDER BY COUNT(*) DESC\nLIMIT 1;"}
{"db_id": "network_1", "SpiderQuestion": "Return the grade that has the greatest number of high schoolers.", "SpiderSynQuestion": "Return the grade that has the greatest number of students.", "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "Prediction": "grade FROM Highschooler\nGROUP BY grade\nORDER BY COUNT(*) DESC\nLIMIT 1;"}
{"db_id": "network_1", "SpiderQuestion": "Show me all grades that have at least 4 students.", "SpiderSynQuestion": "Show me all grades that have at least 4 students.", "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "Prediction": "grade \n FROM Highschooler \n GROUP BY grade \n HAVING COUNT(*) >= 4;"}
{"db_id": "network_1", "SpiderQuestion": "Which grades have 4 or more high schoolers?", "SpiderSynQuestion": "Which grades have 4 or more students?", "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "Prediction": "grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;"}
{"db_id": "network_1", "SpiderQuestion": "Show the student IDs and numbers of friends corresponding to each.", "SpiderSynQuestion": "Show the student IDs and numbers of friends corresponding to each.", "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "Prediction": "student_id, COUNT(friend_id) AS num_friends\n FROM Friend\n GROUP BY student_id;"}
{"db_id": "network_1", "SpiderQuestion": "How many friends does each student have?", "SpiderSynQuestion": "How many friends does each student have?", "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "Prediction": "Friend.student_id, COUNT(Friend.friend_id) \n FROM Friend \n GROUP BY Friend.student_id;"}
{"db_id": "network_1", "SpiderQuestion": "Show the names of high school students and their corresponding number of friends.", "SpiderSynQuestion": "Show the names of students and their corresponding number of friends.", "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "Prediction": "Highschooler.name, COUNT(Friend.friend_id)\n FROM Highschooler\n JOIN Friend ON Friend.student_id = Highschooler.ID\n GROUP BY Highschooler.name;"}
{"db_id": "network_1", "SpiderQuestion": "What are the names of the high schoolers and how many friends does each have?", "SpiderSynQuestion": "What are the names of the students and how many friends does each have?", "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "Prediction": "Highschooler.name, COUNT(Friend.friend_id)\n FROM Highschooler\n JOIN Friend ON Friend.student_id = Highschooler.ID\n GROUP BY Highschooler.name;"}
{"db_id": "network_1", "SpiderQuestion": "What is the name of the high schooler who has the greatest number of friends?", "SpiderSynQuestion": "What is the name of the student who has the greatest number of friends?", "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Highschooler.name\nFROM Highschooler\nJOIN Friend ON Highschooler.ID = Friend.student_id\nGROUP BY Highschooler.ID\nORDER BY COUNT(Friend.friend_id) DESC\nLIMIT 1;"}
{"db_id": "network_1", "SpiderQuestion": "Return the name of the high school student with the most friends.", "SpiderSynQuestion": "Return the name of the student with the most friends.", "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Highschooler.name\nFROM Highschooler\nJOIN Friend ON Highschooler.ID = Friend.student_id\nGROUP BY Highschooler.ID\nORDER BY COUNT(Friend.friend_id) DESC\nLIMIT 1;"}
{"db_id": "network_1", "SpiderQuestion": "Show the names of high schoolers who have at least 3 friends.", "SpiderSynQuestion": "Show the names of students who have at least 3 friends.", "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "Prediction": "Highschooler.name\nFROM Highschooler\nJOIN Friend ON Friend.student_id = Highschooler.ID\nGROUP BY Highschooler.ID\nHAVING COUNT(Friend.friend_id) >= 3;"}
{"db_id": "network_1", "SpiderQuestion": "What are the names of high schoolers who have 3 or more friends?", "SpiderSynQuestion": "What are the names of students who have 3 or more friends?", "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "Prediction": "Highschooler.name\nFROM Highschooler\nINNER JOIN Friend ON Friend.student_id = Highschooler.ID\nGROUP BY Highschooler.ID\nHAVING COUNT(Friend.friend_id) >= 3;"}
{"db_id": "network_1", "SpiderQuestion": "Show the names of all of the high schooler Kyle's friends.", "SpiderSynQuestion": "Show the names of all of the student Kyle's friends.", "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "Prediction": "Highschooler.name\nFROM Highschooler\nJOIN Friend ON Friend.friend_id = Highschooler.ID\nJOIN Highschooler AS Kyle ON Kyle.ID = Friend.student_id\nWHERE Kyle.name = 'Kyle';"}
{"db_id": "network_1", "SpiderQuestion": "Return the names of friends of the high school student Kyle.", "SpiderSynQuestion": "Return the names of friends of the student Kyle.", "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "Prediction": "Highschooler.name\nFROM Highschooler\nJOIN Friend ON Friend.friend_id = Highschooler.ID\nJOIN Highschooler AS Kyle ON Kyle.ID = Friend.student_id\nWHERE Kyle.name = 'Kyle';"}
{"db_id": "network_1", "SpiderQuestion": "How many friends does the high school student Kyle have?", "SpiderSynQuestion": "How many friends does the student Kyle have?", "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "Prediction": "COUNT(*) \nFROM Friend \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');"}
{"db_id": "network_1", "SpiderQuestion": "Count the number of friends Kyle has.", "SpiderSynQuestion": "Count the number of friends Kyle has.", "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "Prediction": "COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');"}
{"db_id": "network_1", "SpiderQuestion": "Show ids of all students who do not have any friends.", "SpiderSynQuestion": "Show ids of all students who do not have any friends.", "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "Prediction": "Highschooler.ID\nFROM Highschooler\nWHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)"}
{"db_id": "network_1", "SpiderQuestion": "What are the ids of high school students who do not have friends?", "SpiderSynQuestion": "What are the ids of students who do not have friends?", "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "Prediction": "Highschooler.ID\nFROM Highschooler\nWHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend);"}
{"db_id": "network_1", "SpiderQuestion": "Show names of all high school students who do not have any friends.", "SpiderSynQuestion": "Show names of all students who do not have any friends.", "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "Prediction": "Highschooler.name\nFROM Highschooler\nWHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)"}
{"db_id": "network_1", "SpiderQuestion": "What are the names of students who have no friends?", "SpiderSynQuestion": "What are the names of students who have no friends?", "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "Prediction": "Highschooler.name\nFROM Highschooler\nWHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)"}
{"db_id": "network_1", "SpiderQuestion": "Show the ids of high schoolers who have friends and are also liked by someone else.", "SpiderSynQuestion": "Show the ids of students who have friends and are also liked by someone else.", "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "Prediction": "Friend.student_id \nFROM Friend \nINNER JOIN Likes ON Friend.student_id = Likes.student_id \nWHERE Friend.friend_id IS NOT NULL AND Likes.liked_id <> Friend.student_id;"}
{"db_id": "network_1", "SpiderQuestion": "What are the ids of students who both have friends and are liked?", "SpiderSynQuestion": "What are the ids of students who both have friends and are liked?", "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "Prediction": "Friend.student_id \nFROM Friend \nINNER JOIN Likes ON Friend.student_id = Likes.student_id;"}
{"db_id": "network_1", "SpiderQuestion": "Show name of all students who have some friends and also are liked by someone else.", "SpiderSynQuestion": "Show name of all students who have some friends and also are liked by someone else.", "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "Prediction": "Highschooler.name \nFROM Highschooler \nJOIN Friend ON Friend.student_id = Highschooler.ID \nJOIN Likes ON Likes.student_id = Highschooler.ID \nWHERE Highschooler.ID IN (SELECT friend_id FROM Friend) AND Highschooler.ID IN (SELECT liked_id FROM Likes);"}
{"db_id": "network_1", "SpiderQuestion": "What are the names of high schoolers who both have friends and are liked?", "SpiderSynQuestion": "What are the names of students who both have friends and are liked?", "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "Prediction": "Highschooler.name\nFROM Highschooler\nWHERE Highschooler.ID IN (\n  SELECT Friend.student_id\n  FROM Friend\n  INTERSECT\n  SELECT Likes.student_id\n  FROM Likes\n)"}
{"db_id": "network_1", "SpiderQuestion": "Count the number of likes for each student id.", "SpiderSynQuestion": "Count the number of likes for each student id.", "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "Prediction": "student_id, COUNT(*) FROM Likes GROUP BY student_id;"}
{"db_id": "network_1", "SpiderQuestion": "How many likes correspond to each student id?", "SpiderSynQuestion": "How many likes correspond to each student id?", "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "Prediction": "student_id, COUNT(*) \n FROM Likes \n GROUP BY student_id;"}
{"db_id": "network_1", "SpiderQuestion": "Show the names of high schoolers who have likes, and numbers of likes for each.", "SpiderSynQuestion": "Show the names of students who have likes, and numbers of likes for each.", "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "Prediction": "Highschooler.name, COUNT(Likes.*) \n FROM Highschooler \n JOIN Likes ON Highschooler.ID = Likes.student_id \n GROUP BY Highschooler.name;"}
{"db_id": "network_1", "SpiderQuestion": "What are the names of high schoolers who have likes, and how many likes does each have?", "SpiderSynQuestion": "What are the names of students who have likes, and how many likes does each have?", "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "Prediction": "Highschooler.name, COUNT(Likes.*) \n FROM Highschooler \n JOIN Likes ON Highschooler.ID = Likes.student_id \n GROUP BY Highschooler.name;"}
{"db_id": "network_1", "SpiderQuestion": "What is the name of the high schooler who has the greatest number of likes?", "SpiderSynQuestion": "What is the name of the student who has the greatest number of likes?", "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Highschooler.name\nFROM Highschooler\nJOIN Likes ON Highschooler.ID = Likes.student_id\nGROUP BY Highschooler.ID\nORDER BY COUNT(Likes.liked_id) DESC\nLIMIT 1;"}
{"db_id": "network_1", "SpiderQuestion": "Give the name of the student with the most likes.", "SpiderSynQuestion": "Give the name of the student with the most likes.", "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Highschooler.name\nFROM Highschooler\nJOIN Likes ON Highschooler.ID = Likes.liked_id\nGROUP BY Highschooler.ID\nORDER BY COUNT(Likes.student_id) DESC\nLIMIT 1;"}
{"db_id": "network_1", "SpiderQuestion": "Show the names of students who have at least 2 likes.", "SpiderSynQuestion": "Show the names of students who have at least 2 likes.", "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "Prediction": "Highschooler.name\nFROM Highschooler\nJOIN Likes ON Highschooler.ID = Likes.student_id\nGROUP BY Highschooler.ID\nHAVING COUNT(Likes.liked_id) >= 2;"}
{"db_id": "network_1", "SpiderQuestion": "What are the names of students who have 2 or more likes?", "SpiderSynQuestion": "What are the names of students who have 2 or more interests?", "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "Prediction": "Highschooler.name\nFROM Highschooler\nJOIN Likes ON Highschooler.ID = Likes.student_id\nGROUP BY Highschooler.ID\nHAVING COUNT(Likes.liked_id) >= 2;"}
{"db_id": "network_1", "SpiderQuestion": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "SpiderSynQuestion": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "Prediction": "Highschooler.name\nFROM Highschooler\nJOIN Friend ON Friend.student_id = Highschooler.ID\nWHERE Highschooler.grade > 5\nGROUP BY Highschooler.ID\nHAVING COUNT(Friend.friend_id) >= 2;"}
{"db_id": "network_1", "SpiderQuestion": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?", "SpiderSynQuestion": "What are the names of students who have a grade of over 5 and have 2 or more friends?", "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "Prediction": "Highschooler.name\nFROM Highschooler\nJOIN Friend ON Friend.student_id = Highschooler.ID\nWHERE Highschooler.grade > 5\nGROUP BY Highschooler.ID\nHAVING COUNT(Friend.friend_id) >= 2;"}
{"db_id": "network_1", "SpiderQuestion": "How many likes does Kyle have?", "SpiderSynQuestion": "How many interests does Kyle have?", "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "Prediction": "COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');"}
{"db_id": "network_1", "SpiderQuestion": "Return the number of likes that the high schooler named Kyle has.", "SpiderSynQuestion": "Return the number of interests that the student named Kyle has.", "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "Prediction": "COUNT(*) \nFROM Likes \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');"}
{"db_id": "network_1", "SpiderQuestion": "Find the average grade of all students who have some friends.", "SpiderSynQuestion": "Find the average grade of all students who have some friends.", "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "Prediction": "AVG(Highschooler.grade) FROM Highschooler WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend UNION SELECT Friend.friend_id FROM Friend);"}
{"db_id": "network_1", "SpiderQuestion": "What is the average grade of students who have friends?", "SpiderSynQuestion": "What is the average grade of students who have friends?", "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "Prediction": "AVG(Highschooler.grade) FROM Highschooler WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend);"}
{"db_id": "network_1", "SpiderQuestion": "Find the minimum grade of students who have no friends.", "SpiderSynQuestion": "Find the minimum grade of students who have no friends.", "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "Prediction": "MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);"}
{"db_id": "network_1", "SpiderQuestion": "What is the lowest grade of students who do not have any friends?", "SpiderSynQuestion": "What is the lowest grade of students who do not have any friends?", "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "Prediction": "MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);"}
{"db_id": "dog_kennels", "SpiderQuestion": "Which states have both owners and professionals living there?", "SpiderSynQuestion": "Which states have both guardians and veterinarians living there?", "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "Prediction": "state \nFROM Owners \nWHERE state IN (SELECT state FROM Owners WHERE role_code = 'guardian') \nAND state IN (SELECT state FROM Professionals WHERE role_code = 'veterinarian');"}
{"db_id": "dog_kennels", "SpiderQuestion": "Find the states where both owners and professionals live.", "SpiderSynQuestion": "Find the states where both guardians and veterinarians live.", "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "Prediction": "Owners.state\nFROM Owners\nWHERE Owners.state IN (\n    SELECT Professionals.state\n    FROM Professionals\n    WHERE Professionals.role_code = 'veterinarian'\n)\nAND Owners.state IN (\n    SELECT Professionals.state\n    FROM Professionals\n    WHERE Professionals.role_code = 'guardian'\n);"}
{"db_id": "dog_kennels", "SpiderQuestion": "What is the average age of the dogs who have gone through any treatments?", "SpiderSynQuestion": "What is the average age of the dogs who have gone through any medical care?", "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "Prediction": "AVG(Dogs.age) FROM Dogs INNER JOIN Treatments ON Dogs.dog_id=Treatments.dog_id;"}
{"db_id": "dog_kennels", "SpiderQuestion": "Find the average age of the dogs who went through treatments.", "SpiderSynQuestion": "Find the average age of the dogs who went through health care.", "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "Prediction": "AVG(Dogs.age) FROM Dogs JOIN Treatments ON Dogs.dog_id=Treatments.dog_id WHERE Treatments.treatment_type_code='healthcare';"}
{"db_id": "dog_kennels", "SpiderQuestion": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "SpiderSynQuestion": "Which veterinarians live in the state of Indiana or have done more than 2 medical cares? List his or her id, family name and cell phone.", "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "Prediction": "professional_id, last_name, cell_number \n FROM Professionals \n WHERE state = 'Indiana' OR professional_id IN \n (SELECT professional_id FROM Treatments \n GROUP BY professional_id \n HAVING COUNT(*) > 2)"}
{"db_id": "dog_kennels", "SpiderQuestion": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.", "SpiderSynQuestion": "Find the id, last name and cell phone of the veterinarians who live in the state of Indiana or have performed more than two health-cares.", "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "Prediction": "professional_id, last_name, cell_number \n FROM Professionals \n WHERE state = 'Indiana' OR professional_id IN \n (SELECT professional_id FROM Treatments \n GROUP BY professional_id \n HAVING COUNT(treatment_id) > 2)"}
{"db_id": "dog_kennels", "SpiderQuestion": "Which dogs have not cost their owner more than 1000 for treatment? List the dog names.", "SpiderSynQuestion": "Which dogs have not cost their guardian more than 1000 for health-care? List the dog names.", "query": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )", "Prediction": "Dogs.name \nFROM Dogs \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nWHERE Treatments.cost_of_treatment <= 1000 \nGROUP BY Dogs.name;"}
{"db_id": "dog_kennels", "SpiderQuestion": "What are the names of the dogs for which the owner spent more than 1000 for treatment?", "SpiderSynQuestion": "What are the names of the dogs for which the guardian spent more than 1000 for health-care?", "query": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )", "Prediction": "Dogs.name\nFROM Dogs\nJOIN Treatments ON Treatments.dog_id = Dogs.dog_id\nWHERE Treatments.cost_of_treatment > 1000;"}
{"db_id": "dog_kennels", "SpiderQuestion": "Which first names are used for professionals or owners but are not used as dog names?", "SpiderSynQuestion": "Which first names are used for veterinarians or guardians but are not used as dog names?", "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "Prediction": "Professionals.first_name \nFROM Professionals \nWHERE Professionals.role_code = 'veterinarian' OR Professionals.role_code = 'guardian' \nEXCEPT \nSELECT Dogs.name \nFROM Dogs"}
{"db_id": "dog_kennels", "SpiderQuestion": "Find the first names that are used for professionals or owners but are not used as dog names.", "SpiderSynQuestion": "Find the first names that are used for veterinarians or guardians but are not used as dog names.", "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "Prediction": "Professionals.first_name\nFROM Professionals\nWHERE Professionals.role_code = 'veterinarian' OR Professionals.role_code = 'guardian'\nEXCEPT\nSELECT Dogs.name\nFROM Dogs;"}
{"db_id": "dog_kennels", "SpiderQuestion": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.", "SpiderSynQuestion": "Which veterinarian did not operate any medical care on dogs? List the veterinarian's id, role and email.", "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "Prediction": "Professionals.professional_id, Professionals.role_code, Professionals.email_address\nFROM Professionals\nWHERE Professionals.professional_id NOT IN (\n    SELECT professional_id\n    FROM Treatments\n) AND Professionals.role_code = 'veterinarian';"}
{"db_id": "dog_kennels", "SpiderQuestion": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.", "SpiderSynQuestion": "Give me the id, role and email of the veterinarians who did not perform any health-care on dogs.", "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "Prediction": "professional_id, role_code, email_address \nFROM Professionals \nWHERE professional_id NOT IN \n(SELECT professional_id FROM Treatments WHERE treatment_type_code = 'health-care');"}
{"db_id": "dog_kennels", "SpiderQuestion": "Which owner owns the most dogs? List the owner id, first name and last name.", "SpiderSynQuestion": "Which people owns the most dogs? List the people id, given name and family name.", "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Owners.owner_id, Owners.first_name, Owners.last_name\n FROM Owners\n JOIN Dogs ON Dogs.owner_id = Owners.owner_id\n GROUP BY Owners.owner_id\n ORDER BY COUNT(Dogs.dog_id) DESC\n LIMIT 1;"}
{"db_id": "dog_kennels", "SpiderQuestion": "Return the owner id, first name and last name of the owner who has the most dogs.", "SpiderSynQuestion": "Return the people id, given name and family name of the guardian who has the most dogs.", "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Owners.owner_id, Owners.first_name, Owners.last_name\n FROM Owners\n WHERE Owners.owner_id = (\n     SELECT Dogs.owner_id\n     FROM Dogs\n     GROUP BY Dogs.owner_id\n     ORDER BY COUNT(*) DESC\n     LIMIT 1\n );"}
{"db_id": "dog_kennels", "SpiderQuestion": "Which professionals have done at least two treatments? List the professional's id, role, and first name.", "SpiderSynQuestion": "Which veterinarians have done at least two medical cares? List the veterinarian's id, role, and given name.", "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "Prediction": "Professionals.professional_id, Professionals.role_code, Professionals.first_name\nFROM Professionals\nINNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id\nWHERE Treatments.treatment_type_code = 'medical care'\nGROUP BY Professionals.professional_id\nHAVING COUNT(*) >= 2;"}
{"db_id": "dog_kennels", "SpiderQuestion": "What are the id, role, and first name of the professionals who have performed two or more treatments?", "SpiderSynQuestion": "What are the id, role, and given name of the veterinarians who have performed two or more health-cares?", "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "Prediction": "Professionals.professional_id, Professionals.role_code, Professionals.first_name\nFROM Professionals\nINNER JOIN Treatments ON Treatments.professional_id = Professionals.professional_id\nWHERE Treatments.treatment_type_code = 'health-care'\nGROUP BY Professionals.professional_id\nHAVING COUNT(*) >= 2;"}
{"db_id": "dog_kennels", "SpiderQuestion": "What is the name of the breed with the most dogs?", "SpiderSynQuestion": "What is the name of the breed with the most puppies?", "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "Prediction": "Breeds.breed_name\nFROM Dogs\nJOIN Breeds ON Dogs.breed_code=Breeds.breed_code\nWHERE Dogs.age < 1\nGROUP BY Breeds.breed_name\nORDER BY COUNT(*) DESC\nLIMIT 1;"}
{"db_id": "dog_kennels", "SpiderQuestion": "Which breed do the most dogs have? Give me the breed name.", "SpiderSynQuestion": "Which breed do the most puppies have? Give me the breed name.", "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "Prediction": "Breeds.breed_name \nFROM Dogs \nJOIN Breeds ON Dogs.breed_code=Breeds.breed_code \nWHERE Dogs.age < 1 \nGROUP BY Breeds.breed_name \nORDER BY COUNT(*) DESC \nLIMIT 1;"}
{"db_id": "dog_kennels", "SpiderQuestion": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "SpiderSynQuestion": "Which guardian has paid for the most health cares on his or her dogs? List the guardian id and family name.", "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Owners.owner_id, Owners.last_name\n FROM Owners\n JOIN Dogs ON Dogs.owner_id = Owners.owner_id\n JOIN Treatments ON Treatments.dog_id = Dogs.dog_id\n GROUP BY Owners.owner_id\n ORDER BY SUM(Treatments.cost_of_treatment) DESC\n LIMIT 1;"}
{"db_id": "dog_kennels", "SpiderQuestion": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.", "SpiderSynQuestion": "Tell me the guardian id and family name of the guardian who spent the most on treatments of his or her puppies.", "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "Prediction": "Owners.owner_id, Owners.last_name\n FROM Owners\n JOIN Dogs ON Dogs.owner_id = Owners.owner_id\n JOIN Treatments ON Treatments.dog_id = Dogs.dog_id\n GROUP BY Owners.owner_id\n ORDER BY SUM(Treatments.cost_of_treatment) DESC\n LIMIT 1;"}
{"db_id": "dog_kennels", "SpiderQuestion": "What is the description of the treatment type that costs the least money in total?", "SpiderSynQuestion": "What is the describing details of the health-care type that costs the least money in total?", "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "Prediction": "Treatment_Types.treatment_type_description, SUM(Treatments.cost_of_treatment) AS total_cost\n FROM Treatments\n JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code\n GROUP BY Treatments.treatment_type_code\n ORDER BY total_cost ASC\n LIMIT 1;"}
{"db_id": "dog_kennels", "SpiderQuestion": "Give me the description of the treatment type whose total cost is the lowest.", "SpiderSynQuestion": "Give me the describing details of the health-care whose total cost is the lowest.", "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "Prediction": "Treatments.treatment_type_code, Treatment_Types.treatment_type_description, SUM(Treatments.cost_of_treatment) AS total_cost\n FROM Treatments\n JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code\n GROUP BY Treatments.treatment_type_code\n ORDER BY total_cost ASC\n LIMIT 1;"}
{"db_id": "dog_kennels", "SpiderQuestion": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "SpiderSynQuestion": "Which guardian has paid the largest amount of money in total for their puppies? Show the guardian id and zip code.", "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "Prediction": "Dogs.owner_id, Owners.zip_code\n FROM Dogs\n JOIN Owners ON Dogs.owner_id = Owners.owner_id\n JOIN Charges ON Dogs.dog_id = Charges.dog_id\n GROUP BY Dogs.owner_id\n ORDER BY SUM(Charges.charge_amount) DESC\n LIMIT 1;"}
{"db_id": "dog_kennels", "SpiderQuestion": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "SpiderSynQuestion": "Find the guardian id and zip code of the guardian who spent the most money in total for his or her puppies.", "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "Prediction": "Dogs.owner_id, Owners.zip_code\n FROM Dogs\n JOIN Owners ON Dogs.owner_id = Owners.owner_id\n WHERE Dogs.abandoned_yn = 'N' AND Dogs.date_adopted IS NOT NULL\n GROUP BY Dogs.owner_id\n ORDER BY SUM((SELECT charge_amount FROM Charges WHERE charge_type = 'Adoption Fee') + (SELECT charge_amount FROM Charges WHERE charge_type = 'Vet Fee') * (SELECT COUNT(*) FROM Dogs WHERE Dogs.owner_id = Owners.owner_id AND Dogs.abandoned_yn = 'N' AND Dogs.date_adopted IS NOT NULL))\n DESC LIMIT 1;"}
{"db_id": "dog_kennels", "SpiderQuestion": "Which professionals have done at least two types of treatments? List the professional id and cell phone.", "SpiderSynQuestion": "Which veterinarians have done at least two types of health-care? List the veterinarian id and cell phone.", "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "Prediction": "Professionals.professional_id, Professionals.cell_number\nFROM Professionals\nINNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id\nGROUP BY Professionals.professional_id\nHAVING COUNT(DISTINCT Treatments.treatment_type_code) >= 2;"}
{"db_id": "dog_kennels", "SpiderQuestion": "Find the id and cell phone of the professionals who operate two or more types of treatments.", "SpiderSynQuestion": "Find the id and cell phone of the veterinarians who operate two or more types of health-care.", "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "Prediction": "Professionals.professional_id, Professionals.cell_number\n FROM Professionals\n JOIN Treatments ON Professionals.professional_id = Treatments.professional_id\n JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code\n WHERE Treatment_Types.treatment_type_description = 'health-care'\n GROUP BY Professionals.professional_id\n HAVING COUNT(DISTINCT Treatment_Types.treatment_type_code) >= 2;"}
{"db_id": "dog_kennels", "SpiderQuestion": "What are the first name and last name of the professionals who have done treatment with cost below average?", "SpiderSynQuestion": "What are the first name and family name of the veterinarians who have done medical care with cost below average?", "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN  Treatments AS T2 on T2.professional_id = T1.professional_id WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "Prediction": "Professionals.first_name, Professionals.last_name\nFROM Professionals\nJOIN Treatments ON Treatments.professional_id = Professionals.professional_id\nWHERE Treatments.treatment_type_code = 'medical care' AND Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments WHERE treatment_type_code = 'medical care')"}
{"db_id": "dog_kennels", "SpiderQuestion": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "SpiderSynQuestion": "Which veterinarians have operated a medical care that costs less than the average? Give me theor given names and family names.", "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 on T2.professional_id = T1.professional_id WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "Prediction": "Professionals.first_name, Professionals.last_name\nFROM Professionals\nWHERE Professionals.professional_id IN (\n    SELECT Treatments.professional_id\n    FROM Treatments\n    WHERE Treatments.cost_of_treatment < (\n        SELECT AVG(cost_of_treatment)\n        FROM Treatments\n    )\n);"}
{"db_id": "dog_kennels", "SpiderQuestion": "List the date of each treatment, together with the first name of the professional who operated it.", "SpiderSynQuestion": "List the date of each medical care, together with the given name of the veterinarian who operated it.", "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "Prediction": "Treatments.date_of_treatment, Professionals.first_name || ' ' || Professionals.last_name AS veterinarian_name\n FROM Treatments\n JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;"}
{"db_id": "dog_kennels", "SpiderQuestion": "What are the date and the operating professional's first name of each treatment?", "SpiderSynQuestion": "What are the date and the operating veterinarian's given name of each medical care?", "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "Prediction": "Treatments.date_of_treatment, Professionals.first_name\n FROM Treatments\n JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;"}
{"db_id": "dog_kennels", "SpiderQuestion": "List the cost of each treatment and the corresponding treatment type description.", "SpiderSynQuestion": "List the cost of each health-care and the corresponding health-care type describing details.", "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "Prediction": "Treatments.cost_of_treatment, Treatment_Types.treatment_type_description\n FROM Treatments\n JOIN Treatment_Types ON Treatments.treatment_type_code=Treatment_Types.treatment_type_code;"}
{"db_id": "dog_kennels", "SpiderQuestion": "What are the cost and treatment type description of each treatment?", "SpiderSynQuestion": "What are the cost and health-care type describing content of each health-care?", "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "Prediction": "Treatment_Types.treatment_type_description, Treatments.cost_of_treatment FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code=Treatment_Types.treatment_type_code;"}
{"db_id": "dog_kennels", "SpiderQuestion": "List each owner's first name, last name, and the size of his for her dog.", "SpiderSynQuestion": "List each guardian's first name, last name, and the size of his for her dog.", "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "Prediction": "Owners.first_name, Owners.last_name, Sizes.size_description\n FROM Owners\n JOIN Dogs ON Dogs.owner_id = Owners.owner_id\n JOIN Sizes ON Dogs.size_code = Sizes.size_code;"}
{"db_id": "dog_kennels", "SpiderQuestion": "What are each owner's first name, last name, and the size of their dog?", "SpiderSynQuestion": "What are each guardians's first name, last name, and the size of their dog?", "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "Prediction": "Owners.first_name, Owners.last_name, Sizes.size_description\n FROM Owners\n JOIN Dogs ON Owners.owner_id = Dogs.owner_id\n JOIN Sizes ON Dogs.size_code = Sizes.size_code;"}
{"db_id": "dog_kennels", "SpiderQuestion": "List pairs of the owner's first name and the dogs's name.", "SpiderSynQuestion": "List pairs of the guardians's given name and the puppies's name.", "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "Prediction": "Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;"}
{"db_id": "dog_kennels", "SpiderQuestion": "What are each owner's first name and their dogs's name?", "SpiderSynQuestion": "What are each guardians's given name and their puppies's name?", "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "Prediction": "Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;"}
{"db_id": "dog_kennels", "SpiderQuestion": "List the names of the dogs of the rarest breed and the treatment dates of them.", "SpiderSynQuestion": "List the names of the puppies of the rarest breed and the health care dates of them.", "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "Prediction": "Dogs.name, Treatments.date_of_treatment\n FROM Dogs\n JOIN Breeds ON Dogs.breed_code = Breeds.breed_code\n JOIN Treatments ON Treatments.dog_id = Dogs.dog_id\n WHERE Breeds.breed_name = (SELECT Breeds.breed_name FROM Breeds ORDER BY COUNT(*) LIMIT 1)\n AND Dogs.age < 1;"}
{"db_id": "dog_kennels", "SpiderQuestion": "Which dogs are of the rarest breed? Show their names and treatment dates.", "SpiderSynQuestion": "Which dogs are of the rarest breed? Show their names and medical care dates.", "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "Prediction": "Dogs.name, Treatments.date_of_treatment\n FROM Dogs\n JOIN Breeds ON Dogs.breed_code = Breeds.breed_code\n JOIN Treatments ON Treatments.dog_id = Dogs.dog_id\n WHERE Breeds.breed_name = (SELECT Breeds.breed_name FROM Breeds ORDER BY COUNT(*) ASC LIMIT 1);"}
{"db_id": "dog_kennels", "SpiderQuestion": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "SpiderSynQuestion": "Which dogs are owned by someone who lives in Virginia? List the guardian's first name and the dog's name.", "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "Prediction": "Owners.first_name, Dogs.name\n FROM Dogs\n JOIN Owners ON Dogs.owner_id = Owners.owner_id\n WHERE Owners.state = 'Virginia';"}
{"db_id": "dog_kennels", "SpiderQuestion": "Find the first names of owners living in Virginia and the names of dogs they own.", "SpiderSynQuestion": "Find the given names of guardians living in Virginia and the names of dogs they own.", "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "Prediction": "Owners.first_name, Owners.last_name, Dogs.name\n FROM Owners\n JOIN Dogs ON Owners.owner_id = Dogs.owner_id\n WHERE Owners.state = 'Virginia'"}
{"db_id": "dog_kennels", "SpiderQuestion": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "SpiderSynQuestion": "What are the arriving and leaving date of the puppies who have gone through a medical care?", "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "Prediction": "Dogs.date_arrived, Dogs.date_departed\nFROM Dogs\nINNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nWHERE Dogs.age < 1;"}
{"db_id": "dog_kennels", "SpiderQuestion": "Find the arriving date and the departing date of the dogs that received a treatment.", "SpiderSynQuestion": "Find the arriving and leaving date of the puppies that received a health care.", "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "Prediction": "Dogs.date_arrived, Dogs.date_departed\nFROM Dogs\nINNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nINNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code\nWHERE Dogs.age < 1 AND Treatment_Types.treatment_type_description = 'health care';"}
{"db_id": "dog_kennels", "SpiderQuestion": "List the last name of the owner owning the youngest dog.", "SpiderSynQuestion": "List the family name of the guardian owning the youngest puppy.", "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "Prediction": "Owners.last_name\nFROM Dogs\nJOIN Owners ON Dogs.owner_id = Owners.owner_id\nWHERE Dogs.age = (SELECT MIN(age) FROM Dogs)"}
{"db_id": "dog_kennels", "SpiderQuestion": "Who owns the youngest dog? Give me his or her last name.", "SpiderSynQuestion": "Who owns the youngest puppy? Give me his or her last name.", "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "Prediction": "Owners.last_name\nFROM Dogs\nJOIN Owners ON Dogs.owner_id=Owners.owner_id\nWHERE Dogs.age = (SELECT MIN(age) FROM Dogs)"}
{"db_id": "dog_kennels", "SpiderQuestion": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "SpiderSynQuestion": "List the emails of the veterinarians who live in the state of Hawaii or the state of Wisconsin.", "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "Prediction": "email_address FROM Professionals WHERE state='Hawaii' OR state='Wisconsin' AND role_code='veterinarian';"}
{"db_id": "dog_kennels", "SpiderQuestion": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "SpiderSynQuestion": "What are the emails of the veterinarians living in either the state of Hawaii or the state of Wisconsin?", "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "Prediction": "email_address FROM Professionals WHERE state='Hawaii' OR state='Wisconsin' AND role_code='veterinarian';"}
{"db_id": "dog_kennels", "SpiderQuestion": "What are the arriving date and the departing date of all the dogs?", "SpiderSynQuestion": "What are the arriving and leaving date of all the puppies?", "query": "SELECT date_arrived ,  date_departed FROM Dogs", "Prediction": "date_arrived, date_departed FROM Dogs WHERE age < 1;"}
{"db_id": "dog_kennels", "SpiderQuestion": "List the arrival date and the departure date for all the dogs.", "SpiderSynQuestion": "List the arriving and leaving date for all the puppies.", "query": "SELECT date_arrived ,  date_departed FROM Dogs", "Prediction": "Dogs.date_arrived, Dogs.date_departed \nFROM Dogs \nWHERE Dogs.age < 1;"}
{"db_id": "dog_kennels", "SpiderQuestion": "How many dogs went through any treatments?", "SpiderSynQuestion": "How many puppies went through any health cares?", "query": "SELECT count(DISTINCT dog_id) FROM Treatments", "Prediction": "COUNT(DISTINCT Dogs.dog_id) FROM Dogs JOIN Treatments ON Dogs.dog_id=Treatments.dog_id WHERE Dogs.age < 1;"}
{"db_id": "dog_kennels", "SpiderQuestion": "Count the number of dogs that went through a treatment.", "SpiderSynQuestion": "Count the number of puppies that went through a health care.", "query": "SELECT count(DISTINCT dog_id) FROM Treatments", "Prediction": "COUNT(DISTINCT Dogs.dog_id) FROM Dogs \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nWHERE Dogs.age < 1 AND Treatments.treatment_type_code = 'healthcare';"}
{"db_id": "dog_kennels", "SpiderQuestion": "How many professionals have performed any treatment to dogs?", "SpiderSynQuestion": "How many veterinarians have performed any health care to puppies?", "query": "SELECT count(DISTINCT professional_id) FROM Treatments", "Prediction": "COUNT(DISTINCT Professionals.professional_id) \nFROM Treatments \nJOIN Dogs ON Treatments.dog_id = Dogs.dog_id \nJOIN Professionals ON Treatments.professional_id = Professionals.professional_id \nWHERE Dogs.age < 1;"}
{"db_id": "dog_kennels", "SpiderQuestion": "Find the number of professionals who have ever treated dogs.", "SpiderSynQuestion": "Find the number of veterinarians who have ever treated puppies.", "query": "SELECT count(DISTINCT professional_id) FROM Treatments", "Prediction": "COUNT(DISTINCT Professionals.professional_id) \nFROM Professionals \nJOIN Treatments ON Professionals.professional_id = Treatments.professional_id \nJOIN Dogs ON Treatments.dog_id = Dogs.dog_id \nWHERE Dogs.age < 1;"}
{"db_id": "dog_kennels", "SpiderQuestion": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "SpiderSynQuestion": "Which veterinarians live in a city containing the substring 'West'? List his or her role, street, town and state.", "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "Prediction": "role_code, street, city, state \n FROM Professionals \n WHERE city LIKE '%West%';"}
{"db_id": "dog_kennels", "SpiderQuestion": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "SpiderSynQuestion": "Find the role, street, town and state of the veterinarians living in a town that contains the substring 'West'.", "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "Prediction": "Professionals.role_code, Professionals.street, Professionals.city, Professionals.state \n FROM Professionals \n WHERE Professionals.city LIKE '%West%';"}
{"db_id": "dog_kennels", "SpiderQuestion": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "SpiderSynQuestion": "Which guardians live in the state whose name contains the substring 'North'? List his given name, family name and email.", "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "Prediction": "first_name, last_name, email_address \n FROM Owners \n WHERE state LIKE '%North%';"}
{"db_id": "dog_kennels", "SpiderQuestion": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "SpiderSynQuestion": "Return the given name, family name and email of the guardians living in a state whose name contains the substring 'North'.", "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "Prediction": "Owners.first_name, Owners.last_name, Owners.email_address \n FROM Owners \n WHERE Owners.state LIKE '%North%';"}
{"db_id": "dog_kennels", "SpiderQuestion": "How many dogs have an age below the average?", "SpiderSynQuestion": "How many puppies have an age below the average?", "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "Prediction": "COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs) AND breed_code = 'PUP';"}
{"db_id": "dog_kennels", "SpiderQuestion": "Count the number of dogs of an age below the average.", "SpiderSynQuestion": "Count the number of puppies of an age below the average.", "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "Prediction": "COUNT(*) \nFROM Dogs \nWHERE age < (SELECT AVG(age) FROM Dogs) AND breed_code LIKE '%puppy%';"}
{"db_id": "dog_kennels", "SpiderQuestion": "How much does the most recent treatment cost?", "SpiderSynQuestion": "How much does the most recent health-care cost?", "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "Prediction": "MAX(cost_of_treatment) FROM Treatments WHERE treatment_type_code = 'health-care';"}
{"db_id": "dog_kennels", "SpiderQuestion": "Show me the cost of the most recently performed treatment.", "SpiderSynQuestion": "Show me the cost of the most recently performed medical care.", "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "Prediction": "cost_of_treatment \n FROM Treatments \n WHERE treatment_type_code = 'MED' \n ORDER BY date_of_treatment DESC \n LIMIT 1;"}
{"db_id": "dog_kennels", "SpiderQuestion": "How many dogs have not gone through any treatment?", "SpiderSynQuestion": "How many puppies have not gone through any medical care?", "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )", "Prediction": "COUNT(*) FROM Dogs WHERE age < 1 AND dog_id NOT IN (SELECT dog_id FROM Treatments);"}
{"db_id": "dog_kennels", "SpiderQuestion": "Tell me the number of dogs that have received any treatment.", "SpiderSynQuestion": "Tell me the number of puppies that have received any health-care.", "query": "SELECT count(*) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "Prediction": "COUNT(DISTINCT Dogs.dog_id) FROM Dogs JOIN Treatments ON Dogs.dog_id=Treatments.dog_id WHERE Dogs.age < 1;"}
{"db_id": "dog_kennels", "SpiderQuestion": "How many owners temporarily do not have any dogs?", "SpiderSynQuestion": "How many guardians temporarily do not have any puppies?", "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "Prediction": "COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE abandoned_yn='N' AND date_departed IS NULL);"}
{"db_id": "dog_kennels", "SpiderQuestion": "Find the number of owners who do not own any dogs at this moment.", "SpiderSynQuestion": "Find the number of guardians who do not own any puppies at this moment.", "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "Prediction": "COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL);"}
{"db_id": "dog_kennels", "SpiderQuestion": "How many professionals did not operate any treatment on dogs?", "SpiderSynQuestion": "How many veterinarians did not operate any treatment on puppies?", "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "Prediction": "COUNT(DISTINCT Professionals.professional_id) \nFROM Professionals \nLEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id \nLEFT JOIN Dogs ON Treatments.dog_id = Dogs.dog_id \nWHERE Dogs.age < 1 AND Treatments.treatment_id IS NULL AND Professionals.role_code = 'veterinarian';"}
{"db_id": "dog_kennels", "SpiderQuestion": "Find the number of professionals who have not treated any dogs.", "SpiderSynQuestion": "Find the number of veterinarians who have not treated any puppies.", "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "Prediction": "COUNT(DISTINCT Professionals.professional_id) FROM Professionals\nLEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id\nLEFT JOIN Dogs ON Treatments.dog_id = Dogs.dog_id\nWHERE Dogs.age >= 1 OR Dogs.age IS NULL;"}
{"db_id": "dog_kennels", "SpiderQuestion": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "SpiderSynQuestion": "List the puppy name, age and weight of the puppies who have been abandoned? 1 stands for yes, and 0 stands for no.", "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "Prediction": "name, age, weight FROM Dogs WHERE abandoned_yn = 1 AND size_code = 'P';"}
{"db_id": "dog_kennels", "SpiderQuestion": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "SpiderSynQuestion": "What are the puppy name, age and weight of the puppies that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "Prediction": "name, age, weight FROM Dogs WHERE abandoned_yn = 1;"}
{"db_id": "dog_kennels", "SpiderQuestion": "What is the average age of all the dogs?", "SpiderSynQuestion": "What is the average age of all the puppies?", "query": "SELECT avg(age) FROM Dogs", "Prediction": "AVG(age) FROM Dogs WHERE size_code = 'P';"}
{"db_id": "dog_kennels", "SpiderQuestion": "Compute the average age of all the dogs.", "SpiderSynQuestion": "Compute the average age of all the puppies.", "query": "SELECT avg(age) FROM Dogs", "Prediction": "AVG(age) FROM Dogs WHERE size_code = 'P';"}
{"db_id": "dog_kennels", "SpiderQuestion": "What is the age of the oldest dog?", "SpiderSynQuestion": "What is the age of the oldest puppy?", "query": "SELECT max(age) FROM Dogs", "Prediction": "MAX(age) FROM Dogs WHERE age <= 1;"}
{"db_id": "dog_kennels", "SpiderQuestion": "Tell me the age of the oldest dog.", "SpiderSynQuestion": "Tell me the age of the oldest puppy.", "query": "SELECT max(age) FROM Dogs", "Prediction": "MAX(age) FROM Dogs WHERE age < 1;"}
{"db_id": "dog_kennels", "SpiderQuestion": "How much does each charge type costs? List both charge type and amount.", "SpiderSynQuestion": "How much does each charge type costs? List both charge type and amount.", "query": "SELECT charge_type ,  charge_amount FROM Charges", "Prediction": "charge_type, SUM(charge_amount) AS total_cost FROM Charges GROUP BY charge_type;"}
{"db_id": "dog_kennels", "SpiderQuestion": "List each charge type and its amount.", "SpiderSynQuestion": "List each charge type and its amount.", "query": "SELECT charge_type ,  charge_amount FROM Charges", "Prediction": "charge_type, SUM(charge_amount) FROM Charges GROUP BY charge_type;"}
{"db_id": "dog_kennels", "SpiderQuestion": "How much does the most expensive charge type costs?", "SpiderSynQuestion": "How much does the most expensive charge type costs?", "query": "SELECT max(charge_amount) FROM Charges", "Prediction": "MAX(charge_amount) FROM Charges;"}
{"db_id": "dog_kennels", "SpiderQuestion": "What is the charge amount of the most expensive charge type?", "SpiderSynQuestion": "What is the charge amount of the most expensive charge type?", "query": "SELECT max(charge_amount) FROM Charges", "Prediction": "MAX(charge_amount) FROM Charges WHERE charge_type = (SELECT charge_type FROM Charges ORDER BY charge_amount DESC LIMIT 1);"}
{"db_id": "dog_kennels", "SpiderQuestion": "List the email, cell phone and home phone of all the professionals.", "SpiderSynQuestion": "List the email, cell phone and home phone of all the veterinarians.", "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "Prediction": "email_address, cell_number, home_phone FROM Professionals WHERE role_code = 'veterinarian';"}
{"db_id": "dog_kennels", "SpiderQuestion": "What are the email, cell phone and home phone of each professional?", "SpiderSynQuestion": "What are the email, cell phone and home phone of each veterinarian?", "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "Prediction": "email_address, cell_number, home_phone FROM Professionals WHERE role_code = 'VET';"}
{"db_id": "dog_kennels", "SpiderQuestion": "What are all the possible breed type and size type combinations?", "SpiderSynQuestion": "What are all the possible breed type and size type combinations?", "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "Prediction": "Breeds.breed_name, Sizes.size_description\n FROM Breeds, Sizes;"}
{"db_id": "dog_kennels", "SpiderQuestion": "Find the distinct breed type and size type combinations for dogs.", "SpiderSynQuestion": "Find the distinct breed type and size type combinations for puppies.", "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "Prediction": "DISTINCT Breeds.breed_name, Sizes.size_description\nFROM Dogs\nJOIN Breeds ON Dogs.breed_code = Breeds.breed_code\nJOIN Sizes ON Dogs.size_code = Sizes.size_code\nWHERE Dogs.age < 1;"}
{"db_id": "dog_kennels", "SpiderQuestion": "List the first name of all the professionals along with the description of the treatment they have done.", "SpiderSynQuestion": "List the given name of all the veterinarians along with the description of the medical care they have done.", "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "Prediction": "Professionals.first_name, Treatment_Types.treatment_type_description\n FROM Professionals\n JOIN Treatments ON Professionals.professional_id = Treatments.professional_id\n JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;"}
{"db_id": "dog_kennels", "SpiderQuestion": "What are each professional's first name and description of the treatment they have performed?", "SpiderSynQuestion": "What are each veterinarian's first name and describing details of the health-care they have performed?", "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "Prediction": "Professionals.first_name, Treatments.treatment_type_code, Treatments.date_of_treatment\n FROM Professionals\n JOIN Treatments ON Professionals.professional_id = Treatments.professional_id;"}
{"db_id": "singer", "SpiderQuestion": "How many singers are there?", "SpiderSynQuestion": "How many vocalists are there?", "query": "SELECT count(*) FROM singer", "Prediction": "COUNT(*) FROM singer;"}
{"db_id": "singer", "SpiderQuestion": "What is the count of singers?", "SpiderSynQuestion": "What is the count of  musicians?", "query": "SELECT count(*) FROM singer", "Prediction": "COUNT(*) FROM singer;"}
{"db_id": "singer", "SpiderQuestion": "List the name of singers in ascending order of net worth.", "SpiderSynQuestion": "List the name of vocalists in ascending order of net worth.", "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "Prediction": "Name FROM singer ORDER BY Net_Worth_Millions ASC;"}
{"db_id": "singer", "SpiderQuestion": "What are the names of singers ordered by ascending net worth?", "SpiderSynQuestion": "What are the names of  musicians ordered by ascending net worth?", "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "Prediction": "Name FROM singer ORDER BY Net_Worth_Millions ASC;"}
{"db_id": "singer", "SpiderQuestion": "What are the birth year and citizenship of singers?", "SpiderSynQuestion": "What are the birth year and country of vocalists?", "query": "SELECT Birth_Year ,  Citizenship FROM singer", "Prediction": "Birth_Year, Citizenship FROM singer;"}
{"db_id": "singer", "SpiderQuestion": "What are the birth years and citizenships of the singers?", "SpiderSynQuestion": "What are the birth years and country of the musicians?", "query": "SELECT Birth_Year ,  Citizenship FROM singer", "Prediction": "Birth_Year, Citizenship FROM singer;"}
{"db_id": "singer", "SpiderQuestion": "List the name of singers whose citizenship is not \"France\".", "SpiderSynQuestion": "List the name of vocalists whose citizenship is not \"France\".", "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "Prediction": "Name FROM singer WHERE Citizenship != \"France\";"}
{"db_id": "singer", "SpiderQuestion": "What are the names of the singers who are not French citizens?", "SpiderSynQuestion": "What are the names of the musicians who are not French citizens?", "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "Prediction": "Name FROM singer WHERE Citizenship != 'French';"}
{"db_id": "singer", "SpiderQuestion": "Show the name of singers whose birth year is either 1948 or 1949?", "SpiderSynQuestion": "Show the name of vocalists whose birth year is either 1948 or 1949?", "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "Prediction": "Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;"}
{"db_id": "singer", "SpiderQuestion": "What are the names of the singers whose birth years are either 1948 or 1949?", "SpiderSynQuestion": "What are the names of the musicians whose birth years are either 1948 or 1949?", "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "Prediction": "Name FROM singer WHERE Birth_Year IN (1948, 1949);"}
{"db_id": "singer", "SpiderQuestion": "What is the name of the singer with the largest net worth?", "SpiderSynQuestion": "What is the name of the vocalist with the largest net worth?", "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "Prediction": "Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;"}
{"db_id": "singer", "SpiderQuestion": "What is the name of the singer who is worth the most?", "SpiderSynQuestion": "What is the name of the vocalist who is worth the most?", "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "Prediction": "singer.Name FROM singer ORDER BY singer.Net_Worth_Millions DESC LIMIT 1;"}
{"db_id": "singer", "SpiderQuestion": "Show different citizenship of singers and the number of singers of each citizenship.", "SpiderSynQuestion": "Show different citizenship of vocalists and the number of vocalists of each country.", "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "Prediction": "Citizenship, COUNT(*) FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM vocalist) GROUP BY Citizenship;"}
{"db_id": "singer", "SpiderQuestion": "For each citizenship, how many singers are from that country?", "SpiderSynQuestion": "For each country, how many musicians are from that country?", "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "Prediction": "Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;"}
{"db_id": "singer", "SpiderQuestion": "Please show the most common citizenship of singers.", "SpiderSynQuestion": "Please show the most common country of vocalists.", "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "Prediction": "singer.Citizenship, COUNT(*) as count\n FROM singer\n GROUP BY singer.Citizenship\n ORDER BY count DESC\n LIMIT 1;"}
{"db_id": "singer", "SpiderQuestion": "What is the msot common singer citizenship?", "SpiderSynQuestion": "What is the msot common vocalist country?", "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "Prediction": "Citizenship, COUNT(*) as count\n FROM singer\n GROUP BY Citizenship\n ORDER BY count DESC\n LIMIT 1;"}
{"db_id": "singer", "SpiderQuestion": "Show different citizenships and the maximum net worth of singers of each citizenship.", "SpiderSynQuestion": "Show different country and the maximum net worth of musicians of each country.", "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "Prediction": "Citizenship, MAX(Net_Worth_Millions) \n FROM singer \n GROUP BY Citizenship;"}
{"db_id": "singer", "SpiderQuestion": "For each citizenship, what is the maximum net worth?", "SpiderSynQuestion": "For each country, what is the maximum net worth?", "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "Prediction": "Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;"}
{"db_id": "singer", "SpiderQuestion": "Show titles of songs and names of singers.", "SpiderSynQuestion": "Show names of songs and names of musicians.", "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "Prediction": "song.Title, singer.Name\n FROM song\n JOIN singer ON song.Singer_ID=singer.Singer_ID;"}
{"db_id": "singer", "SpiderQuestion": "What are the song titles and singer names?", "SpiderSynQuestion": "What are the song names and vocalist names?", "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "Prediction": "song.Title, singer.Name \n FROM song \n JOIN singer ON song.Singer_ID=singer.Singer_ID;"}
{"db_id": "singer", "SpiderQuestion": "Show distinct names of singers that have songs with sales more than 300000.", "SpiderSynQuestion": "Show distinct names of musicians that have songs with sales more than 300000.", "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "Prediction": "DISTINCT singer.Name\nFROM singer\nJOIN song ON singer.Singer_ID = song.Singer_ID\nWHERE song.Sales > 300000;"}
{"db_id": "singer", "SpiderQuestion": "what are the different names of the singers that have sales more than 300000?", "SpiderSynQuestion": "what are the different names of the vocalists that have sales more than 300000?", "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "Prediction": "singer.Name FROM singer JOIN song ON singer.Singer_ID=song.Singer_ID WHERE song.Sales > 300000;"}
{"db_id": "singer", "SpiderQuestion": "Show the names of singers that have more than one song.", "SpiderSynQuestion": "Show the names of musicians that have more than one song.", "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "Prediction": "singer.Name\nFROM singer\nINNER JOIN song ON singer.Singer_ID = song.Singer_ID\nGROUP BY singer.Name\nHAVING COUNT(song.Song_ID) > 1;"}
{"db_id": "singer", "SpiderQuestion": "What are the names of the singers that have more than one songs?", "SpiderSynQuestion": "What are the names of the vocalists that have more than one songs?", "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "Prediction": "singer.Name\nFROM singer\nINNER JOIN song ON singer.Singer_ID = song.Singer_ID\nGROUP BY singer.Singer_ID\nHAVING COUNT(song.Song_ID) > 1;"}
{"db_id": "singer", "SpiderQuestion": "Show the names of singers and the total sales of their songs.", "SpiderSynQuestion": "Show the names of musicians and the total sales of their songs.", "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "Prediction": "singer.Name, SUM(song.Sales) \n FROM singer \n JOIN song ON song.Singer_ID=singer.Singer_ID \n GROUP BY singer.Name;"}
{"db_id": "singer", "SpiderQuestion": "For each singer name, what is the total sales for their songs?", "SpiderSynQuestion": "For each vocalist name, what is the total sales for their songs?", "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "Prediction": "singer.Name, SUM(song.Sales) \n FROM singer \n JOIN song ON singer.Singer_ID = song.Singer_ID \n GROUP BY singer.Name;"}
{"db_id": "singer", "SpiderQuestion": "List the name of singers that do not have any song.", "SpiderSynQuestion": "List the name of musicians that do not have any song.", "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "Prediction": "singer.Name \n FROM singer \n LEFT JOIN song ON singer.Singer_ID = song.Singer_ID \n WHERE song.Singer_ID IS NULL;"}
{"db_id": "singer", "SpiderQuestion": "What is the name of every sing that does not have any song?", "SpiderSynQuestion": "What is the name of every vocalist that does not have any song?", "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "Prediction": "singer.Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Singer_ID IS NULL;"}
{"db_id": "singer", "SpiderQuestion": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "SpiderSynQuestion": "Show the citizenship shared by musicians with birth year before 1945 and after 1955.", "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "Prediction": "Citizenship \nFROM singer \nWHERE Birth_Year < 1945 OR Birth_Year > 1955;"}
{"db_id": "singer", "SpiderQuestion": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "SpiderSynQuestion": "What are the country that are shared by musicians with a birth year before 1945 and after 1955?", "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "Prediction": "DISTINCT Citizenship \nFROM singer \nWHERE Birth_Year < 1945 AND Birth_Year > 1955;"}
{"db_id": "real_estate_properties", "SpiderQuestion": "How many available features are there in total?", "SpiderSynQuestion": "How many available characteristic are there in total?", "query": "SELECT count(*) FROM Other_Available_Features", "Prediction": "COUNT(*) FROM Other_Available_Features;"}
{"db_id": "real_estate_properties", "SpiderQuestion": "What is the feature type name of feature AirCon?", "SpiderSynQuestion": "What is the characteristic type of feature AirCon?", "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "Prediction": "Ref_Feature_Types.feature_type_name \n FROM Other_Available_Features \n JOIN Ref_Feature_Types \n ON Other_Available_Features.feature_type_code=Ref_Feature_Types.feature_type_code \n WHERE Other_Available_Features.feature_name='AirCon';"}
{"db_id": "real_estate_properties", "SpiderQuestion": "Show the property type descriptions of properties belonging to that code.", "SpiderSynQuestion": "Show the property type descriptions of properties belonging to that code.", "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "Prediction": "Ref_Property_Types.property_type_description\n FROM Properties\n JOIN Ref_Property_Types ON Properties.property_type_code=Ref_Property_Types.property_type_code\n WHERE Properties.property_type_code = 'code';"}
{"db_id": "real_estate_properties", "SpiderQuestion": "What are the names of properties that are either houses or apartments with more than 1 room?", "SpiderSynQuestion": "What are the names of properties that are either houses or apartments with more than 1 room?", "query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "Prediction": "Properties.property_name \nFROM Properties \nINNER JOIN Ref_Property_Types \nON Properties.property_type_code=Ref_Property_Types.property_type_code \nWHERE (Ref_Property_Types.property_type_description='house' OR Ref_Property_Types.property_type_description='apartment') \nAND Properties.room_count>1;"}
